<HTML><HEAD><TITLE>Step-by-Step Embedding with Local Servers: Cosmo</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Step-by-Step Embedding with Local Servers: Cosmo</H2><P>The remainder of this chapter will follow modifications I've made to Cosmo (CHAP18\COSMO) so that it can now serve embedded objects of CLSID_CosmoFigure. Unlike a container, a server has very little user interface to contend with: instead, most of the work is functional and deals with rendering and exchanging data. In other words, the server has to define how a cookie looks, how it tastes, what kind of ingredients it needs, and how to mix together all those ingredients. It does not, however, have to worry about the cookie jars, counters, kitchens, and houses in which the cookie jars would sit. Its only concerns are the cookies.</P>
<P>Implementing a basic embeddable object and its server involves the following steps:</P>
<P>Initialize and uninitialize OLE on startup and shutdown with <I>OleInitialize</I> and <I>OleUninitialize</I>, as usual.</P>
<P>Create the necessary registry entries for the object and its server, as discussed in Chapter 17.</P>
<P>Implement a class factory for your embedded object class with all the usual shutdown conditions (described in Chapter 5) along with an extra user control flag if necessary.</P>
<P>Implement the object class that will be the embedded object itself.</P>
<P>Implement <I>IPersistStorage </I>on the object, adding necessary conversion and emulation support. Much of this code can use existing functions that read and write your data to <I>IStorage</I> objects if such code already exists.</P>
<P>Implement <I>IDataObject</I> on the object. If you have already written code to handle the clipboard by means of a data object, this implementation will be straightforward and will require only the addition of other OLE formats.</P>
<P>Implement <I>IOleObject</I> on the object, including verb handling. Most of the members in this large interface are easy to implement.</P>
<P>Modify your server's user interface when editing an embedded object to eliminate or disable various menu commands. You should also change the window's caption bar to reflect the embedding state. This also affects your implementation of File Save As and File Close commands.</P>
<P>Send notifications of data change, closure, saving, and renaming at various times in the object's life.</P>
<P>(Full servers) Augment your server's clipboard code to create embedded objects.</P>
<P>(MDI full servers) Provide alternative user interface for MDI applications, which adds another shutdown condition.</P>
<P>We've seen plenty of examples of steps 1, 2, and 3 in previous chapters, so we won't go into detail here about class factories, the registry, and what to do with -<I>Embedding </I>on the command line—for example, not showing the main window until something such as <I>IOleObject::DoVerb(OLEIVERB</I><I>_</I><I>SHOW) </I>is called. In this chapter, Cosmo registers its class factory only if <I>-Embedding </I>appears, and it uses REGCLS_SINGLEUSE to avoid some of the complications of an MDI server, as described in step 11. However, because Cosmo is generally an MDI application, it does allow the user to create new documents while Cosmo is otherwise visible to serve an embedded object. In this case, Cosmo sets its user control flag, <I>g</I><I>_</I><I>fUser</I>,<I> </I>to TRUE to prevent automatic shutdown when the embedded object is itself closed.</P>
<P>Cosmo's registry entries include a single verb visible to the end user, that being Edit. This is Cosmo's primary verb. In addition, Cosmo marks itself with OLEMISC_CANTLINKINSIDE because we don't deal with monikers yet. (We'll change this in Chapter 21.) The MiscStatus bits for DVASPECT_CONTENT also include OLEMISC_RECOMPOSEONRESIZE so we can see exactly how that works with a container such as Patron. It is interesting to note that the server itself doesn't have to do anything to support this option—the burden is entirely on the container. Whenever Patron resizes a Cosmo object, you'll see a delay in which Cosmo is launched and asked to render the object before being asked to close. Cosmo never becomes visible to the user through this sequence.</P>
<P>Cosmo also registers itself as capable of both converting and emulating the Polyline objects from Chapter 19's Polyline sample (the "Polyline Figure" format) and those from Cosmo's old OLE 1 version (ProgID of "Cosmo1.0"). You can find the source for this version of Cosmo in CHAP18\COSMO1.0. A discussion of what's involved is included in OLE1.WRI on the companion CD.</P></font></body></HTML>
