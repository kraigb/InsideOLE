<HTML><HEAD><TITLE>Control-Specific Registry Keys</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Control-Specific Registry Keys</H3><P>To round out our discussion of the OLE Controls architecture, we'll cover two registry keys that a control should include. The first is simply named Control, which a control can include under its CLSID alongside entries such as Insertable and InprocServer32. This is the only means by which to mark a registered object as an OLE control. Containers can use this key to populate an Insert Control dialog box.8 Controls that are useful only to containers that know more about them might not include Control in the registry, requiring a container to know the control's CLSID ahead of time.</P>
<P><img src="16bit.gif"></P>
<P>The second key is named ToolboxBitmap32. Its value is a path to a DLL or an EXE and a resource identifier such as is used for the DefaultIcon entry we saw for OLE Documents. This key allows a control container to extract a 16*15 button face image for a registered control appropriate to display in a toolbar or tool palette (such as that which Visual Basic uses). Usually the module registered for ToolboxBitmap32 will be the same as the control's server module itself.</P>
<P>A control might or might not include the Insertable key under its CLSID. The key indicates that the control can be inserted into an OLE Documents container as a regular in-place–capable embedded object. This means that the control supports storage-based persistence and doesn't rely on a container to provide event sinks, extended controls, ambient properties, handling of control specific MiscStatus flags, or <I>IOleControlSite</I>. Including this key with a control means that you've made a conscious effort to test the control with noncontrol containers, that the control is prepared to work with a container, and that the control still provides value in such scenarios. </P>
<P>When a control does include Insertable, it should add Properties to its list of verbs. When this verb or OLEIVERB_PRIMARY shows up in <I>IOleObject::DoVerb</I>, the control should display its own property pages. This allows users of noncontrol containers to still manipulate the control and its state without requiring any interaction from the container.</P>
<P>An OLE control should generally be self-registering so that the control's DLL (or EXE) is all that one needs to copy to another machine in order to have a fully functional control (within the bounds of licensing, of course). Accordingly, a control container should provide some sort of user interface to invoke a control's self-registration facilities. This can amount to little more than a File Open sort of dialog or a more elaborate control browser—whatever is appropriate for the container.</P>
<P></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR><TR><TD VALIGN="TOP"><P>8 At the time of writing, the OLE UI Library contained no standard implementation of this dialog.</P></TD></TR></TBODY></TABLE>
<P><BR></P></font></body></HTML>
