<HTML><HEAD><TITLE>The Property Page: IPropertyPage</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>The Property Page: <I>IPropertyPage</I></H3><P>In OLE, a property page is an in-process object that implements <I>IPropertyPage</I>. Through this interface, the property frame provides the necessary information and commands to each page in the sheet:</P>
<P><BR></P>
<pre><code>interface IPropertyPage : IUnknown<BR>    {<BR>    HRESULT SetPageSite(IPropertyPageSite *pPageSite);<BR>    HRESULT Activate(HWND hWndParent, LPCRECT prc, BOOL fModal);<BR>    HRESULT Deactivate(VOID);<BR>    HRESULT GetPageInfo(PROPPAGEINFO *pPageInfo);<BR>    HRESULT SetObjects(ULONG cObjects, IUnknown **ppUnk);<BR>    HRESULT Show(UINT nCmdShow);<BR>    HRESULT Move(LPCRECT prc);<BR>    HRESULT IsPageDirty(VOID);<BR>    HRESULT Apply(VOID);<BR>    HRESULT Help(LPCOLESTR pszHelpDir);<BR>    HRESULT TranslateAccelerator(LPMSG pMsg);<BR>    };<BR><BR>typedef struct tagPROPPAGEINFO<BR>    {<BR>    size_t   cb ;<BR>    LPOLESTR pszTitle;<BR>    SIZE     size;<BR>    LPOLESTR pszDocString;<BR>    LPOLESTR pszHelpFile;<BR>    DWORD    dwHelpContext;<BR>    } PROPPAGEINFO;</code></pre>
<P>These member functions behave as follows:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="104pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Member Function</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>SetPageSite</P></TD><TD VALIGN="TOP"><P>The initialization function for a property page through which the page receives an <I>IPropertyPageSite</I> pointer. This page should make a copy of the pointer and call <I>AddRef</I> through it. A NULL can be passed to this function to instruct the page to release whatever pointer it has.</P></TD></TR><TR><TD VALIGN="TOP"><P>Activate</P></TD><TD VALIGN="TOP"><P>Instructs the page to create its display window as a child of <I>hWndParent</I> and to position it according to <I>prc</I>. The <I>fModal</I> flag indicates that the modality of the dialog frame is always TRUE. This function will be called whenever the user clicks the page's tab in the dialog box.</P></TD></TR><TR><TD VALIGN="TOP"><P>Deactivate</P></TD><TD VALIGN="TOP"><P>Instructs the page to destroy the window created in <I>Activate</I>.</P></TD></TR><TR><TD VALIGN="TOP"><P>GetPageInfo</P></TD><TD VALIGN="TOP"><P>Asks the page to fill a PROPPAGEINFO structure, with the text to show in its tab (such as "Fonts" or "Colors") in <I>pszTitle</I>, the pixel dimensions of the page in <I>size</I>, a help string in <I>pszDocString</I>,* and the name and context ID for a help file in <I>pszHelpFile</I> and <I>dwHelpContext.</I> The property page allocates all strings with <I>CoTaskMemAlloc</I>, and they become the frame's responsibility. If a help filename is given, the frame will enable its Help button.</P></TD></TR><TR><TD VALIGN="TOP"><P>SetObjects</P></TD><TD VALIGN="TOP"><P>Provides the page with the objects being affected by changes. This function will be called after <I>SetPageSite</I> but always before <I>Activate</I> so that the page can retrieve initial values as necessary. The page must make copies of all passed pointers, calling <I>AddRef</I> on each.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>*    This is currently not used by the standard property frame, but it could be used in a status line or in a tool tip to describe the page itself.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="107pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Member Function</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>Show</P></TD><TD VALIGN="TOP"><P>Asks the page to show or hide its window according to <I>nCmdShow.</I></P></TD></TR><TR><TD VALIGN="TOP"><P>Move</P></TD><TD VALIGN="TOP"><P>Asks the page to relocate and resize itself to a position other than what was specified through <I>Activate.</I></P></TD></TR><TR><TD VALIGN="TOP"><P>IsPageDirty</P></TD><TD VALIGN="TOP"><P>Asks the page whether it has changed its state, returning S_OK or S_FALSE. This is used to determine whether to enable the Apply Now button in the dialog, as described in the next section.</P></TD></TR><TR><TD VALIGN="TOP"><P>Apply</P></TD><TD VALIGN="TOP"><P>Instructs the page to send its changes to all the objects passed through <I>SetObjects.</I> The page queries for whatever interface (vtable or dispatch, custom or standard) it requires and informs the objects of new values.</P></TD></TR><TR><TD VALIGN="TOP"><P>Help</P></TD><TD VALIGN="TOP"><P>Instructs the page that the Help button was clicked; <I>pszHelpDir</I> is the default Help directory. If the object wants to invoke its own help information, it should return a success code. If <I>Help</I> returns an error code (E_NOTIMPL), the frame will launch WinHelp using the help information returned through <I>GetPageInfo.</I></P></TD></TR><TR><TD VALIGN="TOP"><P>TranslateAccelerator</P></TD><TD VALIGN="TOP"><P>Informs the page of keyboard events, allowing it to implement its own keyboard interface.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>The size returned through <I>GetPageInfo </I>specifies the pixel dimensions of the page in question. When multiple pages are involved, the frame will create a page area large enough for the largest page (as shown earlier in Figures 16-1, 16-2, and 16-3). Those dimensions are then used in calculating the rectangle passed to both <I>Activate </I>and <I>Move.</I></P>
<P>The frame will call the <I>Apply</I> member of each page either when the user clicks the Apply Now button or when the user clicks OK to close the dialog box. How a property page chooses to implement <I>Apply</I> depends entirely on what it knows about the objects that might specify the page. General purpose pages used by different object classes—such as the Fonts and Colors pages shown earlier—must specify in their documentation exactly how they intend to send changes to an object. This is done most often through standard dispIDs for various properties. Other pages that are private to an object class can use whatever mechanism is most convenient—for example, a custom interface. Whatever the means, successfully applying changes should clear the page's dirty flag so that <I>IsPageDirty</I> will return S_FALSE. If errors occur, the state should remain dirty.</P>
<P>The window created in <I>Activate</I> should be a child window of the frame. This child window has no border and no caption, but otherwise, it contains all the controls to display for that page. The most convenient implementation method is to define a dialog template for the page layout specifying the WS_CHILD style bit but without the WS_CAPTION and WS_THICKFRAME bits. You can then implement <I>Activate</I> by creating a modeless dialog box from this template through the Windows function <I>CreateDialog</I>. We'll see an example later in this chapter.</P></font></body></HTML>
