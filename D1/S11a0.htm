<HTML><HEAD><TITLE>Pulling Rabbits from a Hat with STGM_CONVERT</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Pulling Rabbits from a Hat with STGM_CONVERT</H3><P>Cosmo is capable of reading and writing two different versions of its files; in Chapter 1, both formats were typical MS-DOS files. For this chapter and later ones, Cosmo uses a compound file for its version 2 files, but it remains compatible with old files (both the version 1 files and the version 2 files generated by the Chapter 1 version of Cosmo) and is able to read and write the old formats. Cosmo preserves its old file-writing code for this reason, but reading files of either format can be centralized using the STGM_CONVERT flag. We could, of course, test a file with <I>StgIsStorageFile </I>first and call the appropriate code to handle whichever version of the file is present. Doubtless many applications have this code already. But let's see what we can do with OLE's automatic conversion.</P>
<P>When Cosmo sees a noncompound file while loading, it calls <I>StgCreateDocfile</I>, passing STGM_CONVERT instead of STGM_CREATE, and this causes OLE to open the file as a compound file with a single stream named "CONTENTS" (in uppercase). If this operation succeeds, the HRESULT returned from <I>StgCreateDocfile</I> will contain STG_S_CONVERTED, which is a success code (_<I>S</I>_) but different from NOERROR. Therefore, using the FAILED macro is a valid test for errors.</P>
<P><BR></P>
<pre><code>LPSTORAGE    pIStorage;<BR>HRESULT      hr;<BR><BR>hr=StgCreateDocfile(pszFile, STGM_TRANSACTED | STGM_READWRITE<BR>    | STGM_CONVERT | STGM_SHARE_EXCLUSIVE, 0, &amp;pIStorage);<BR><BR>if (FAILED(hr))<BR>    {<BR>    if (STG_E_ACCESSDENIED==GetScode(hr))<BR>        [Try loading file using traditional file I/O.]<BR>    }</code></pre>
<P>When using <I>StgCreateDocfile</I> for conversion, we purposely pass STGM_TRANSACTED ¦ STGM_READWRITE but never bother to commit anything. The semantics of STGM_CONVERT in <I>StgCreateDocfile</I> mean "convert the file now." If we use STGM_DIRECT in this case, the old file will be immediately overwritten with a compound file. By specifying STGM_TRANSACTED, we create the conversion in a separate temporary storage, leaving the original disk image unaffected. Calling <I>IStorage::Commit</I> would then change the actual file on the disk.</P>
<P>Because conversion is a potential Write operation, we must specify at least STGM_WRITE along with STGM_CONVERT. If the file is marked as read-only, however, <I>StgCreateDocfile</I> will fail with STG_E_ACCESSDENIED. In this situation, you can default to loading the file with old code that restricts you to read-only access. For this reason, Cosmo preserves its original <I>CPolyline::ReadFromFile </I>function as a backup.</P>
<P>It is no coincidence that I chose to use the stream name "CONTENTS" for Cosmo's native compound files. My choice means that the code in <I>CPolyline::ReadFromStorage </I>doesn't have to care whether the storage is a native compound file or a converted traditional file. It is, however, perfectly fine to use whatever stream names you want, especially if you need to distinguish between versions of data elsewhere in your code. The choice of "CONTENTS" in Cosmo is completely arbitrary, made only to match what OLE creates with STGM_CONVERT.</P>
<P><B>N</B><B>ote</B><B>:</B>  STGM_CONVERT can be used only with StgCreateDocfile and StgCreateDocfileOnILockBytes. It is not supported with StgOpenStorage or StgOpenStorageOnILockBytes.</P></font></body></HTML>
