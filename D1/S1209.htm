<HTML><HEAD><TITLE>Summary</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Summary</H2><P>OLE makes it possible to work with all clipboard data through the <I>IDataObject </I>interface. The API function <I>OleGetClipboard </I>retrieves a data object that encapsulates the data on the clipboard, regardless of whether that data was placed there by an OLE-aware application or a non-OLE Windows application. An OLE-aware source application copies data to the clipboard by packaging that data inside a data object and passing that object's <I>IDataObject </I>pointer to the API function <I>OleSetClipboard.</I> This makes all global-memory–based data in that object available to all applications (OLE and non-OLE alike) and makes any other data based on other mediums available to OLE-aware consumers. Through the OLE Clipboard, then, applications can achieve higher-performance data exchange without losing compatibility with any other non-OLE applications.</P>
<P>In this chapter, we examine the methods for working with the OLE Clipboard protocol and see how simple OLE code can easily replace other code to manipulate the clipboard through the existing Windows API. Both the Cosmo and Patron samples show all this, and Patron also demonstrates the use of the OLE UI Library's Paste Special dialog box, in which the user can specifically select a data format to paste. This work in Patron enables it to store meaningful information in its documents.</P></font></body></HTML>
