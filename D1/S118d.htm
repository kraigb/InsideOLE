<HTML><HEAD><TITLE>The Stat Member Function and STATSTG</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>The <I>Stat</I> Member Function and STATSTG</H3><P>As we've seen in the last two sections, both <I>IStorage </I>and <I>IStream </I>have a member function named <I>Stat</I>, along with <I>IStorage::EnumElements</I>, which returns an <I>IEnumSTATSTG </I>pointer. All of these functions deal with the STATSTG structure, which contains information such as the name of the element, creation and modification times, the type of object (storage or stream), the access mode under which the object is opened, and whether the object supports region locking:</P>
<P><BR></P>
<pre><code>typedef struct FARSTRUCT tagSTATSTG<BR>    {<BR>    char FAR         *pwcsName;            //Name of element<BR>    DWORD             type;                //Type of element<BR>    ULARGE_INTEGER    cbSize;              //Size of element<BR>    FILETIME          mtime;               //Last mod date/time<BR>    FILETIME          ctime;               //Creation date/time<BR>    FILETIME          atime;               //Last access date/time<BR>    DWORD             grfMode;             //Mode element opened in<BR>    DWORD             grfLocksSupported;   //Support region locking?<BR>    CLSID             clsid;               //CLSID of element<BR>    DWORD             grfStateBits;        //Current state<BR>    DWORD             reserved;<BR>    } STATSTG;<BR><BR>//For type field<BR>typedef enum tagSTGTY<BR>    {<BR>    STGTY_STORAGE   = 1,   //Storage object<BR>    STGTY_STREAM    = 2,   //Stream object<BR>    STGTY_LOCKBYTES = 3,   //Byte array object (Compound Files)<BR>    } STGTY;<BR><BR>//For grfLocksSupported<BR>typedef enum tagLOCKTYPE<BR>    {<BR>    LOCK_WRITE      = 1,<BR>    LOCK_EXCLUSIVE  = 2,<BR>    LOCK_ONLYONCE   = 4<BR>    } LOCKTYPE;</code></pre>
<P>The <I>mtime</I>, <I>ctime</I>, <I>atime</I>, and <I>clsid </I>fields are meaningful only for storage elements, whereas <I>grfLocksSupported </I>is meaningful only for streams. Furthermore, <I>grfMode </I>is not meaningful in the context of <I>IEnumSTATSTG</I>, only in <I>Stat </I>calls.</P>
<P>The <I>mtime </I>field (modification time) will contain a different time stamp depending on whether the mode of the storage is direct or transacted. (See the next section.) The value of <I>mtime </I>for a transacted storage will be the time of the last commit. For a direct storage, <I>mtime </I>will contain the time of the last call to <I>IStorage::Commit</I> or the last call to <I>IStorage::Release</I> because <I>Commit </I>has no impact on a direct-mode storage other than flushing buffers.</P>
<P>You might have noticed the STGTY_LOCKBYTES flag that crept in here: this specifically identifies a LockBytes object that is peculiar to Compound Files, OLE's storage implementation. It is not strictly part of the general Structured Storage specification.</P>
<P>One more important point to remember about a STATSTG structure is that <I>pwcsName</I> points to a buffer allocated with the task allocator from <I>CoGetMalloc</I>. The client that calls <I>Stat </I>or <I>IStorage::EnumElements </I>becomes responsible for this memory, so you must free it with <I>CoTaskMemFree</I>.</P>
<P>In looking through the <I>IStorage </I>and <I>IStream </I>members, we've seen a number of references to access modes such as transacted and direct. It's time now to look at all of these modes along with the other features of this technology.</P></font></body></HTML>
