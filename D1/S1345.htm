<HTML><HEAD><TITLE>Summary</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Summary</H2><P>Many user interface elements on a computer are intended to mimic the behavior of the mechanical controls that abound in everyday life. Although operating systems such as Windows provide a base set of control objects, developers can create their own custom controls to extend the available set. In the past, several standards for writing custom controls have existed, but none were designed for extensibility and integration with arbitrary containers. The VBX standard for Visual Basic controls, for example, does not extend well to the 32-bit world. For that reason, Microsoft created OLE Controls, a new standard based on OLE.</P>
<P>A control implemented according to this standard is basically an OLE object that supports persistence, embedding, in-place activation, automation, outgoing interfaces (event sets), property pages, and keyboard mnemonics. To support these features, a control implements many interfaces, including <I>IOleObject</I>,<I> IOleInPlaceObject</I>,<I> IOleInPlaceActiveObject</I>,<I> IDispatch</I>,<I> IConnectionPointContainer</I>,<I> ISpecifyPropertyPages</I>,<I> IDataObject</I>,<I> IViewObject2</I>,<I> IProvideClassInfo</I>,<I> IRunnableObject</I>,<I> </I>any of the <I>IPersist</I>*<I> </I>interfaces (except <I>IPersistFile</I>), and the interface named <I>IOleControl</I>, which distinguishes a control from other types of objects.</P>
<P>In the same manner, a container for OLE controls must be capable of handling all these control features. It must also be capable of in-place activation as well as act something like an automation controller by assigning actions to control events that are handled inside event sinks. A container also provides an implementation of <I>IDispatch </I>to expose what are called <I>ambient properties</I>—characteristics of the container that apply to all controls. In addition, a container's site exposes the interface <I>IOleControlSite</I> to provide specific services to the control in that site.</P>
<P>For the most part, the OLE Controls technology uses many of the other technologies in OLE. Only the implementations of the <I>IOleControl </I>and <I>IOleControlSite </I>interfaces represent those functions that are relevant to controls. This includes, in addition to standard ambient properties, keyboard mnemonics, default and cancel buttons, additional MiscStatus bits, and a number of standard control properties, methods, and events.</P>
<P>This chapter explores the architecture of the OLE Controls technology and demonstrates parts of its implementation using the Patron and Polyline samples from previous chapters. Although controls are complex (and have a large number of interfaces), they are also quite powerful and will become more and more important in the future of component software.</P></font></body></HTML>
