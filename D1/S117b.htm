<HTML><HEAD><TITLE>Write a Make File for MIDL-Generated Files</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Write a Make File for MIDL-Generated Files</H3><P>Once you have an IDL file and a DEF file, you're ready to compile the DLL. However, you need to know the names of the MIDL-generated source files before you can write a make file to build them all. So you need the appropriate MIDL command in the make file as well. For both IANIMAL.DLL and IKOALA.DLL, I've used the following command line for MIDL:</P>
<P><BR></P>
<pre><code>midl /ms_ext /app_config /c_ext &lt;name&gt;.idl</code></pre>
<P>where <I>/ms</I><I>_</I><I>ext </I>and <I>/c</I><I>_</I><I>ext </I>enable Microsoft extensions to IDL (necessary with OLE interfaces) and <I>/app</I><I>_</I><I>config </I>allows certain attributes to appear in the IDL file instead of having to be present in another <I>attribute configuration file,</I> or ACF. This is something that you might want to try if you have a lot of interfaces to define.</P>
<P>With this simple command line, MIDL generates the following files by default, assuming that <I>&lt;name&gt; </I>identifies the name of the IDL file, as in the command line above:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="100pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>&lt;name&gt;_p.c</P></TD><TD VALIGN="TOP"><P>Source code for the interface proxy and interface stubs</P></TD></TR><TR><TD VALIGN="TOP"><P>&lt;name&gt;_i.c</P></TD><TD VALIGN="TOP"><P>Interface information, such as the structure containing the IID</P></TD></TR><TR><TD VALIGN="TOP"><P>&lt;name&gt;.h</P></TD><TD VALIGN="TOP"><P>The header file that defines the interface for both C and C++ compilers</P></TD></TR><TR><TD VALIGN="TOP"><P>dlldata.c</P></TD><TD VALIGN="TOP"><P>An auxiliary file that contains added information about the DLL</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>If you run MIDL on IANIMAL.IDL, you'll end up with IANIMAL_P.C, IANIMAL_I.C, IANIMAL.H, and DLLDATA.C (assuming your operating system supports long filenames). With IKOALA.IDL, you'll have IKOALA_P.C, IKOALA_I.C, IKOALA.H, and DLLDATA.C. MIDL does have a number of command-line options to suppress generation of the proxy or stub side of the code, to suppress generation of header and auxiliary files, and to rename each of these output files. Run MIDL /? or check the MIDL documentation for more information about these options.</P>
<P>Now that you know which files MIDL will generate, you can write a make file to compile these files as you would any other standard C code. You'll probably want to place the MIDL command underneath a dependency on the IDL file, as follows:</P>
<P><BR></P>
<pre><code>ianimal.h ianimal_p.c ianimal_i.c dlldata.c: ianimal.idl<BR>    midl /ms_ext /app_config /c_ext ianimal.idl</code></pre>
<P>Both the IANIMAL and IKOALA samples also include the file LIBMAIN.CPP with a custom DLL entry point. This is just to work with this book's make file system and isn't included for any other reason.</P>
<P>If you take a look at the MIDL-generated code, you'll see a lot of calls to <I>Ndr </I>(Network Data Representation) functions in the <I>_</I><I>p </I>suffix file that the MIDL-generated proxy and stub use to stuff information into the RPC Channel. In addition, the <I>_</I><I>i </I>suffix file will contain the interface's ID, defined with a structure instead of a macro such as DEFINE_GUID:</P>
<P><BR></P>
<pre><code>typedef struct _IID<BR>{<BR>    unsigned long x;<BR>    unsigned short s1;<BR>    unsigned short s2;<BR>    unsigned char  c[8];<BR>} IID;<BR><BR>const IID IID_IAnimal =<BR>{{0x0002114a,0x0000,0x0000,{0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}};</code></pre>
<P>As far as the DLL itself is concerned, there is no reason to store this IID anywhere else. However, clients and servers that are going to implement this interface will need a definition of the IID elsewhere, and for this reason you'll find <I>IID</I><I>_</I><I>IAnimal </I>and <I>IID</I><I>_</I><I>IKoala </I>listed in INC\BOOKGUID.H. Both EKoala4 and ObjectUser3 include these interfaces. In that same directory, you'll also find copies of MIDL-generated IANIMAL.H and IKOALA.H, which the client and server samples need as well, but they don't care who wrote the header file; nor do they care that these are custom interfaces. From a compiler's point of view, a custom interface header contains the same material as the OLE headers themselves, all interfaces being equal.</P></font></body></HTML>
