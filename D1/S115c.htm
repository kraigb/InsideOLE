<HTML><HEAD><TITLE>Cosmo's Polyline as a DLL Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Cosmo's Polyline as a DLL Object</H2><P>All of the variations of the Koala object that we've seen earlier in this chapter are pretty boring and, well, useless. I bet you'd now like a component example that does something real. To demonstrate a more useful and exciting component, I've taken the Cosmo application from Chapter 1 and turned the C++ object <I>CPolyline </I>into an OLE component. The CHAP05\POLYLINE directory contains the implementation of this component using an in-process server, POLY05.DLL. Its registry entries are stored under the CLSID <I>00021147-0000-0000-C000-000000000046</I> (<I>CLSID</I><I>_</I><I>Polyline5</I>). This Polyline component provides objects with an incoming interface named <I>IPolyline5 </I>(which is equivalent to the C++ member functions on the original <I>CPolyline</I>) and an outgoing interface named <I>IPolylineAdviseSink5 </I>(which has the same member functions as the original <I>CPolylineAdviseSink</I>). To support this outgoing interface, the objects also implement <I>IConnectionPointContainer </I>and a connection point for <I>IPolylineAdviseSink</I>, demonstrating how connection points work between a real client and a real component. Both the <I>IPolyline</I>* interfaces are defined in INC\IPOLY5.H (their IIDs are defined in INC\BOOKGUID.H).</P>
<P><I>IPolyline5 </I>contains member functions to deal with initialization, file I/O, data exchange, positioning of its window, and setting colors and line styles. As we progress through this book, we'll replace portions of this interface with standard OLE interfaces that provide the same capabilities, eventually building Polyline into a compound document object as well as an OLE control. For example, we can replace the file I/O members with the interfaces <I>IPersistStorage </I>and <I>IPersistStreamInit</I>, as we'll do in Chapter 8, and we can replace the data exchange members with <I>IDataObject, </I>as we'll do in Chapter 10. We'll also have occasion in Chapter 10 to replace the <I>OnDataChange </I>member of <I>IPolylineAdviseSink5 </I>with support for a separate outgoing interface called <I>IAdviseSink, </I>which also has an <I>OnDataChange </I>member. But throughout all these changes, the basic structure of the Polyline component, that is, its class factory, server structure, and object structure, will remain essentially the same.</P>
<P><I>IPolyline5 </I>and <I>IPolylineAdviseSink5 </I>are examples of custom interfaces, but because we're implementing them on an in-process object we don't need any marshaling support. If we wanted to make a local server for Polyline, we'd have to create that marshaling support. The process of doing that is a topic for Chapter 6, but we'll demonstrate the mechanism on a somewhat simpler interface.</P>
<P>If you look at Polyline's source code, you'll notice that the <I>CPolyline </I>class still exists. The Polyline component uses this class internally to implement the object. This really demonstrates how you can take a C++ object and turn it into a shareable OLE component.</P>
<P>Of course, with Polyline split off into a separate component, Cosmo becomes a client of that component, which we'll now call Component Cosmo or CoCosmo. Its modified sample code is found in CHAP05\COCOSMO, in which modifications from the Chapter 1 version of Cosmo are offset by //CHAPTER5MOD and //End CHAPTER5MOD comments. This allows you to see exactly the sorts of things that a real client program would do to manage a component, including connection to an outgoing interface through connection points. Overall, Component Cosmo merely changed from being the user of a private C++ object, <I>CPolyline</I>, to being a client of the Polyline component through COM.</P></font></body></HTML>
