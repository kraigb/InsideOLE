<HTML><HEAD><TITLE>Clients and Servers</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Clients and Servers</H3><P>As mentioned in the previous section, a service or a component is provided through one or more objects, each object consisting of a logical grouping (or isolation) of particular features of the component. These objects make up the communication channels between the user of those objects (some piece of code) and the provider of the objects.</P>
<P>In this book, I use the term <I>client</I> to refer to the user of objects—the piece of code that is accessing the functionality and the content of those objects. <I>Client</I> literally means "one who uses the services of another," which is exactly what we're talking about. In some cases, I might use the term <I>user</I> or <I>object</I> <I>user</I> synonymously with <I>client</I>.2 In addition, when a client also maintains the persistent states of object instances, that client is called a <I>container</I> because it contains those object instances that are entirely described by the state data. <I>Container</I> is most frequently used in the context of compound documents and custom controls.</P>
<P>The provider of a component and its constituent objects is known as a <I>server,</I> literally, "one who furnishes services." There is hardly a better term to describe a service provider, for in a programmatic sense a server is the demand-loaded code module—such as a DLL or an EXE—that makes a component and its objects available to the outside world. Without a server, the objects remain hidden from external view. The server holds them out on a silver platter and invites clients to partake of them.</P>
<P>The relationship between a client, a server, and the objects that make up a component or a server is illustrated in Figure 1-1. This is similar to the more general definition of any client-server relationship that might use any number of mechanisms to communicate. In the OLE relationship shown here, however, communication happens through OLE objects.</P>
<P>    <img src="f01dd01.gif"></P>
<P><B>Figure 1-1.</B></P>
<P><B>The OLE client-server relationship. A <I>client</I> uses a component or a service as provided by a <I>server,</I> and the communication between client and server happens through OLE objects.</B></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR><TR><TD VALIGN="TOP"><P>2 In <I>Inside OLE 2</I> I used the term <I>user</I> much more frequently than I do in this edition. That was because the term <I>client</I> was poorly understood from the compound document definition that was used with OLE 1 and so in the transition from OLE 1 to OLE 2 <I>client</I> was ambiguous. Now that OLE 2 has established itself it is once again safe to use <I>client</I> in the real meaning of the word.</P></TD></TR></TBODY></TABLE>
<P><BR></P></font></body></HTML>
