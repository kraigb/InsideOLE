<HTML><HEAD><TITLE>Registry Entries for Content Objects</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Registry Entries for Content Objects</H3><P>From previous chapters, we know about registry entries such as those that appear under an object's ProgID, VersionIndependentProgID, and CLSID. Additional entries hold information relevant to OLE Documents. (This example is taken from the version of Cosmo we'll implement in Chapter 18.)1</P>
<P><BR></P>
<pre><code>\<BR>    Cosmo.Figure.2 = Cosmo Figure (Chap 18)<BR>        CLSID = {002114E-000-0000-C000-000000000046}<BR>        Insertable<BR>\<BR>    CLSID<BR>        {002114E-000-0000-C000-000000000046} = Cosmo Figure (Chap 18)<BR>            LocalServer32 = c:\inole\chap18\cosmo\cosmo18.exe<BR>            InprocHandler32 = OLE32.DLL<BR>            ProgID = Cosmo.Figure.2<BR>            VersionIndependentProgID = Cosmo.Figure<BR>            Insertable<BR>            DataFormats<BR>                GetSet<BR>                    0 = Polyline Figure,1,1,3<BR>                    1 = Embed Source,1,8,1<BR>                    2 = 3,1,32,1<BR>                    3 = 2,1,16,1<BR>            DefaultIcon = c:\inole\chap18\cosmo\cosmo18.exe,0<BR>            verb<BR>                0 = &amp;Edit,0,2<BR>                -1 = Show,0,0<BR>                -2 = Open,0,0<BR>                -3 = Hide,0,1<BR>            AuxUserType<BR>                2 = Cosmo<BR>                3 = Cosmo from Chapter 18<BR>            MiscStatus = 16<BR>                1 = 17<BR>            Conversion<BR>                Readable<BR>                    Main = Cosmo1.0,Polyline Figure<BR>                Readwritable<BR>                    Main = Cosmo1.0,Polyline Figure</code></pre>
<P><img src="16bit.gif"></P>
<P>We've seen many of these entries already, including <I>DataFormats</I>, which we first encountered in Chapter 10 along with the <I>OleRegEnumFormatEtc </I>function that worked with such entries. Also, these entries mark OLE32.DLL as the object handler for this particular object type. OLE32.DLL is the default handler itself. If you do not include an <I>InprocHandler32 </I>entry, OLE uses the default handler anyway.</P>
<P>The new entries for OLE Documents are described in the following table:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Key</B></P></TD><TD VALIGN="TOP"><P><B>Subkeys and Values</B></P></TD></TR><TR><TD VALIGN="TOP"><P>Insertable</P></TD><TD VALIGN="TOP"><P>Marks the object as one that supports OLE Documents, meaning that it should appear in a container's Insert Object dialog box.</P></TD></TR><TR><TD VALIGN="TOP"><P>DefaultIcon</P></TD><TD VALIGN="TOP"><P>A path to a module and the index of an icon in that module to use by default when the user checks Display As Icon in the container's Insert Object and Paste Special dialog boxes. If no entry is given or if the path is invalid, the dialog boxes will show a default icon (a sheet of paper with a corner folded down, your standard document icon).</P></TD></TR><TR><TD VALIGN="TOP"><P>verb</P></TD><TD VALIGN="TOP"><P>This key has no value, but each subkey is of the form &lt;<I>verb identifier</I>&gt; = &lt;<I>text</I>&gt;,&lt;<I>menu flags</I>&gt;,&lt;<I>verb flags</I>&gt;. This list of keys identifies the object's supported verbs; those with zero or positive identifiers can appear in a container's pop-up menu. As a whole, this list defines the supported verbs that can be passed to <I>IOleObject::DoVerb</I>. In the value for each identifier is first a text string suitable for user interface. This can include an ampersand if the verb is allowed to appear in a menu. The &lt;<I>menu flags</I>&gt; provide MF_* values from WINDOWS.H that should be used for this item in a menu. Usually, this value is MF_STRING ¦ MF_ENABLE ¦ MF_UNCHECKED, which translates to 0. The &lt;<I>verb flags</I>&gt; are values taken from the enumeration OLEVERBATTRIB and can include OLEVERBATTRIB_NEVERDIRTIES (value 1, which indicates that the verb does not modify the object in any way) and OLEVERBATTRIB_ONCONTAINERMENU (value 2, which indicates that the verb should appear on a pop-up menu).</P></TD></TR><TR><TD VALIGN="TOP"><P>AuxUserType</P></TD><TD VALIGN="TOP"><P>This key has no value itself but instead has subkeys of the format &lt;<I>form number</I>&gt; = &lt;<I>string</I>&gt;; &lt;<I>form number</I>&gt; is either 2 or 3 (never 1, for reasons known only to the gods)* and &lt;<I>string</I>&gt; is some user-readable name of the object. Form number 2 should always be a short name (under 10 characters) that describes the type of the object, as in "Cosmo". Form number 3 is a longer application name, such as "Cosmo from Chapter 18", used specifically with the Paste Special dialog box.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>*    Actually, 1 is defined as the name stored as the value of the object's CLSID, so it need not be stored here.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Key</B></P></TD><TD VALIGN="TOP"><P><B>Subkeys and Values</B></P></TD></TR><TR><TD VALIGN="TOP"><P>MiscStatus</P></TD><TD VALIGN="TOP"><P>The value of this key is the default set of flags for the object. Each subkey is of the form &lt;<I>a</I><I>spect</I>&gt; = &lt;<I>status</I>&gt;, where &lt;<I>aspect</I>&gt; is a DVASPECT value and &lt;<I>status</I>&gt; is an integer flag.</P></TD></TR><TR><TD VALIGN="TOP"><P>Conversion</P></TD><TD VALIGN="TOP"><P><I>Under this key, the object describes the other data formats that it can either convert to its own (listed under Readable) or emulate (listed under Readwritable). The subkey Main has a value of the form &lt;format,format,format,format,...&gt;. Each format is eit</I><I>her a clipboard format string, as in "Polyline Figure", or an OLE 1 server ProgID, as in "Cosmo1.0".</I><I>†</I><I> These entries are used to populate a container</I><I>'</I><I>s Convert dialog box, as will be explained later.</I></P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>†    </B><B>Specific considerations for OLE 1 c</B><B>onversion can be found in the file OLE1.WRI on thesample CD.</B></P>
<P>The OLE API functions <I>OleRegEnumVerbs</I>, <I>OleRegGetUserType</I>, and <I>OleRegGetMiscStatus </I>will read some of these entries for you effortlessly. <I>OleReg-EnumVerbs </I>returns an enumerator for the OLEIVERB type (<I>IEnumOLEI-VERB</I>), <I>OleRegGetUserType </I>returns a string, and <I>OleRegGetMiscStatus </I>returns a DWORD with the MiscStatus bits. The MiscStatus values come from the C++ enumeration OLEMISC and are the same flags that an object will return from <I>IOleObject::GetMiscStatus</I>:</P>
<P><BR></P>
<pre><code>enum tagOLEMISC<BR>    {<BR>    OLEMISC_RECOMPOSEONRESIZE   = 1,    //Run object to resize.<BR>    OLEMISC_ONLYICONIC          = 2,    //Object only appears iconic.<BR>    OLEMISC_INSERTNOTREPLACE    = 4,    //Paste instead of delete.<BR>    OLEMISC_STATIC              = 8,    //Static object<BR>    OLEMISC_CANTLINKINSIDE      = 16,   //No linking to embedding<BR>    OLEMISC_CANLINKBYOLE1       = 32,   //Too complex for OLE 1<BR>    OLEMISC_ISLINKOBJECT        = 64,   //Object is linked.<BR>    OLEMISC_INSIDEOUT           = 128,  //In-place activation<BR>    OLEMISC_ACTIVATEWHENVISIBLE = 256,  //In-place activation<BR>    OLEMISC_RENDERINGISDEVICEINDEPENDENT = 512<BR>    } OLEMISC;</code></pre>
<P>Many of these flags are self-explanatory, and we'll see them in context as we go along. OLEMISC_RECOMPOSEONRESIZE specifically tells a container to run the object whenever its space is changed in the compound document, allowing the object to control its output quality when scaling is used. OLEMISC_INSERTNOTREPLACE tells a container that performing a Paste operation with this object selected should not replace the object but rather paste <I>into </I>it through <I>IOleObject::InitFromData. </I>OLEMISC_CANTLINKBYOLE1 says that an object uses link source information that is too complicated for OLE 1 containers to handle—OLE 1 can work with a File or a File!Item moniker, but nothing more.</P>
<P>Besides the flags shown here, OLE Controls adds a large number of other OLEMISC flags for its various uses, as we'll see in Chapter 24. For the most part, a simple embedding container or an embedded object will deal with only a few of these.</P>
<P></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR><TR><TD VALIGN="TOP"><P>1 An entry named <I>protocol </I>can also appear here for compatibility with OLE 1 containers. This key has a subkey named <I>StdFileEditing</I>,<I> </I>which itself has two subkeys. The first is an entry named <I>server</I>, whose value is a path to the OLE 2 local server. (Only local servers are allowed.) The other is named <I>verb </I>and contains any number of subkeys 0, 1, 2, and so on, each with a value of a verb string to show in the OLE 1 container. You can look in the REG files of Chapter 18's Cosmo sample for details about these entries.</P></TD></TR></TBODY></TABLE>
<P><BR></P></font></body></HTML>
