<HTML><HEAD><TITLE>Return Types: HRESULT and SCODE</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Return Types: HRESULT and SCODE</H3><P>Except in special circumstances, nearly every COM and OLE API function and nearly every interface member function returns a value of the type HRESULT. HRESULT is also called a "handle to a result" and has a structure identical to the Win32 error codes structure, as shown in Figure 2-2.</P>
<P><img src="f02dd02.gif"></P>
<P><B>Figure 2-2.</B></P>
<P><B>Structure of an HRESULT and an SCODE.</B></P>
<P><img src="16bit.gif"></P>
<P>Another name for an HRESULT on 32-bit platforms is SCODE, which has exactly the same structure. Historically, these were different types on 16-bit platforms, but they have since been made identical. Because many of the samples in this book also compile to 16 bits, you'll see some 16-bit COM API functions used in the code. These compile to nothing under 32 bits.</P>
<P>A major benefit of this error structure is that it not only defines the error but also includes the facility or layer within the system or component that caused the error, such as whether it was an error in the RPC transport between processes or an error that occurred inside the implementation of a member function. This can help tremendously when you are trying to determine when and where the error occurred. The other big gain with HRESULT/SCODE<I> </I>is that the severity bit allows you to have <I>multiple success codes </I>in addition to multiple failure codes.5 Traditionally, functions have returned only Boolean information or returned only one success code and any number of error codes. With OLE, you can write a function that returns a TRUE or FALSE value if the function works and an error code if it doesn't work.</P>
<P>Because there are both multiple success and multiple error codes, OLE follows a naming convention for different codes. Any name with <I>E</I><I>_</I> in it, which may be at the beginning as in E_FAIL or RPC_E_NOTCONNECTED means that the function failed. Any name with <I>S</I><I>_</I>, as in S_TRUE, S_FALSE, or STG_S_CONVERTED, means that the function succeeded. The most common codes are listed in Table 2-2. Because there can be multiple codes in each category, there are also two macros, SUCCEEDED and FAILED, that determine whether a code falls into the appropriate category, returning a Boolean TRUE or FALSE value. (SUCCEEDED returns TRUE when FAILED returns FALSE, and vice versa.) These macros actually do nothing more than test the high bit in the code, but they are used frequently in conditional statements.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="102pt" VALIGN="TOP"><COL WIDTH="306pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value</B></P></TD><TD VALIGN="TOP"><P><B>Meaning</B></P></TD></TR><TR><TD VALIGN="TOP"><P>S_OK</P></TD><TD VALIGN="TOP"><P>Function succeeded. Also used for functions that semantically return a Boolean TRUE result to indicate that the function succeeded.</P></TD></TR><TR><TD VALIGN="TOP"><P>S_FALSE</P></TD><TD VALIGN="TOP"><P>Used for functions that semantically return a Boolean FALSE result to indicate that the function succeeded.</P></TD></TR><TR><TD VALIGN="TOP"><P>E_NOINTERFACE</P></TD><TD VALIGN="TOP"><P><I>QueryInterface</I> did not recognize the requested interface.</P></TD></TR><TR><TD VALIGN="TOP"><P>E_NOTIMPL</P></TD><TD VALIGN="TOP"><P>Member function contains no implementation.</P></TD></TR><TR><TD VALIGN="TOP"><P>E_FAIL</P></TD><TD VALIGN="TOP"><P>Unspecified failure.</P></TD></TR><TR><TD VALIGN="TOP"><P>E_OUTOFMEMORY</P></TD><TD VALIGN="TOP"><P>Function failed to allocate necessary memory.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 2-2.</B></P>
<P><B>Common SCODE values.</B></P>
<P>There is one special value that has the symbol NOERROR, which is defined as 0 and is equivalent to S_OK. (Win32 also defines NO_ERROR and ERROR_SUCCESS as 0.) You'll see this used quite often as a return value for a function, but you must be careful when you use it in a conditional statement. A common mistake is to compare the return value of a function to NOERROR to see whether it worked, but if the function returns a nonzero success code, such as S_FALSE (which is 1), the comparison will be wrong. There are only a few cases in which you <I>really </I>want to know whether the function returns <I>exactly </I>NOERROR. Otherwise, you should always use SUCCEEDED and FAILED.</P>
<P><img src="16bit.gif"></P>
<P>You may have occasion to display a useful message to an end user when you encounter an error represented by an HRESULT. For this purpose, OLE offers the function <I>FormatMessage</I> that returns a user-readable message for any given HRESULT, localized to the user's language as appropriate. See the <I>OLE Programmer</I><I>'</I><I>s Reference </I>for more information on this function.</P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR><TR><TD VALIGN="TOP"><P>5 Note that a function's possible <I>success</I> codes are part of that function's behavior and must be fixed when the function is first published. Error codes however can be added at any later time.</P></TD></TR></TBODY></TABLE>
<P><BR></P></font></body></HTML>
