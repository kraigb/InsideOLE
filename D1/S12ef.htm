<HTML><HEAD><TITLE>In-Place Interfaces for Containers</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>In-Place Interfaces for Containers</H3><P>For a container to support in-place activation, it must implement the <I>IOleInPlaceSite </I>interface on its site object alongside <I>IOleClientSite </I>and <I>IAdviseSink.</I> The presence of <I>IOleInPlaceSite</I> tells embedded objects that its container is in-place capable. In addition, the container must also create a frame object that implements <I>IOleInPlaceFrame</I>. This object is separate from the site, and only one frame exists per container. Through <I>IOleInPlaceFrame</I>, an object merges its top-level user interface (such as menu items and toolbars) with the container's. If the container can provide separate document windows, as MDI applications can, each document must be an object that implements <I>IOleInPlaceUIWindow</I>. Through this interface, the object can display user interface tools inside document windows. The overall structure of an in-place–capable container is shown in Figure 22-1. If the container does not have separate document windows, <I>IOleInPlaceUIWindow </I>is not needed.</P>
<P>    <img src="f22dd01.gif"></P>
<P><B>Figure 22-1.</B></P>
<P><B>The structure of an in-place–capable container.</B></P>
<P>All of these interfaces are derived from a common base interface named <I>IOleWindow.</I> It represents operations common to all parts of the container:</P>
<P><BR></P>
<pre><code>interface IOleWindow : IUnknown<BR>    {<BR>    HRESULT GetWindow(HWND *phwnd);<BR>    HRESULT ContextSensitiveHelp(BOOL fEnterMode);<BR>    };</code></pre>
<P><I>GetWindow </I>returns the handle of the window associated with whatever object is attached to this interface. A frame object would return the container's frame window, a document object would return the document window, and a site object would return whatever window is most closely associated with it, such as the document or some other client-area window.</P>
<P><I>ContextSensitiveHelp</I> tells the object involved to enter or exit a mode in which mouse clicks, menu selections, and other user actions display help for that action instead of performing the action itself. The <I>fEnterMode </I>flag is set to TRUE when you should enter the mode, FALSE to exit the mode.</P>
<P>The other in-place interfaces are derived from <I>IOleWindow</I> as shown in the following code. <I>IOleInPlaceFrame </I>also derives from <I>IOleInPlaceUIWindow</I>:</P>
<P><BR></P>
<pre><code>interface IOleInPlaceSite : IOleWindow<BR>    {<BR>    HRESULT CanInPlaceActivate(void);<BR>    HRESULT OnInPlaceActivate(void);<BR>    HRESULT OnUIActivate(void);<BR>    HRESULT GetWindowContext(LPOLEINPLACEFRAME *ppFrame<BR>        , LPOLEINPLACEUIWINDOW *ppDoc, LPRECT prcPosRect<BR>        , LPRECT prcClipRect, LPOLEINPLACEFRAMEINFO pFrameInfo);<BR>    HRESULT Scroll(SIZE scrollExtent);<BR>    HRESULT OnUIDeactivate(BOOL fUndoable);<BR>    HRESULT OnInPlaceDeactivate(void);<BR>    HRESULT DiscardUndoState(void);<BR>    HRESULT DeactivateAndUndo(void);<BR>    HRESULT OnPosRectChange(LPCRECT prcPosRect);<BR>    };<BR><BR>interface IOleInPlaceUIWindow : IOleWindow<BR>    {<BR>    HRESULT GetBorder(LPRECT prcBorder);<BR>    HRESULT RequestBorderSpace(LPCBORDERWIDTHS pBW);<BR>    HRESULT SetBorderSpace(LPCBORDERWIDTHS pBW);<BR>    HRESULT SetActiveObject(LPOLEINPLACEACTIVEOBJECT pActiveObject<BR>        , LPCOLESTR pszObjName);<BR>    };<BR><BR>interface IOleInPlaceFrame : IOleInPlaceUIWindow)<BR>    {<BR>    HRESULT InsertMenus(HMENU hMenuShared<BR>        , LPOLEMENUGROUPWIDTHS lpMenuWidths);<BR>    HRESULT SetMenu(HMENU hMenuShared, HOLEMENU hOLEMenu<BR>        , HWND hWndActiveObj);<BR>    HRESULT RemoveMenus(HMENU hMenuShared);<BR>    HRESULT SetStatusText(LPCOLESTR pszStatusText);<BR>    HRESULT EnableModeless(BOOL fEnable);<BR>    HRESULT TranslateAccelerator(LPMSG pMsg, WORD wID);<BR>    };</code></pre>
<P>In general, the members of <I>IOleInPlaceSite </I>represent the various<I> </I>events and requests that an in-place object sends to or requires of the container. <I>IOleInPlaceSite::GetWindowContext</I> is the function that the object uses to obtain its pointers to the other interfaces on the container's frame and document objects. Through <I>IOleInPlaceUIWindow</I>,<I> </I>the object can negotiate with the container for space in a document window for tools. It also provides the document with an <I>IOleInPlaceActiveObject</I> interface, which we'll see in the next section. Finally, an object can do everything with a document window that it can do with a frame window, so <I>IOleInPlaceFrame </I>is derived from <I>IOleInPlaceUIWindow</I>. The added member functions represent frame-specific user interface elements, such as the menu, the status line, and keyboard accelerators.</P>
<P>These, then, are the interfaces through which an in-place object accesses the services of an in-place container. Let's now look at the interfaces that a container uses to communicate with an in-place object.</P></font></body></HTML>
