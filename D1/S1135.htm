<HTML><HEAD><TITLE>Using and Implementing a Connectable Object: CONNECT</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Using and Implementing a Connectable Object: CONNECT</H2><P>Now that you understand the theory and mechanics of connection points, let's look at them in practice through the Connect sample, which you'll find in CHAP04\CONNECT. This is really something of a contrived example because the client, source, and sink are all contained within the same program. Connection points are most useful when you have clients and objects separated by DLL or process boundaries, but we won't see how to work with custom service components until the next chapter. Nevertheless, this sample illustrates all the principles of connection points and provides a complete reference implementation of all the interfaces (including enumerators) on appropriate objects.</P>
<P>For the Connect sample, we'll need some sort of interface for notifications and events. For the purpose of our sample, let's define the interface <I>IDuckEvents </I>as follows (the compiling form of which is found in the file INTERFAC.H):</P>
<P><BR></P>
<pre><code>interface IDuckEvents : IUnknown<BR>    {<BR>    HRESULT Quack(void);<BR>    HRESULT Flap(void);<BR>    HRESULT Paddle(void);<BR>    };</code></pre>
<P>This interface is also assigned <I>IID</I><I>_</I><I>IDuckEvents</I> (<I>00021145-0000-C000-000000000046</I>) in INC\BOOKGUID.H.</P>
<P>The main application in the Connect sample, considered the "client" portion of the program, is the C++ class <I>CApp</I>, which creates a window and processes menu commands. During initialization, <I>CApp </I>instantiates two sink objects using the C++ class <I>CDuckEvents. </I>This class inherits the member functions of <I>IDuckEvents </I>directly. Initially these sinks are not connected to any objects. The Object menu on the Connect sample window allows you to create and destroy a connectable source object (through the <I>CConnObject </I>and <I>CConnectionPoint </I>classes) as well as to connect and disconnect either sink (#1 or #2) from that source. Nothing much will happen, of course, until we can cause the source to actually fire some of its events, which is the purpose of the Trigger menu on the main window. From this menu, you can cause a <I>Quack</I>, <I>Flap</I>, or <I>Paddle</I> event and see the effect on whatever sinks are connected. If you haven't connected anything, nothing will, in fact, happen. If you have either or both sinks connected, you'll see messages in the window. If you are running on a Win32 system and have a sound board, you'll get to hear what's in the WAV files that come with this sample. Surprise!3</P>
<P><B>Note:</B><B> </B> To compile these samples, you'll need the OLECTL.H and OLECTLID.H header files from the Visual C++ Control Development Kit. However, you don't need any import libraries from the CDK.</P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR><TR><TD VALIGN="TOP"><P>3 I'll be honest. These sounds are only my imitations of the ducks that paddle around the lake near my house. I couldn't get one to come inside and give me voice samples.</P></TD></TR></TBODY></TABLE>
<P><BR></P></font></body></HTML>
