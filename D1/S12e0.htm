<HTML><HEAD><TITLE>Provide Link-Source Formats in Data Transfer</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Provide Link-Source Formats in Data Transfer</H3><P>With the addition of the CFSTR_LINKSOURCE and CFSTR_LINKSRCDESCRIPTOR formats to Cosmo's data transfer objects, we enable containers to link to a Figure object. Cosmo registers these formats in the <I>CCosmoDoc </I>constructor and saves them in <I>m</I><I>_</I><I>cfLinkSource </I>and <I>m</I><I>_</I><I>cfLinkSrcDescriptor.</I> We add these formats to those stored in the transfer object in <I>CCosmoDoc::TransferObjectCreate. </I>This function calls <I>CCosmoDoc::RenderMedium </I>to render the data itself. As mentioned in Chapter 20, CFSTR_LINKSOURCE is a stream containing a serialized moniker; CFSTR_LINKSRCDESCRIPTOR is an OBJECTDESCRIPTOR structure:</P>
<P><BR></P>
<pre><code>BOOL CCosmoDoc::RenderMedium(UINT cf, LPSTGMEDIUM pSTM)<BR>    {<BR>    [Case for CF_EMBEDSOURCE]<BR><BR>    /*<BR>     * CFSTR_OBJECTDESCRIPTOR and CFSTR_LINKSRCDESCRIPTOR are the<BR>     * same formats, but copy link source only if we have a moniker.<BR>     */<BR>    if (cf==m_cfLinkSrcDescriptor &amp;&amp; NULL==m_pMoniker)<BR>        return FALSE;<BR><BR>    if (cf==m_cfObjectDescriptor œœ cf==m_cfLinkSrcDescriptor)<BR>        {<BR>        SIZEL   szl, szlT;<BR>        POINTL  ptl;<BR>        RECT    rc;<BR>        LPTSTR  psz=NULL;<BR><BR>        m_pPL-&gt;SizeGet(&amp;rc);<BR>        SETSIZEL(szlT, rc.right, rc.bottom);<BR>        XformSizeInPixelsToHimetric(NULL, &amp;szlT, &amp;szl);<BR><BR>        SETPOINTL(ptl, 0, 0);<BR><BR>        //Include moniker display name now if we have one.<BR>        if (m_pMoniker)<BR>            {<BR>            LPBC    pbc;<BR><BR>            CreateBindCtx(0, &amp;pbc);<BR>            m_pMoniker-&gt;GetDisplayName(pbc, NULL, &amp;psz);<BR>            pbc-&gt;Release();<BR>            }<BR>        CoTaskMemFree((void *)psz);<BR>        pSTM-&gt;hGlobal=INOLE_AllocObjectDescriptor<BR>            (CLSID_CosmoFigure, DVASPECT_CONTENT, szl, ptl<BR>            , OLEMISC_RECOMPOSEONRESIZE, PSZ(IDS_OBJECTDESCRIPTION)<BR>            , psz);<BR><BR>        pSTM-&gt;tymed=TYMED_HGLOBAL;<BR>        return (NULL!=pSTM-&gt;hGlobal);<BR>        }<BR><BR>    if (cf==m_cfLinkSource)<BR>        {<BR>        if (NULL!=m_pMoniker)<BR>            {<BR>            FORMATETC   fe;<BR>            HRESULT     hr;<BR><BR>            pSTM-&gt;tymed=TYMED_NULL;<BR>            SETDefFormatEtc(fe, cf, TYMED_ISTREAM);<BR>            hr=INOLE_GetLinkSourceData(m_pMoniker<BR>                , (LPCLSID)&amp;CLSID_CosmoFigure, &amp;fe, pSTM);<BR><BR>            return SUCCEEDED(hr);<BR>            }<BR>        }<BR><BR>    return FALSE;<BR>    }</code></pre>
<P>We don't, of course, copy either link format if we have no moniker. If we have a moniker, we include the moniker's display name in CFSTR_LINKSRCDESCRIPTOR, using our helper function <I>INOLE</I><I>_</I><I>AllocObjectDescriptor </I>to create the data. To create CFSTR_LINKSOURCE, we use the helper function <I>INOLE</I><I>_</I><I>GetLinkSourceData</I>,<I> </I>which creates a stream in global memory, saves the moniker to the stream with <I>OleSaveToStream</I>, and saves the object's CLSID with a call to <I>WriteClassStm</I>.</P>
<P>As for the placement of the linking formats on the clipboard, they should always be after other formats, even after simple formats such as CF_TEXT. The reason is that linking almost never happens by default when a container pastes. It almost always happens when the user explicitly asks the container to perform a Paste Link operation. Keep the link data at the lowest spot on the totem pole.</P></font></body></HTML>
