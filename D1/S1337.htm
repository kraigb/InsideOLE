<HTML><HEAD><TITLE>IOleClientSite::RequestNewObjectLayout and MiscStatus Flags</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3><I>IOleClientSite::RequestNewObjectLayout</I> and MiscStatus Flags</H3><P>Besides building on OLE Documents, OLE Controls adds more behavior to existing compound document functionality. First, a control container should implement <I>IOleClientSite::RequestNewObjectLayout</I>. In OLE Controls, a control that is only loaded or running uses this member function to tell the container that it wants to change its size, as opposed to using <I>IOleInPlaceSite::OnPosRectChange</I>, which works only for in-place–active objects. Inside <I>RequestNewObjectLayout</I>, the control container should get the new size by calling the control's <I>IOleObject::GetExtent</I> and pass it back to the control when convenient through <I>IOleInP</I><I>laceObject::SetObjectRects</I>.</P>
<P>Second, OLE Controls defines the verb OLEIVERB_PROPERTIES, which tells a control to display its own property pages through <I>IOleObject::DoVerb.</I> Typically, a control will show a Properties item on its verb menu as well. In doing so, an OLE control that can be inserted into a standard OLE Documents container (one that does not understand controls at all) gives the user access to those property pages without any modification to the container itself. Such controls usually display their property pages when handling OLEIVERB_PRIMARY as well. In this way, activating a control from a noncontrol container still gives the user plenty of useful functionality, even if the container doesn't handle the control's events.</P>
<P>The other addition to OLE Documents is a set of control-specific MiscStatus flags that contain status information. Objects store this information in the registry; the information is returned by <I>IOleObject::GetMiscStatus</I>. Besides usually specifying OLEMISC_ACTIVATEWHENVISIBLE, a control can include any of the flags described in Table 24-2.</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="168pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>MiscStatus Flag</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>OLEMISC_INVISIBLEATRUNTIME</P></TD><TD VALIGN="TOP"><P>Indicates that the control has no run-time user interface but that it should be visible at design time. For example, a timer control that fires a specific event periodically would not show itself at run time, but it needs a design-time user interface so that a form designer can set the event period and other such properties.</P></TD></TR><TR><TD VALIGN="TOP"><P>OLEMISC_ALWAYSRUN</P></TD><TD VALIGN="TOP"><P>Tells the container that this control always wants to be running. This means that the container should call <I>OleRun </I>when loading or creating the object.</P></TD></TR><TR><TD VALIGN="TOP"><P>OLEMISC_ACTSLIKEBUTTON</P></TD><TD VALIGN="TOP"><P>Indicates that the control is buttonlike in that it can understand default and cancel properties, as described in "Keyboard Handling, Mnemonics, and <I>ISimpleFrameSite</I>" later in this chapter.</P></TD></TR><TR><TD VALIGN="TOP"><P>OLEMISC_ACTSLIKELABEL</P></TD><TD VALIGN="TOP"><P>Marks the control as a label for whatever control comes after it in the form's ordering. Pressing a mnemonic key for a label control activates the control after it.</P></TD></TR><TR><TD VALIGN="TOP"><P>OLEMISC_NOUIACTIVATE</P></TD><TD VALIGN="TOP"><P>Indicates that the control has no UI-active state, meaning that it requires no in-place tools, no shared menu, and no accelerators. It also means that the control never needs the focus.</P></TD></TR><TR><TD VALIGN="TOP"><P>OLEMISC_ALIGNABLE</P></TD><TD VALIGN="TOP"><P>Indicates that the control understands alignment properties such as left, center, and right.</P></TD></TR><TR><TD VALIGN="TOP"><P>OLEMISC_SIMPLEFRAME</P></TD><TD VALIGN="TOP"><P>Indicates that the control is a simple grouping of other controls and does little more than pass Windows messages to the control container managing the form. Controls of this sort require the implementation of <I>ISimpleFrameSite</I> on the container's site.</P></TD></TR><TR><TD VALIGN="TOP"><P>OLEMISC_SETCLIENTSITEFIRST</P></TD><TD VALIGN="TOP"><P>Indicates that the control wants to use <I>IOleObject::SetClientSite </I>as its initialization function, even before a call such as <I>IPersistStreamInit::InitNew </I>or <I>IPersistStorage::InitNew</I>. This allows the control to access a container's ambient properties before loading information from persistent storage.*</P></TD></TR><TR><TD VALIGN="TOP"><P>OLEMISC_IMEMODE</P></TD><TD VALIGN="TOP"><P>Marks the control as an Input Method Editor (IME). You can use an IME to enter information in large Asian character sets with a regular keyboard. A Japanese IME, for example, allows you to type a word such as "sushi," and when you hit the spacebar, the control converts that word to appropriate kanji or proposes possible choices. Containers sensitive to Asian languages use this bit to communicate IME-specific properties such as font and pop-up–window placement.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 24-2</B></P>
<P><B>Control-specific MiscStatus bits.</B></P>
<P>*    At the time of writing, this bit was difficult to support from a container's perspective because neither <I>OleCreate </I>(and all variations)<I>, OleLoad, </I>nor <I>OleLoadFromStream</I> currently understand this bit, and <I>OleLoadFr</I><I>omStream</I> doesn't understand <I>IPersistStreamInit</I>. Therefore, a container has to emulate the exact behavior of these functions to correctly handle this bit. However, the internal working of such functions is not documented, so this is difficult to do correctly. I hope Microsoft will soon update these functions in order to handle OLE controls more robustly or document their exact internal steps.</P>
<P>We'll see how some of these bits are used in the sections ahead.</P></font></body></HTML>
