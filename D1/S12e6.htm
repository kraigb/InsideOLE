<HTML><HEAD><TITLE>Source the Composite Moniker</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Source the Composite Moniker</H3><P>In our discussion of Cosmo earlier in this chapter, we saw how to present a moniker in the CFSTR_LINKSOURCE format and how to provide the CFSTR_LINKSRCDESCRIPTOR format in clipboard and drag-and-drop operations. Patron does more or less those same things in its function <I>CTenant::CopyLinkedObject</I>, which is called from <I>CPage::TransferObjectCreate</I> in any clipboard or drag-and-drop operation:</P>
<P><BR></P>
<pre><code>void CTenant::CopyLinkedObject(LPDATAOBJECT pIDataObject<BR>    , LPFORMATETC pFE, PPOINTL pptl)<BR>    {<BR>    HRESULT             hr;<BR>    LPMONIKER           pmk;<BR>    DWORD               dwStat;<BR><BR>    //If we don't have full moniker, no linking is allowed.<BR>    if (NULL==m_pmk)<BR>        return;<BR><BR>    //If object doesn't support this, return.<BR>    dwStat=0;<BR>    m_pIOleObject-&gt;GetMiscStatus(m_fe.dwAspect, &amp;dwStat);<BR><BR>    if (OLEMISC_CANTLINKINSIDE &amp; dwStat)<BR>        return;<BR><BR>    [Other code omitted]<BR><BR>    m_pIOleObject-&gt;GetUserClassID(&amp;clsID);<BR>    hr=m_pIOleObject-&gt;GetMoniker(0, OLEWHICHMK_OBJFULL, &amp;pmk);<BR><BR>    [Create CFSTR_LINKSOURCE and CFSTR_LINKSRCDESCRIPTOR with pmk.]<BR>    §<BR>    }</code></pre>
<P>For the most part, this is exactly what any link source does to create the necessary formats, which we usually make available only when we have a known filename. (This is the reason for the validation of <I>m</I><I>_</I><I>pmk </I>in the code above.) For a container that supports linking to embeddings, there is another condition: the object must support the feature itself. This means that the moniker implements <I>IOleObject::GetMoniker</I> for OLEWHICHMK_OBJFULL, which usually does little more than call <I>IOleClientSite::GetMoniker</I>. Anyway, if a server does not implement <I>GetMoniker</I>, it will mark itself with OLEMISC_CANTLINKINSIDE as returned from <I>IOleObject::GetMiscStatus</I>. The absence of this bit means that the object also understands what to do with monikers it receives through <I>IOleObject::SetMoniker</I>—for example, register that moniker as running, as we saw in Cosmo earlier.</P></font></body></HTML>
