<HTML><HEAD><TITLE>Determine the Pick Event</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Determine the Pick Event</H3><P>The pick event is the mouse action that starts a drag-and-drop operation with a call to <I>DoDragDrop</I>. You need to know what starts the operation in order to know what ends it, and you must know this to implement <I>IDropSource::QueryContinueDrag.</I></P>
<P>Most often the pick event will be a WM_LBUTTONDOWN message about some meaningful point. As mentioned earlier, this can be anywhere in Cosmo's document window; only 8 pixels of it are visible around the outside of the Polyline figure. This is convenient because it eliminates any hit-testing. Therefore, Cosmo's pick event is any WM_LBUTTONDOWN message in the document window. We'll see how Cosmo detects this message and calls <I>DoDragDrop </I>later. But we have to implement and instantiate the object with <I>IDropSource </I>in order to call <I>DoDragDrop</I>.</P>
<P><B>N</B><B>ote</B><B>:</B>  A source can use any mouse button for a pick event and can even combine the mouse action with the Alt key because you can detect changes in the state of any button and the Alt key within QueryContinueDrag in order to detect a drop event.</P></font></body></HTML>
