<HTML><HEAD><TITLE>The Paste Special Dialog Box</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>The Paste Special Dialog Box</H3><P>To invoke the Paste Special dialog box, you first fill an OLEUIPASTESPECIAL structure (shown in the code on the following page) and call the function <I>OleUIPasteSpecial</I>. On return, the dialog box will indicate the index of the format the end user chose from the list. Patron uses this format to determine whether to create a data cache for <I>CLSID</I><I>_</I><I>Picture</I><I>_</I><I>Dib</I> or <I>CLSID</I><I>_</I><I>Picture</I><I>_</I><I>Metafile</I>. The real trick, however, is filling the OLEUIPASTESPECIAL structure.</P>
<P><BR></P>
<pre><code>typedef struct tagOLEUIPASTESPECIAL<BR>    {<BR>    [Standard header common to all OLE UI dialogs]<BR><BR>    //Specifics for OLEUIPASTESPECIAL<BR>    //IN fields<BR>    LPDATAOBJECT    lpSrcDataObj;       //Source IDataObject* (on <BR>                                        //clipboard) for data to paste<BR><BR>    LPOLEUIPASTEENTRY arrPasteEntries;  //Array of OLEUIPASTEENTRYs<BR>                                        //of acceptable formats<BR>    int             cPasteEntries;      //Number of OLEUIPASTEENTRYs<BR><BR>    [These are not important for this chapter.]<BR>    UINT        FAR *arrLinkTypes;<BR>    int             cLinkTypes;<BR><BR>    //OUT fields<BR>    int             nSelectedIndex;    //User-selected arrPasteEntries<BR>    BOOL            fLink;             //Paste or Paste Link selected?<BR>    HGLOBAL         hMetaPict;         //Icon and icon title<BR>    } OLEUIPASTESPECIAL, *POLEUIPASTESPECIAL, FAR *LPOLEUIPASTESPECIAL;</code></pre>
<P>The Paste Special dialog box needs to present the end user with a list box containing text descriptions of all the available formats. This lets the application control which formats are allowed at all. First the dialog box needs to know the data object that exists on the clipboard. You store that object in the <I>lpSrcDataObj</I> field of OLEUIPASTESPECIAL, as shown in the code in <I>CPatronDoc::PasteSpecial </I>(DOCUMENT.CPP):</P>
<P><BR></P>
<pre><code>OLEUIPASTESPECIAL   ps;<BR><BR>_memset(&amp;ps, 0, sizeof(ps));<BR><BR>if (FAILED(OleGetClipboard(&amp;ps.lpSrcDataObj)))<BR>    return FALSE;</code></pre>
<P>You must also fill the <I>cbS</I><I>truct</I> field with the size of the structure (used to verify versions) and identify the window that owns it:</P>
<P><BR></P>
<pre><code>ps.cbStruct=sizeof(ps);<BR>ps.hWndOwner=hWndFrame;</code></pre>
<P>In the <I>dwFlags</I> field, you can specify any of these flags: PSF_SHOWHELP, PSF_SELECTPASTE, PSF_SELECTPASTELINK, and PSF_CHECKDISPLAYASICON. We'll use the latter two in the chapters about OLE Documents. To use the dialog box for simple pasting, specify the PSF_SELECTPASTE flag (including PSF_SHOWHELP if you want):</P>
<P><BR></P>
<pre><code>ps.dwFlags=PSF_SELECTPASTE;</code></pre>
<P>Now you need only to describe the allowable formats and provide text descriptions for those formats by filling the <I>cPasteEntries</I> and <I>arrPasteEntries</I> fields:</P>
<P><BR></P>
<pre><code>OLEUIPASTEENTRY      rgPaste[4];<BR><BR>ps.arrPasteEntries=rgPaste;<BR>ps.cPasteEntries=4;</code></pre>
<P>The <I>arrPasteEntries </I>field is a pointer to an array of OLEUIPASTEENTRY structures. Each structure describes the format and holds the description string:</P>
<P><BR></P>
<pre><code>typedef struct tagOLEUIPASTEENTRY<BR>    {<BR>    FORMATETC  fmtetc;<BR>    LPCSTR     lpstrFormatName;<BR>    LPCSTR     lpstrResultText;<BR>    DWORD      dwFlags;<BR>    DWORD      dwScratchSpace;<BR>    } OLEUIPASTEENTRY, *POLEUIPASTEENTRY, FAR *LPOLEUIPASTEENTRY;</code></pre>
<P>The following table lists the meanings of these fields:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="104pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Field</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>fmtetc</P></TD><TD VALIGN="TOP"><P>The FORMATETC for this entry.</P></TD></TR><TR><TD VALIGN="TOP"><P>lpstrFormatName</P></TD><TD VALIGN="TOP"><P>A text description of the FORMATETC. For example, a string for a CF_DIB-based format (regardless of the aspect, storage medium, or other FORMATETC values) is "Device-Independent Bitmap".</P></TD></TR><TR><TD VALIGN="TOP"><P>lpszResultText</P></TD><TD VALIGN="TOP"><P>A string that describes the data resulting from a Paste Special operation. Typically this is "a" or "an" prepended to the format description, as in "a Device-Independent Bitmap".</P></TD></TR><TR><TD VALIGN="TOP"><P>dwFlags</P></TD><TD VALIGN="TOP"><P>Flags indicating what operations are allowed on this particular format. The only one of relevance for now is OLEUIPASTE_PASTEONLY, indicating that Paste is allowed. Other options enable the Paste Link and Display As Icon options.</P></TD></TR><TR><TD VALIGN="TOP"><P>dwScratchSpace</P></TD><TD VALIGN="TOP"><P>Reserved for internal dialog use.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>Patron can paste any of four formats. The preferred format is a structure named PATRONOBJECT (see PAGES.H). This describes a tenant in a way that a Copy or Paste operation between Patron documents places the object in the same location as it had in the source document if possible. PATRONOBJECT is followed in preference by CF_METAFILEPICT, CF_DIB, and CF_BITMAP. Therefore, Patron fills an array of four OLEUIPASTEENTRY structures (<I>rgPaste</I>), as is shown in the following for its private format:</P>
<P><BR></P>
<pre><code>SETDefFormatEtc(rgPaste[0].fmtetc, m_cf, TYMED_HGLOBAL);<BR>rgPaste[0].lpstrFormatName="Patron Object";<BR>rgPaste[0].lpstrResultText="a Patron Object";<BR>rgPaste[0].dwFlags=OLEUIPASTE_PASTEONLY;<BR><BR>[Similar code for other formats]</code></pre>
<P>After Patron has filled these structures, it can call <I>OleUIPasteSpecial</I>:</P>
<P><BR></P>
<pre><code>uTemp=OleUIPasteSpecial(&amp;ps);<BR><BR>if (OLEUI_OK==uTemp)<BR>    {<BR>    fRet=PasteFromData(ps.lpSrcDataObj<BR>        , &amp;rgPaste[ps.nSelectedIndex].fmtetc<BR>        , TENANTTYPE_STATIC, NULL, 0L);<BR>    }<BR><BR>ps.lpSrcDataObj-&gt;Release();<BR>return fRet;</code></pre>
<P>If <I>OleUIPasteSpecial </I>returns OLEUI_OK, the end user has pressed the OK button, and we execute a Paste with the selected format, in which the <I>nSelectedIndex</I> field of OLEUIPASTESPECIAL matches the index of OLEUIPASTEENTRY. Patron calls its "paste from data" function before releasing the data object it obtained from <I>OleGetClipboard</I>.</P></font></body></HTML>
