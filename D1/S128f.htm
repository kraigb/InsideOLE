<HTML><HEAD><TITLE>Mommy, Daddy, Where Do New Content Objects Come From?</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Mommy, Daddy, Where Do New Content Objects Come From?</H3><P>Um, well, ah, you see, there's, ah, a stork. Yeah. The Object Stork.</P>
<P>Sure, an explanation like this might work for a two-year-old, but I don't think it works for programmers—there must be a better explanation. How does a container create a new content object or obtain a copy of one? It is not simply a matter of calling <I>CoCreateInstance </I>with a CLSID because with persistent storage, a cache, and related matters, there are additional initialization concerns. For this reason, OLE provides a number of API functions for creating or loading content objects.</P>
<P>The most fundamental of these functions is <I>OleCreate</I>, which is the equivalent of <I>CoCreateInstance </I>for embedded objects. This function will create the object (using <I>CoCreateInstance </I>internally), initialize it through <I>IPersistStorage::InitNew</I>, send the object the container's <I>IOleClientSite </I>pointer if it's wanted, and initialize the cache. <I>OleCreate </I>takes an object from a nonexistent state into a loaded state, from which the container can run and activate it as necessary. Closely related to this is <I>OleCreateFromFile</I>,<I> </I>which uses the information in a file to initialize the new embedded object (which itself must implement <I>IPersistFile </I>as well to support this ability).2 If a server for the file type is not available, <I>OleCreateFromFile </I>creates what is called a <I>Package</I> object, which maintains a copy of the file as its native data. Activating a package object causes it to write that file to a temporary location and try to run it as if the user double-clicked that file in the system shell.</P>
<P>A container can also paste an embedded object from the clipboard or by using drag and drop. In both cases, the container will have an <I>IDataObject </I>pointer that encapsulates the embedded object's data formats. OLE defines several formats for this purpose. CFSTR_EMBEDDEDOBJECT and CFSTR_EMBEDSOURCE, whose formats are registered using the strings "Embedded Object" and "Embed Source", are both copies of the object's persistent storage inside a separate storage element (that is, TYMED_STORAGE). </P>
<P>The presence of either format in a data object means that an embedded object is available. The function <I>OleQueryCreateFromData </I>checks for this availability, and <I>OleCreateFromData </I>creates an embedded object from that data. Afterward, the object is no different from what is created through <I>OleCreate</I>. Another data format, CFSTR_OBJECTDESCRIPTOR (the string "Object Descriptor") usually travels along with the embedded object to provide more information about the data—for example, its extents and its pick point if the data is used in drag and drop.</P>
<P>Linked objects have several functions analogous to the ones for embedded objects: <I>OleCreateLink</I>,<I> OleCreateLinkToFile</I>,<I> OleCreateLinkFromData</I>,<I> </I>and <I>OleQueryCreateLinkFromData</I>.<I> </I>The latter two deal with data of the format CFSTR_LINKSOURCE ("Link Source") and CFSTR_LINKSRCDESCRIPTOR ("Link Source Descriptor").</P>
<P>When any linked or embedded object exists in its passive state, the <I>OleLoad </I>function brings it to the loaded state and returns an interface pointer, performing all of the necessary initialization steps done in <I>OleCreate </I>and others. <I>OleLoad </I>will always work, even if no object-specific code exists. In that case, OLE creates an instance of the default handler. Because the handler works with the data cache, the container can always view and print the object using the cached presentations. Activating the object, however, will not work.</P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR></TBODY></TABLE>
<P><BR></P><H4><A NAME="sec0"></A>Containers/Servers and Embedding in Yourself</H4><P>Many high-end business applications such as word processors and spreadsheets are the sorts of applications that can act both as compound document containers and as servers for material such as text, tables, charts, and so forth. This brings up an interesting possibility: the application can register itself as Insertable so that its own name will appear in its own Insert Object dialog box. This creates the possibility of inserting an object into its own application, called a <I>container/server</I>. Each half of the application, however, should still be able to work with the other half as if the object or the container came from a separate application. It doesn't make any sense to run another instance of the application under any circumstances, so using the default handler in such a situation is risky and wasteful. For this reason, OLE provides a hobbled handler called the <I>embedding helper,</I> created through the API function <I>OleCreateEmbeddingHelper</I>, which provides an efficient mediator to facilitate a container/server's own communication with itself through the standard protocol of OLE Documents. For further information, see the <I>OLE Programmer</I><I>'</I><I>s Reference.</I></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR></TBODY></TABLE>
<P><BR></P><P><I></I></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR><TR><TD VALIGN="TOP"><P>2 The version of Cosmo in Chapter 18 does not implement this support and will not work with <I>OleCreateFromFile</I>. The version of Cosmo in Chapter 21 does include the necessary support.</P></TD></TR></TBODY></TABLE>
<P><BR></P></font></body></HTML>
