<HTML><HEAD><TITLE>Chapter 13 OLE Drag and Drop</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Chapter 13 OLE Drag and Drop</H1><P>When I first began looking for OLE enlightenment, I watched a number of videotapes from early OLE seminars and demonstrations (early as in 1991). At one point, bored out of my skull, I decided to fast-forward through some of them. I noticed during that fit of impatience how often the presenter would select data in some application, pull down the Edit menu to choose Cut or Copy, switch to another application, and then pull down the Edit menu and choose Paste. This is to be expected: the clipboard is a great way to transfer data between a source and a consumer. It is a protocol that works.</P>
<P>I realized at that time, as did other designers, that a drag-and-drop technique would streamline many of these Cut/Copy and Paste operations. In drag and drop, the end user selects some data in the source, <I>picks</I> it up by clicking and holding down a mouse button in a specific region of that data, <I>drags</I> that data from the source's window to the consumer's window, and <I>drops</I> it into the consumer by releasing the mouse button. Keys such as Ctrl and Shift determine whether the operation moves, copies, or links the data, as you can accomplish through the clipboard. Move, copy, link, and even no-drop are each called an <I>effect</I> of the drag-and-drop operation.</P>
<P>This <I>pick-drag-drop </I>sequence, with its keyboard modifiers, has the same result as using the clipboard. The big difference is that drag and drop is direct and immediate—the entire data transfer operation happens in one swift stroke of the mouse, making drag and drop more efficient and easier to understand. The clipboard is most useful for storing data for an undetermined amount of time and pasting it repeatedly or not at all. With drag and drop, the source and the consumer perform a single transfer without touching the clipboard at all—that is, the clipboard contents remain intact.</P>
<P>OLE Drag and Drop, like the OLE Clipboard, is a transfer protocol that involves moving an <I>IDataObject </I>pointer from a source to a consumer. As part of the protocol, the source implements a simple object (no CLSID, no persistence, and so on) called the <I>drop source,</I> which implements the interface <I>IDropSource</I>. The consumer, which in the drag-and-drop context is called a <I>target,</I> implements a <I>drop target</I> object with the <I>IDropTarget </I>interface. Through these two objects, the source and the target communicate various events that occur from the pick to the drop.</P>
<P>This chapter first explains how OLE Drag and Drop works through source and target objects to communicate with a data object. As a demonstration, we'll add simple drag-and-drop support to Cosmo to show how easy it is to support this feature. In fact, OLE Drag and Drop can be so simple for certain applications that you can implement and test the feature in a day—and gain quite a lot of power and flexibility for your customers. A more complex implementation that involves additional user interface elements, mouse debouncing, and scrolling during a drag-and-drop operation will take longer, and we'll see why as we add drag and drop to Patron. These features are useful not only in exchanging data with other applications (such as a metafile from Cosmo) but also for simply moving tenants around on the same page—all with the same code. This is the power of OLE Drag and Drop: with one implementation, you can move data within an application, between documents or windows in that application, and between different applications.</P>
<P>Let me again stress that by implementing OLE Clipboard support and the "[query] paste from data" functions, as we saw in Chapter 11, you build a code base that makes for a fast implementation of drag and drop. The time you take to work with data objects and the clipboard will reduce a drag- and-drop implementation to perhaps only a few hours or a few days, depending on the level of complexity you want. (C'mon, Kraig, you think we <I>want</I> complexity?) If you do this, customers watching your video demonstrations on fast-forward won't know what hit them.</P></font></body></HTML>
