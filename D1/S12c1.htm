<HTML><HEAD><TITLE>Expose Default Handler Interfaces in QueryInterface</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Expose Default Handler Interfaces in <I>QueryInterface</I></H3><P>As with any aggregation relationship, we need to expose select interfaces from the inner object through our own <I>QueryInterface</I>, along with those interfaces we implement ourselves. To do this, <I>CFigure::QueryInterface </I>delegates to the default handler's <I>IUnknown </I>for the caching interfaces and <I>IRunnableObject</I>, returning other object pointers for the remaining interfaces:</P>
<P><BR></P>
<pre><code>STDMETHODIMP CFigure::QueryInterface(REFIID riid, PPVOID ppv)<BR>    {<BR>    *ppv=NULL;<BR><BR>    if (IID_IUnknown==riid)<BR>        *ppv=this;<BR><BR>    if (IID_IPersist==riid œœ IID_IPersistStorage==riid)<BR>        *ppv=m_pImpIPersistStorage;<BR><BR>    if (IID_IOleObject==riid)<BR>        *ppv=m_pImpIOleObject;<BR><BR>    if (IID_IViewObject==riid œœ IID_IViewObject2==riid)<BR>        *ppv=m_pImpIViewObject2;<BR><BR>    if (NULL!=*ppv)<BR>        {<BR>        ((LPUNKNOWN)*ppv)-&gt;AddRef();<BR>        return NOERROR;<BR>        }<BR><BR>    if (IID_IDataObject==riid œœ IID_IOleCache==riid<BR>        œœ IID_IOleCache2==riid œœ IID_IOleCacheControl==riid<BR>        œœ IRunnableObject==riid)<BR>        return m_pDefIUnknown-&gt;QueryInterface(riid, ppv);<BR><BR>    return ResultFromScode(E_NOINTERFACE);<BR>    }</code></pre>
<P>As we discussed earlier about aggregation, you do not want to blindly delegate requests for unrecognized interfaces to the inner object's <I>QueryInterface </I>unless you specifically have a reason to do so.</P>
<P>Whatever the case may be, you can see here that the figure object in HCosmo exposes all of those interfaces that a container will expect: some from the default handler, others from the figure object itself. In addition, <I>CFigure::Release </I>will destroy the object when the reference count is 0, decrementing the global object count so <I>DllCanUnloadNow </I>works properly.</P></font></body></HTML>
