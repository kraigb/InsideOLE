<HTML><HEAD><TITLE>The IOleObject Interface</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>The <I>IOleObject </I>Interface</H3><P>As a container site implements <I>IOleClientSite </I>and <I>IAdviseSink</I>, these pointers must somehow find their way into the content object itself. We already know that the object will obtain an <I>IAdviseSink </I>through both <I>IDataObject::DAdvise </I>and <I>IViewObject2::SetAdvise</I>, but these connections only indicate that the container is interested in <I>OnDataChange </I>and <I>OnViewChange </I>notifications. Various members of the <I>IOleObject </I>interface, the presence of which marks an object as a content object, allow the container to pass its site pointers to the object:</P>
<P><BR></P>
<pre><code>interface IOleObject : IUnknown<BR>    {<BR>    HRESULT SetClientSite(IOleClientSite *pClientSite);<BR>    HRESULT GetClientSite(IOleClientSite **ppClientSite);<BR><BR>    HRESULT SetHostNames(LPCOLESTR pszContainerApp<BR>        , LPCOLESTR pszContainerObj);<BR><BR>    HRESULT Close(DWORD dwSaveOption);<BR><BR>    HRESULT SetMoniker(DWORD dwWhichMoniker, IMoniker *pmk);<BR>    HRESULT GetMoniker(DWORD dwAssign, DWORD dwWhichMoniker<BR>        , IMoniker **ppmk);<BR><BR>    HRESULT InitFromData(IDataObject *pDataObject, BOOL fCreation<BR>        , DWORD dwReserved);<BR><BR>    HRESULT GetClipboardData(DWORD dwReserved<BR>        , IDataObject **ppDataObject);<BR><BR>    HRESULT DoVerb(LONG iVerb, LPMSG lpmsg<BR>        , IOleClientSite *pActiveSite, LONG lindex<BR>        , HWND hwndParent, LPCRECT prc);<BR><BR>    HRESULT EnumVerbs(IEnumOLEVERB **ppEnumOleVerb);<BR>    HRESULT Update(void);<BR>    HRESULT IsUpToDate(void);<BR>    HRESULT GetUserClassID(CLSID *pClsid);<BR>    HRESULT GetUserType(DWORD dwFormOfType, LPOLESTR *pszUserType);<BR><BR>    HRESULT SetExtent(DWORD dwDrawAspect, SIZEL *psizel);<BR>    HRESULT GetExtent(DWORD dwDrawAspect, SIZEL *psizel);<BR><BR>    HRESULT Advise(IAdviseSink *pAdvSink, DWORD *pdwConnection);<BR>    HRESULT Unadvise(DWORD dwConnection);<BR>    HRESULT EnumAdvise(IEnumSTATDATA **ppenumAdvise);<BR><BR>    HRESULT GetMiscStatus(DWORD dwAspect, DWORD *pdwStatus);<BR>    HRESULT SetColorScheme(LOGPALETTE *pLogpal);<BR>    };</code></pre>
<P>This interface rivals <I>IMoniker </I>for the distinction of having the most member functions around! It obviously has a lot of functionality, all of which has its purpose in the architecture of OLE Documents, as described in Table 17-1.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="137pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Member</B></P></TD><TD VALIGN="TOP"><P><B>Purpose</B></P></TD></TR><TR><TD VALIGN="TOP"><P>SetClientSite, GetClientSite</P></TD><TD VALIGN="TOP"><P>Provides the object with the container's <I>IOleClientSite</I> pointer or retrieves that pointer from the object.</P></TD></TR><TR><TD VALIGN="TOP"><P>SetHostNames</P></TD><TD VALIGN="TOP"><P>Provides the object with display names of its container and the compound document, which it displays in its caption bars and as menu items. (A caption bar is visible in Figure 17-5 on page 826.)</P></TD></TR><TR><TD VALIGN="TOP"><P>Close</P></TD><TD VALIGN="TOP"><P>Instructs the object to close, optionally saving changes or discarding them.</P></TD></TR><TR><TD VALIGN="TOP"><P>SetMoniker, GetMoniker</P></TD><TD VALIGN="TOP"><P>Provides the object with the moniker that names its location in the compound document or retrieves that moniker from the object. Used only for linking.</P></TD></TR><TR><TD VALIGN="TOP"><P>InitFromData</P></TD><TD VALIGN="TOP"><P>Instructs the object to perform a Paste operation from a given <I>IDataObject</I>. This allows the container to paste into an embedded object if it wants to.</P></TD></TR><TR><TD VALIGN="TOP"><P>GetClipboardData</P></TD><TD VALIGN="TOP"><P>Retrieves an <I>IDataObject</I> pointer from the object that encapsulates what the object would place on the clipboard if the user copied it directly.</P></TD></TR><TR><TD VALIGN="TOP"><P>DoVerb</P></TD><TD VALIGN="TOP"><P>Instructs the object to execute a verb.</P></TD></TR><TR><TD VALIGN="TOP"><P>EnumVerbs</P></TD><TD VALIGN="TOP"><P>Returns an enumerator for the OLEIVERB type. The container uses this to build a pop-up menu of available verbs.</P></TD></TR><TR><TD VALIGN="TOP"><P>Update</P></TD><TD VALIGN="TOP"><P>Ensures that the object is up-to-date. Embedded objects by themselves are always up-to-date unless they themselves contain other embeddings, in which case, this call is recursive to those other embeddings. Linked objects might be out-of-date if the source has changed since the last update.</P></TD></TR><TR><TD VALIGN="TOP"><P>IsUpToDate</P></TD><TD VALIGN="TOP"><P>Asks whether the object is up-to-date.</P></TD></TR><TR><TD VALIGN="TOP"><P>GetUserClassID</P></TD><TD VALIGN="TOP"><P>Returns the CLSID of the object that the user believes he or she is working with. This might change when emulation is being used.</P></TD></TR><TR><TD VALIGN="TOP"><P>GetUserType</P></TD><TD VALIGN="TOP"><P>Returns a user-readable string identifying the object type.</P></TD></TR><TR><TD VALIGN="TOP"><P>SetExtent, GetExtent</P></TD><TD VALIGN="TOP"><P>Instructs the object to change its size (reflected in its editing user interface) or retrieves the size of the object.</P></TD></TR><TR><TD VALIGN="TOP"><P>Advise, Unadvise,</P></TD><TD VALIGN="TOP"><P>Manages a connection between the object and</P></TD></TR><TR><TD VALIGN="TOP"><P>EnumAdvise</P></TD><TD VALIGN="TOP"><P>the site's <I>IAdviseSink</I>, specifically for the <I>OnClose</I>, <I>OnSave</I>, and <I>OnRename</I> members.</P></TD></TR><TR><TD VALIGN="TOP"><P>GetMiscStatus</P></TD><TD VALIGN="TOP"><P>Asks the object for its miscellaneous status flags from the enumeration OLEMISC, which describe small behavioral aspects.</P></TD></TR><TR><TD VALIGN="TOP"><P>SetColorScheme</P></TD><TD VALIGN="TOP"><P>Provides the object with the container's preferred color set. The object should use this set if it can. The color set is not a rendering palette but rather a set of preferred foreground, background, and fill colors.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 17-1</B></P>
<P><B>The <I>IOleObject</I> interface.</B></P>
<P>Much of what we'll be doing in the rest of this chapter and in those that follow will be exploring how this interface is used and where some of the information comes from. One source of such information is the registry, which holds a great deal of content object data.</P></font></body></HTML>
