<HTML><HEAD><TITLE>Summary</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Summary</H2><P>While the <I>IUnknown::QueryInterface </I>function handles access to an object's incoming interfaces, some objects need to send notifications, events, or requests back to their clients. An object of that kind is a connectable object. The interfaces that a connectable object calls are outgoing interfaces. The connectable object defines and calls interfaces itself, but its client implements these interfaces through sink objects. Through outgoing interfaces, an object carries out two-way communication with its client. One object can multicast to multiple sinks, and one sink can easily accept calls from multiple objects.</P>
<P>To express its outgoing interfaces, an object implements the interface <I>IConnectionPointContainer</I>, through which the client can access the object's connection points, which are small contained objects within the connectable object itself. Through <I>IConnectionPointContainer</I>, the client can enumerate the available connection points or ask for a specific one given the outgoing interface's IID. Each connection point then manages connections to one or more sinks through the interface <I>IConnectionPoint.</I> This two-level container or connection-point architecture will allow for extension of the connection-point idea through additional interfaces, if they become necessary.</P>
<P>This chapter has examined these interfaces, in regard to both the client and the object, through sample code.</P></font></body></HTML>
