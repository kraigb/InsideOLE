<HTML><HEAD><TITLE>OLE's Implementation: Compound Files</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>OLE's Implementation: Compound Files</H2><P>What we've seen to this point, with the exception of custom marshaling for storage and stream objects, is the specification for Structured Storage. In other words, we've seen the architectural model of storage and stream objects, their interfaces, and how transactioning works. But a model is of little more than academic interest until it's actually implemented as something usable. The implementation of storage and stream objects is what OLE calls Compound Files, which involves a few additions to the architecture as well as a few features, such as transactioned streams and region locking, that are left unsupported.</P>
<P>The sections that follow describe the additions, mainly a LockBytes object that implements an interface named (what else) <I>ILockBytes</I>, the API functions through which a client creates a compound file and obtains the <I>IStorage </I>pointer to the root object within that file, and an interface named <I>IRootStorage</I>. Following discussion of the additions is a hit list of differences between the model and the implementation of Compound Files, and a few other notes of interest about this OLE-provided service.</P></font></body></HTML>
