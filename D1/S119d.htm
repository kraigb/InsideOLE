<HTML><HEAD><TITLE>Compound Files in Practice</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Compound Files in Practice</H2><P>Now that we've thoroughly pounded into the deep earth all the interfaces and API functions related to compound files, we can look at how to actually apply it all to implementing file functions in an application. For this chapter, I have modified the Chapter 1 version of Cosmo to write its data into a compound file, demonstrating the simplest use of compound files: open, read or write, and then close. This version of Cosmo also retains compatibility with old versions of its files by using the conversion feature of compound files, which allows it to treat old files as storages. I have also added compound file support to Patron. Patron has a much more complicated storage scheme because we implement parts of the storage model shown earlier in Figure 7-6 on page 353.</P></font></body></HTML>
