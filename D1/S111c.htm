<HTML><HEAD><TITLE>Type Library and Element Attributes</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Type Library and Element Attributes</H3><P>When we combine the data structures and elements stored in a type library and encapsulate those structures behind particular interfaces, we can refer to the library and each element in it as "objects." In doing so we raise the question of what sorts of properties these objects have.</P>
<P>The properties of a type library or an element are called <I>attributes</I>. The attributes that apply to the library and most of its elements are described in Table 3-2. Many of the attributes for elements are described through the bits in the <I>Flags</I> attribute.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="78pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Attribute</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>The descriptive name of the type library or element without spaces or punctuation, as in <I>KoalaTypeLibrary</I>, <I>KoalaObject</I>, or <I>IKoala</I>. Every element has a name.</P></TD></TR><TR><TD VALIGN="TOP"><P>Guid (or Uuid)</P></TD><TD VALIGN="TOP"><P>A programmatic identifier for the library or element. A library GUID is different from other CLSIDs or IIDs. A <I>module</I> cannot have a GUID; it is optional for a <I>typedef</I>; it is required for all other elements.</P></TD></TR><TR><TD VALIGN="TOP"><P>Version</P></TD><TD VALIGN="TOP"><P>The major and minor version of the library or element.</P></TD></TR><TR><TD VALIGN="TOP"><P>DocString</P></TD><TD VALIGN="TOP"><P>A short piece of text describing the purpose of the library or element.</P></TD></TR><TR><TD VALIGN="TOP"><P>HelpFileName</P></TD><TD VALIGN="TOP"><P>The name of a help file (no path) that contains further information about all the contents of the library. There is only one help file per library, so this attribute applies only to a library and not to individual elements.</P></TD></TR><TR><TD VALIGN="TOP"><P>HelpContext</P></TD><TD VALIGN="TOP"><P>The context ID inside <I>HelpFileName</I>, where specific information is found for library or element.</P></TD></TR><TR><TD VALIGN="TOP"><P>Lcid</P></TD><TD VALIGN="TOP"><P>A locale identifier, or <I>locale,</I> that describes the single national language used for all text strings in the type library and elements. A type library is intended to be written for a specific national language, with the exception that individual function arguments can be given a locale for the purpose of accommodating functions that might perform translations.</P></TD></TR><TR><TD VALIGN="TOP"><P>Flags</P></TD><TD VALIGN="TOP"><P>Bits specifying additional aspects about the library or element. Although there are many element flags, a library has only a few possibilities: no flags at all, <I>hidden</I> (not browsable through user interface), or <I>restricted</I> (controlled programmatically for security).</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 3-2.</B></P>
<P><B>Attributes of a type library and its elements.</B></P>
<P>You can see that the <I>HelpString</I>, <I>HelpFileName</I>, and <I>HelpContext</I> attributes carry help information along with a type library, but not <I>all</I> of the help information. The idea is that a user can view any element in some sort of browser and quickly get a description of its purpose from the <I>HelpString</I> attribute. If the <I>HelpFileName</I> attribute is available, the browser would also provide a Help button that, when pressed, would launch WinHelp with the <I>HelpContext</I> value to show more information about the library or element.</P>
<P>The <I>Lcid</I> attribute deserves some more discussion. This is usually found only on a library, but it can appear on function arguments as well. As you might expect, a type library, like an owner's manual, will contain text in a specific written language, such as English, Russian, or Arabic. This language applies to everything in the library except specific function arguments. The intention is that you support multiple languages by providing multiple localized type libraries, each of which can coexist on the same machine and can share the same GUID. Registry entries differentiate these localizations.</P>
<P><img src="16bit.gif"></P>
<P>The <I>Lcid</I> attribute is a value of the type LCID, for <I>locale</I> <I>identifier,</I> which was originally created by the Unicode Consortium. Such an identifier forms the basis for all localization or globalization or internationalization or whateveryouwanttocallittodayization not only of type information but of all other language-sensitive parts of the Win32 API. As part of supporting Unicode, the Win32 API took in the LCID as part of its National Language Support (NLS) API, and OLE uses that part of the operating system to handle its own language concerns.2 </P>
<P>Simply said, an LCID, or "locale," as it's called for convenience, is nothing more than a 32-bit value whose lower 16 bits contain a "language identifier," or LANGID:</P>
<P><img src="03aa.gif"></P>
<P>The Win32 macro MAKELCID will create one of these 32-bit values from a 16-bit LANGID through a bitwise OR with a 32-bit zero value. The LANGID itself contains a primary-language value and a sub-language value. The primary language (the lower 10 bits) identifies a generic category of languages, such as English, in which the sub-language (the upper 6 bits) identifies variations of the primary language such as American, British, Australian, Irish, New Zealand, and Canadian English:</P>
<P><img src="03bb.gif"></P>
<P>A caution: it is <I>very</I> easy to mistakenly think of the primary and sub-language fields in a LANGID as being both 8 bits because that's how we intuitively think about bits. This can get you into a lot of trouble and confusion, so take a few well-invested moments to study the 10-bit/6-bit structure of this type.</P>
<P>Enough with the meditation. There are a number of macros to assist you in creating or decomposing a LANGID given values for the primary language and the sub-language:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="221pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>MAKELANGID(<I>primary, sub</I>)</P></TD><TD VALIGN="TOP"><P>Creates a LANGID</P></TD></TR><TR><TD VALIGN="TOP"><P>PRIMARYLANGID(<I>langID</I>)</P></TD><TD VALIGN="TOP"><P>Extracts the primary language value</P></TD></TR><TR><TD VALIGN="TOP"><P>SUBLANGID(<I>langID</I>)</P></TD><TD VALIGN="TOP"><P>Extracts the sub-language value</P></TD></TR><TR><TD VALIGN="TOP"><P>LANGIDFROMLCID(<I>lcid</I>)</P></TD><TD VALIGN="TOP"><P>Chops off the upper 16 bits of <I>lcid</I></P></TD></TR></TBODY></TABLE>
<P><BR></P><P>The OLE and Win32 header files define constants of the form <I>LANG</I><I>_</I><I>&lt;primarylang&gt;</I> for all known primary languages as well as symbols of the form <I>SUBLANG</I><I>_</I><I>&lt;sublang&gt;</I> for all variations of the primary languages. So you can specify primary languages from Albanian to Catalan to Rhaeto-Romanic to Urdu,3 and sub-languages from Simplified Chinese to Brazilian Portuguese to Mexican or Modern Spanish. The header files have the most up-to-date list of language IDs, more current than any documentation.</P>
<P>Some of the more common LANGIDs you'll see are 0x0409 for American English (English primary language 9, American sub-language 1), 0x0009 for basic English, and 0x0000 for "neutral." The neutral language is generally the one used at the programming level and not the user interface level, and so it is typically English.</P>
<P>For the most part, you'll localize to primary languages, taking considerations about specific regions into account much less frequently. Specifying a sub-language is usually necessary only when you need to use words like "wrench," "semitrailer," and "cookie" in American English, which translate to "spanner," "lorry," and "biscuit" in British English.</P>
<P>This is not meant to be an exhaustive study of language and locale identifiers, just enough of one to make you aware of them and what they contain, because they apply to type information. Locales will come into play again when we talk about OLE Automation in Chapters 14 and 15. If you're interested in learning more about locales, please refer to the OLE and Win32 programmer's references as well as <I>Developing International Software for Windows</I><I> 95 and Windows NT,</I> by Nadine Kano.</P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR><TR><TD VALIGN="TOP"><P>2 The NLS API is documented in the <I>Win32 Programmer</I><I>'</I><I>s Reference,</I> volumes 2 and 5, particularly Appendix C of volume 2. (Note that the "String Manipulation and Unicode" chapter in volume 2 refers to Appendix C of volume 5, but this is incorrect: Appendix C is actually in volume 2.) These API functions allow you to retrieve the current user's locale identifier as well as locale-specific information.</P></TD></TR><TR><TD VALIGN="TOP"><P>3 OK OK so I picked the lesser-known languages from the list. (Urdu is actually last alphabetically.) Catalan is a Romance language used in Catalonia Valencia and the Balearic islands all eastern regions of Spain (around Barcelona) as well as Andorra the tiny country wedged between Spain and France.  Rhaeto-Romanic is a Romance language of eastern Switzerland northeastern Italy and the adjacent parts of Austria. Urdu is an Indic language that is widely used in India and is an official literary language of Pakistan.</P></TD></TR></TBODY></TABLE>
<P><BR></P></font></body></HTML>
