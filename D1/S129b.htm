<HTML><HEAD><TITLE>Close and Delete Objects</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Close and Delete Objects</H3><P>We would quickly fill our hard disks with large compound documents if we could never remove objects from them. So now we must add some way to delete an object from a document. This is similar to, but not exactly the same as, closing an object when the document is being closed and the object still exists—that is, the object moves from the loaded state to the passive state. Deleting an object means taking it from the running or the loaded state to outright nonexistence.</P>
<P>Closing an embedded object requires two actions: ensuring that the object's storage is updated and calling <I>IOleObject::Close</I>. The latter tells the object's local server to completely shut down and purge itself from memory if no other containers are using it. As far as our container is concerned, however, this object is now in the passive state, so we must call <I>OleLoad</I> to bring it back to the loaded state.</P>
<P><I>IOleObject::Close</I> takes one argument—the Save option—which instructs the object how to proceed. OLECLOSE_SAVEIFDIRTY tells the object to call <I>IOleClientSite::SaveObject </I>if it's dirty before closing. OLECLOSE_NOSAVE simply closes the object regardless of its dirty state. OLECLOSE_PROMPTSAVE closes the object if it is not dirty; otherwise, it displays a Yes/No/Cancel message box asking the user whether he or she wants to save the object. In this case, <I>Close </I>will return OLE_E_PROMPTSAVECANCELLED<I> </I>to indicate that the user did not want to close the object after all.</P>
<P>Destroying an object (as Patron does when selecting Delete Object from the Edit menu), still involves <I>IOleObject::Close</I> but always with OLECLOSE_NOSAVE. This is in addition to destroying the storage element for this object, which your site manages. Finally, after destroying an object, you should call <I>CoFreeUnusedLibraries</I> as a matter of habit.</P></font></body></HTML>
