<HTML><HEAD><TITLE>Summary</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Summary</H2><P>A <I>persistent object</I> is one that supports a model through which a client can ask the object to save and load the object's state data to some storage medium. Each model is described by an interface whose name begins with <I>IPersist</I>, for example, <I>IPersistStorage</I> (the medium is a storage element plus any streams or storages within the element), <I>IPersistStream[Init]</I> (the medium is a single stream), and <I>IPersistFile</I> (the medium is a separate file altogether). Specifically, <I>IPersistStorage</I> and <I>IPersistStream[Init]</I> provide the basic means through which multiple components can share a compound file.</P>
<P>Of these models. stream-based persistence is the simplest to use, followed by file-based persistence. Storage-based persistence offers an object the ability to keep storage and stream elements open for incremental access while other components might have different elements in the same compound file open as well. The way <I>IPersistStorage</I> and <I>IPersistStreamInit</I> work is demonstrated through the Polyline component and its interactions with Component Cosmo. Your understanding of this will be useful in many other areas of OLE, including the use of monikers, OLE Documents, and OLE Controls.</P></font></body></HTML>
