<HTML><HEAD><TITLE>The IConnectionPointContainer Interface</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>The <I>IConnectionPointContainer</I> Interface</H3><P>The outgoing arrows shown in the previous figures represent the fact that the object contains code to call the member functions of outgoing interfaces when necessary. In and of itself, however, this doesn't help the client know which outgoing interfaces the object supports.</P>
<P><I>IConnectionPointContainer </I>allows the client to ask a connectable object a few questions about outgoing interfaces. Of course, a client must request this interface from an object by first calling <I>QueryInterface(IID</I><I>_</I><I>IConnectionPoi</I><I>ntContainer</I>), which asks the object, "Are you a connectable (source) object?"—that is, "Do you have any outgoing interfaces?" If an object replies with an error, it has no outgoing interfaces at all. Otherwise, you're given a pointer through which you can ask two other questions about the outgoing interfaces, expressed through the two specific members<I> </I>of <I>IConnectionPointContainer</I> (shown in this code and in Table 4-1):</P>
<P><BR></P>
<pre><code>interface IConnectionPointContainer : IUnknown<BR>    {<BR>    HRESULT EnumConnectionPoints(IEnumConnectionPoints **);<BR>    HRESULT FindConnectionPoint (REFIID, IConnectionPoint **);<BR>    };</code></pre>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="126pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Member Function</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>FindConnectionPoint</P></TD><TD VALIGN="TOP"><P>"Do you have this specific outgoing interface?" Asks the object whether it supports the outgoing interface identified with an IID, returning an <I>IConnectionPoint</I> pointer if so.</P></TD></TR><TR><TD VALIGN="TOP"><P>EnumConnectionPoints</P></TD><TD VALIGN="TOP"><P>"Which outgoing interfaces do you support?" Creates and returns an enumerator object that implements <I>IEnumConnectionPoints</I>, through which the client can retrieve the <I>IConnectionPoint</I> pointers for each outgoing interface.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 4-1.</B></P>
<P><B>Member functions of <I>IConnectionPointContainer</I>.</B></P>
<P>To clarify the operations involved here, consider again the analogy of two humans trying to communicate with one another, as we described in Chapter 2. When I walk up to another person and perform the equivalent of <I>QueryInterface </I>for a human language, I'm asking specifically whether that person can understand that language. I'm not asking whether the person can speak the language, only whether he or she understands it. If I query for <I>IConnectionPointContainer</I>,<I> </I>I'm asking, "Can you speak?" and if so, I can ask, "Do you speak &lt;<I>language</I>&gt;?" and "What languages do you speak?"</P>
<P>With a positive response to either of the latter two questions, I get back a connection point. With that connection point, I can indicate my ability to understand that language myself. Again, you'll notice a decoupling of the process of asking a question—that is, exploring an object—and the process of actually performing some action. I could, if I wanted, ask whether you speak classical Latin. If you answered yes, I might say, "That's nice, too bad I don't understand it!" (It is, of course, a waste of time to write a program that works that way.)</P>
<P>Getting back a connection point is similar to being handed a jack into which I can plug a set of headphones that I can use to hear what the object has to say. Unless I plug into that jack, I won't hear a thing. This socket happens to be a pointer to <I>IConnectionPoint</I>, so let's see what that interface does.</P></font></body></HTML>
