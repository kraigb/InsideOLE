<HTML><HEAD><TITLE>Summary</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Summary</H2><P>A viewable object is any object that implements <I>IViewObject2 </I>alongside any other interfaces. (<I>IViewObject2 </I>is a refinement of <I>IViewObject</I>, an earlier OLE interface<I>.</I>) Through <I>IViewObject2</I>, a client can have an object draw graphical presentations directly to a screen or printer device, using the member function named <I>Draw</I>. <I>Draw </I>gives a viewable object direct access to a device, defines how the object should scale its output, and provides for drawing into metafiles and breaking out of long repaints. Because <I>Draw </I>takes an <I>hDC </I>argument, however, <I>IViewObject2 </I>can be implemented only from an in-process object. A Windows <I>hDC</I> cannot be shared across process boundaries.</P>
<P>Nevertheless, <I>IViewObject2 </I>is a powerful interface. Other member functions allow the client to control changes to graphic presentations (for printer banding) and also to receive asynchronous notifications when a view changes. These notifications occur through <I>IAdviseSink::OnViewChange</I> and are distinct from data change notifications sent through <I>IAdviseSink::OnDataChange</I>. The latter function is useful for synchronizing an in-process implementation of a viewable object with a data source in a local server.</P>
<P>Related to an object's ability to draw its own presentations is its ability to cache those presentations in a piece of storage. A client can use such cached information to later display or print object presentations without requiring the object code to be present. OLE itself provides a data cache service. The cache is an object that implements not only <I>IViewObject2 </I>but also <I>IPersistStorage, IDataObject, IOleCache2, </I>and <I>IOleCacheControl</I>. Through these interfaces, the cache can save and load presentations, render the presentations as data formats, control what is stored in the cache, and connect to a running object in a local server from which the cache can automatically obtain updated presentations.</P>
<P>This chapter demonstrates the use of the cache as well as the client side of <I>IViewObject2 </I>by showing how an application can display, print, save, and reload metafiles and bitmaps without doing much work at all. The chapter's example sets the stage for enhancements to the Patron application in later chapters.</P></font></body></HTML>
