<HTML><HEAD><TITLE>Design and Implement Drop Target User Feedback</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Design and Implement Drop Target User Feedback</H3><P>The first step for a target is to decide how it will indicate what might happen in a drop operation. There are many ways to do this. A word processor, for example, might show a shaded caret at the point where text would be dropped.</P>
<P><img src="f13dd06c.gif"></P>
<P>An application such as Patron, which pastes graphics, might show a rectangle of the exact size and at the location the dropped data would occupy.</P>
<P><img src="f13dd06d.gif"></P>
<P>For Cosmo, pasting any Polyline data replaces the data in the window with the new data, so we can highlight the Polyline window itself with inverted edges.</P>
<P><img src="f13dd06e.gif"></P>
<P>This feedback is generated in the new function <I>CC</I><I>osmoDoc::DropSelectTargetWindow</I>, which inverts a 3-pixel frame around the window. This function is a toggle: we'll turn the highlight on in <I>IDropTarget::DragEnter </I>and turn it off in <I>IDropTarget::DragLeave </I>and <I>IDropTarget::Drop</I>:</P>
<P><BR></P>
<pre><code>void CCosmoDoc::DropSelectTargetWindow(void)<BR>    {<BR>    HDC         hDC;<BR>    RECT        rc;<BR>    UINT        dd=3;<BR>    HWND        hWnd;<BR><BR>    hWnd=m_pPL-&gt;Window();<BR>    hDC=GetWindowDC(hWnd);<BR>    GetClientRect(hWnd, &amp;rc);<BR><BR>    //Top<BR>    PatBlt(hDC, rc.left, rc.top, rc.right-rc.left, dd, DSTINVERT);<BR><BR>    //Bottom<BR>    PatBlt(hDC, rc.left, rc.bottom-dd, rc.right-rc.left, dd<BR>        , DSTINVERT);<BR><BR>    //Left, excluding regions already affected by top and bottom<BR>    PatBlt(hDC, rc.left, rc.top+dd, dd, rc.bottom-rc.top-(2*dd)<BR>        , DSTINVERT);<BR><BR>    //Right, excluding regions already affected by top and bottom<BR>    PatBlt(hDC, rc.right-dd, rc.top+dd, dd, rc.bottom-rc.top-(2*dd)<BR>        , DSTINVERT);<BR><BR>    ReleaseDC(hWnd, hDC);<BR>    return;<BR>    }</code></pre>
<P>The <I>DropSelectTargetWindow</I> function (like all such feedback functions) has two responsibilities. First, it needs to determine where to place the feedback. For Cosmo, we can use the rectangle of the Polyline window, but for applications such as word processors, you might need to calculate the line and character nearest the mouse cursor. For a spreadsheet, you would have to determine the closest range of cells.</P>
<P>Second, the function must draw the visuals at that location. Cosmo does this with <I>PatBlt</I> and DSTINVERT. Normally you'll use some sort of XOR operation so that you can show an image and remove it quickly and easily, but it's always your choice.</P></font></body></HTML>
