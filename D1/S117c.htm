<HTML><HEAD><TITLE>Write a Registration File</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Write a Registration File</H3><P>Earlier in this chapter, we saw the entries necessary to map an IID to a CLSID that implements the marshalers for that IID, which essentially amounts to the following:</P>
<P><BR></P>
<pre><code>\<BR>    Interface<BR>        {0002114a-0000-0000-c000-000000000046} = IAnimal<BR>            NumMethods = 7<BR>            ProxyStubClsid32 = {0002114a-0000-0000-c000-000000000046}<BR><BR>\<BR>    CLSID<BR>        {0002114a-0000-0000-c000-000000000046} = IAnimal Proxy/Stub Factory<BR>            InprocServer32 = c:\inole\chap06\ianimal\ianimal.dll</code></pre>
<P>The strange part about these entries (essentially the contents of CHAP06\IANIMAL\WIN32.REG) is that the CLSID is the same as the IID of the interface. When using the MIDL compiler, you pull in all the CLSID-dependent code, such as <I>DllGetClassObject </I>from RPCRT4.LIB, which means that you can't really set the CLSID to anything you want. Specifically, the standard <I>DllGetClassObject </I>implementation recognizes the IID of any interface contained in the DLL as a suitable CLSID. This allows you to place marshalers for any number of interfaces inside the same DLL.</P>
<P>This little game with the IID and CLSID is an issue only when MIDL is in the picture—it has nothing to do with standard marshaling itself.9 If you implement marshalers manually, you also implement <I>DllGetClassObject </I>and can use any CLSID you want, whether or not it matches an IID.</P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR><TR><TD VALIGN="TOP"><P>9 The IID and CLSID do not conflict because they are used in totally different circumstances.  An IID is used only in calls to <I>QueryInterface </I>and such and a CLSID is used only in calls to <I>CoGetClassObject </I>and <I>CoCreateInstance</I>.  The two simply don't overlap in usage.</P></TD></TR></TBODY></TABLE>
<P><BR></P></font></body></HTML>
