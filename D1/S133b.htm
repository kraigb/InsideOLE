<HTML><HEAD><TITLE>Standard dispIDs for Controls</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Standard dispIDs for Controls</H3><P>I mentioned earlier that OLE Controls defines a taxonomy for the classification of methods, properties, and events. Not only that, but OLE Controls defines a large number of standard dispID values beyond those we saw in Chapter 14. In defining these standards, OLE Controls uses the term <I>location</I> to describe which piece of code implements a particular method or property. The term <I>variety</I> describes how rigid a contract is defined for the property, method, or event in question. <I>Standard</I> properties have a specified behavior that must be followed. <I>Common</I> properties are more lax, as they have only a suggested behavior. <I>Other</I> properties, as you might guess, have no specific behavior and are entirely implementation-dependent. OLE itself doesn't define any methods, properties, or events in the common and other groups.</P>
<P>There are no less than 14 standard control properties. The names of the most interesting ones are listed in Table 24-3 on the next page. In addition, there are three standard methods—<I>Refresh</I>, <I>DoClick</I>, and <I>AboutBox</I>—and eight standard events—<I>Click</I>, <I>DblClick</I>, <I>KeyDown</I>, <I>KeyPress</I>, <I>KeyUp</I>, <I>MouseMove</I>, <I>MouseUp</I>, and <I>Error</I>. All of these have negative dispID values, indicating their standard status. This also applies to the 15 or so standard ambient properties (the interesting ones are described in Table 24-4) and a handful of standard extended properties, as described in Table 24-5. To avoid conflicts in the programmatic symbols for these dispIDs, all ambient properties are given symbols in the form DISPID_AMBIENT_&lt;<I>property</I>&gt;, as in DISPID_AMBIENT_FORECOLOR. All other symbols use DISPID_&lt;<I>property</I>&gt; as usual.7</P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="221pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Control Property</B></P></TD><TD VALIGN="TOP"><P><B>Type and Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>BackColor, ForeColor, FillColor, BorderColor</P></TD><TD VALIGN="TOP"><P>(OLE_COLOR) The control's color scheme.</P></TD></TR><TR><TD VALIGN="TOP"><P>BackStyle, FillStyle, BorderStyle, BorderWidth, BorderVisible, DrawStyle, DrawWidth</P></TD><TD VALIGN="TOP"><P>(<I>short</I> or <I>long</I>) Bits that define a control's visual behavior—solid or transparent, thick or thin borders, line style, and so forth.</P></TD></TR><TR><TD VALIGN="TOP"><P>Font</P></TD><TD VALIGN="TOP"><P>(<I>IDispatch</I> *) The font used in the control. This is an <I>IDispatch</I> pointer to a standard font object (see below).</P></TD></TR><TR><TD VALIGN="TOP"><P>Caption, Text</P></TD><TD VALIGN="TOP"><P>(BSTR) Strings containing the control's label (the caption) or its textual contents (the text). The caption does not necessarily name the control in the container. (See the extended <I>Name</I> property in Table 24-5.)</P></TD></TR><TR><TD VALIGN="TOP"><P>Enabled</P></TD><TD VALIGN="TOP"><P>(BOOL) Determines whether the control is enabled or disabled. (If disabled, the control is likely grayed.)</P></TD></TR><TR><TD VALIGN="TOP"><P>Window</P></TD><TD VALIGN="TOP"><P>(HWND) The window handle of the control, if it has one.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 24-3.</B></P>
<P><B>Standard control properties.</B></P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="165pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Ambient Property</B></P></TD><TD VALIGN="TOP"><P><B>Type and Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>BackColor, ForeColor</P></TD><TD VALIGN="TOP"><P>(OLE_COLOR) Provides controls with the default background and foreground colors. Use by a control is optional.</P></TD></TR><TR><TD VALIGN="TOP"><P>Font</P></TD><TD VALIGN="TOP"><P>(<I>IDispatch</I> *) A pointer to a standard font object (see below) that defines the default font for the form. Use by a control is optional.</P></TD></TR><TR><TD VALIGN="TOP"><P>LocaleID</P></TD><TD VALIGN="TOP"><P>(LCID) The language used in the container. Use by a control is recommended.</P></TD></TR><TR><TD VALIGN="TOP"><P>UserMode</P></TD><TD VALIGN="TOP"><P>(BOOL) Describes whether the container is in design mode (FALSE) or run mode (TRUE). A control must use this property to change its available functionality as necessary.</P></TD></TR><TR><TD VALIGN="TOP"><P>UIDead</P></TD><TD VALIGN="TOP"><P>(BOOL) Describes whether the container is in a mode in which controls should ignore user input. This applies irrespective of <I>UserMode</I>. A container might always set <I>UIDead</I> to TRUE in design mode and can set it to TRUE when it hits a breakpoint or such during run mode. A control must pay attention to this property.</P></TD></TR><TR><TD VALIGN="TOP"><P>MessageReflect</P></TD><TD VALIGN="TOP"><P>(BOOL) Specifies whether the container wants to receive Windows messages such as WM_CTLCOLOR, WM_DRAWITEM, WM_PARENTNOTIFY, and so on as events.</P></TD></TR><TR><TD VALIGN="TOP"><P>SupportsMnemonics</P></TD><TD VALIGN="TOP"><P>(BOOL) Describes whether the container processes mnemonics or not. A control can do whatever it wants with this information: for example, it would not underline characters it would normally use as a mnemonic.</P></TD></TR><TR><TD VALIGN="TOP"><P>ShowGrabHandles, ShowHatching</P></TD><TD VALIGN="TOP"><P>(BOOL) Describes whether a control should show a hatch border or grab handles (in the hatch border) when in-place active. Controls must obey these properties, giving the container ultimate control over whether the control or the container actually draws these bits of user interface. A control container might want to draw its own instead of relying on each control, in which case these ambients are always FALSE.</P></TD></TR><TR><TD VALIGN="TOP"><P>DisplayAsDefault</P></TD><TD VALIGN="TOP"><P>(BOOL) Describes whether a button control should draw itself with a thicker default frame. This property is exposed to buttonlike controls only.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 24-4</B></P>
<P><B>Standard ambient properties.</B></P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="106pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Extended Property</B></P></TD><TD VALIGN="TOP"><P><B>Type and Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>(BSTR) The container's name for the control.</P></TD></TR><TR><TD VALIGN="TOP"><P>Visible</P></TD><TD VALIGN="TOP"><P>(BOOL) The control's visibility.</P></TD></TR><TR><TD VALIGN="TOP"><P>Parent</P></TD><TD VALIGN="TOP"><P>(<I>IDispatch</I> *) The dispinterface of the form containing the control.</P></TD></TR><TR><TD VALIGN="TOP"><P>Default, Cancel</P></TD><TD VALIGN="TOP"><P>(BOOL) Indicates whether this control is the default or cancel button as described later under "Default and Cancel Buttons."</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 24-5.</B></P>
<P><B>Standard extended control properties.</B></P>
<P>The OLE_COLOR type is used for any color-related properties in OLE Controls. Usually it holds a standard COLORREF type, but it can also hold an index to a palette, a palette-relative index, or even a system color index appropriate for <I>G</I><I>etSysColor</I>. The OLE Controls run-time DLL, the same DLL that supplies the <I>OleCreatePropertyFrame </I>and <I>OleCreatePropertyFrameIndirect </I>functions, provides <I>OleTranslateColor </I>,<I> </I>a function that converts an OLE_COLOR type to a COLORREF given a palette.</P>
<P>The standard font object is also implemented as part of the OLE Controls DLL. A font object is created with the OLE API function <I>OleCreateFontIndirect</I>, which takes a FONTDESC structure describing the font metrics. This function returns a pointer to either an <I>IFont </I>interface or an <I>IDispatch</I> interface (also called <I>IFontDisp</I>) through which the client can manipulate the font's properties or retrieve the corresponding HFONT that is used to draw text with that font. The container's ambient <I>Font</I> property supplies a font of this type (VT_DISPATCH specifically). A control's <I>Font</I> property also uses this kind of font object.</P>
<P>In a similar vein, a standard picture object is created with the API function <I>OleCreatePictureIndirect </I>or loaded from disk using <I>OleLoadPicture</I>. For this object, you can get a pointer to an <I>IPicture </I>interface or to an <I>IDispatch </I>pointer called <I>IPictureDisp</I>. Through this pointer, you can also manipulate the picture's properties.</P>
<P>For more information about these types and their interfaces, please refer to the CDK documentation.</P>
<P></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR><TR><TD VALIGN="TOP"><P>7 I could not find a header file that defined symbols for the standard extended properties. According to the OLE Controls specification, DISPID_X_NAME is 0x80010000, DISPID_X_VISIBLE is 0x80010007, DISPID_X_PARENT is 0x80010008, DISPID_X_CANCEL is 0x80010037, and DISPID_X_DEFAULT is 0x80010038.</P></TD></TR></TBODY></TABLE>
<P><BR></P></font></body></HTML>
