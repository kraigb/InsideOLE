<HTML><HEAD><TITLE>Access Modes</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Access Modes</H3><P>Storage and stream objects support access modes like those found with traditional handle-based files. These modes, used with any function that creates or opens a storage or a stream, are defined with flags beginning with STGM_*, as shown in Table 7-3. Many of these access modes match exactly the OF_* flags used with the Windows API function <I>OpenFile</I> and, in fact, share the same integer values. As with <I>OpenFile</I>, you can combine any of these flags with a bitwise OR operation, producing the same effects that <I>OpenFile </I>has on a traditional file. Beyond that, moreover, OLE offers additional flags with special functions that are not available elsewhere, as described in Table 7-4 on the following page.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="152pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Structured Storage Flag</B></P></TD><TD VALIGN="TOP"><P><B>Definition Using <I>OpenFile</I> Flags</B></P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_READ (default)</P></TD><TD VALIGN="TOP"><P>OF_READ</P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_WRITE</P></TD><TD VALIGN="TOP"><P>OF_WRITE</P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_READWRITE</P></TD><TD VALIGN="TOP"><P>OF_READWRITE</P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_SHARE_DENYNONE</P></TD><TD VALIGN="TOP"><P>OF_SHARE_DENY_NONE</P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_SHARE_DENYREAD</P></TD><TD VALIGN="TOP"><P>OF_SHARE_DENY_READ</P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_SHARE_DENYWRITE</P></TD><TD VALIGN="TOP"><P>OF_SHARE_DENY_WRITE</P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_SHARE_EXCLUSIVE</P></TD><TD VALIGN="TOP"><P>OF_SHARE_EXCLUSIVE</P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_CREATE</P></TD><TD VALIGN="TOP"><P>OF_CREATE</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 7-3.</B></P>
<P><B>Basic available access modes and their Windows API <I>OpenFile</I> equivalents.</B></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="168pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Structured Storage Flag</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_DIRECT (default)</P></TD><TD VALIGN="TOP"><P>Opens the element for direct access.</P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_TRANSACTED</P></TD><TD VALIGN="TOP"><P>Opens the element so that changes are buffered and not saved until the element is committed.</P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_FAILIFTHERE (default)</P></TD><TD VALIGN="TOP"><P>Fails to create an element of a given name if one having that name already exists.</P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_CONVERT (storages only)</P></TD><TD VALIGN="TOP"><P>Allows an application to convert any traditional file to a storage that contains a single stream named "CONTENTS"; this stream contains exactly the same data as the original file. If the file is opened with STGM_DIRECT, the old file is immediately and permanently converted on disk, and therefore STGM_CONVERT always requires STGM_WRITE. To prevent permanent conversion, use STGM_TRANSACTED.</P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_DELETEONRELEASE </P></TD><TD VALIGN="TOP"><P>Deletes the file underneath a root storage when the object is destroyed through <I>Release</I>. This flag is highly useful for temporary files.</P></TD></TR><TR><TD VALIGN="TOP"><P>STGM_PRIORITY</P></TD><TD VALIGN="TOP"><P>Allows an application to open a direct, read-only storage or stream for a short time to quickly read some data. This flag tells the storage implementation to internally avoid extra buffering and processing, making the operation much faster. For more information, see the<I> OLE Programmer</I><I>'</I><I>s Reference</I>.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 7-4.</B></P>
<P><B>Additional Structured Storage flags.</B></P>
<P>When using these flags, remember that a stream is always restricted by the access mode of its parent storage. If the storage is read-only, streams within that storage are also read-only. Transactioning, however, is not a limitation—you can have direct streams inside a transacted storage. From the stream's point of view, changes are permanent, but from the view of the whole storage, that stream is transactioned in the scope of its parent storage.</P>
<P>Be aware that Structured Storage offers a finer granularity of file sharing than traditional files can provide. Multiple applications (run by multiple end users) can easily open different elements within the same storage hierarchy using exclusive access. They can even open the same element as long as STGM_SHARE_EXCLUSIVE is not specified.2 In such a case, transactioning allows each application to know whether another application has already changed the contents of that element since it was opened.</P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR><TR><TD VALIGN="TOP"><P>2 At the time of writing only the root storage object can be opened with flags other than STGM_SHARE_EXCLUSIVE. Using other flags to open down-level elements will fail with STG_E_INVALIDFLAG.</P></TD></TR></TBODY></TABLE>
<P><BR></P></font></body></HTML>
