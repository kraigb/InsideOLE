<HTML><HEAD><TITLE>Client Responsibilities</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Client Responsibilities</H2><P>Now that we know and understand how COM, given a CLSID, talks to a server to create an object, we can look at how a client tells COM to do it all in the first place. There are two topics of relevance here:</P>
<UL><LI>Creating and initializing objects from a CLSID with and without licensing</LI><LI>Managing server lifetime to free unused servers from memory when the client is no longer using previously created objects</LI></UL><P>In addition to these two capabilities, a client can be written to also support self-registering servers. This generally means little more than supplying an end-user interface through which an end user can select one or more files and ask the client to register or unregister them. The client, in turn, attempts to load any DLL in the list to call <I>DllRegisterServer </I>or <I>DllUnregisterServer </I>(using <I>GetProcAddress </I>to get the address of the function) and attempts to launch any EXE with -<I>RegServer </I>or -<I>UnregServer</I>. The client could check the version resource to save time if it wants, but that's about all there is to self-registration.</P></font></body></HTML>
