<HTML><HEAD><TITLE>Enable Linking from Clipboard and Drag-and-Drop Operations</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Enable Linking from Clipboard and Drag-and-Drop Operations</H3><P>In the same way that Patron creates embedded objects<I> </I>from both clipboard and drag-and-drop operations with <I>OleCreateFromData</I>, we can now create linked objects by using <I>OleCreateLinkFr</I><I>omData</I>. To accomplish this, we need to modify our pasting and our drag-and-drop code to handle CFSTR_LINKSOURCE and CFSTR_LINKSRCDESCRIPTOR. These formats are registered in the <I>CPatronDoc </I>constructor and are saved in the variables <I>m</I><I>_</I><I>cfLinkSource </I>and <I>m</I><I>_</I><I>cfLinkSrcDescriptor</I>.</P>
<P>Now we need a function such as <I>CPatronDoc::FQueryPasteLinkFromData</I> to check whether we can create a link from a data object:</P>
<P><BR></P>
<pre><code>BOOL CPatronDoc::FQueryPasteLinkFromData(LPDATAOBJECT pIDataObject<BR>    , LPFORMATETC pFE, PTENANTTYPE ptType)<BR>    {<BR>    HRESULT         hr;<BR><BR>    if (NULL==pIDataObject)<BR>        return FALSE;<BR><BR>    hr=OleQueryLinkFromData(pIDataObject);<BR><BR>    if (NOERROR!=hr)<BR>        return FALSE;<BR><BR>    if (NULL!=pFE)<BR>        SETDefFormatEtc(*pFE, m_cfLinkSource, TYMED_ISTREAM);<BR><BR>    if (NULL!=(LPVOID)ptType)<BR>        *ptType=TENANTTYPE_LINKEDOBJECTFROMDATA;<BR><BR>    return TRUE;<BR>    }</code></pre>
<P>You can see that <I>OleQueryLinkFromData</I> returns S_FALSE or NOERROR, so we have to compare the return value to NOERROR to test whether data is available. When the data is available, Patron fills a FORMATETC structure as appropriate for CFSTR_LINKSOURCE and indicates the type of tenant we can create from this data, specifically TENANTTYPE_LINKEDOBJECTFROMDATA. <I>CTenant::Create </I>uses this flag to call <I>OleCreateLinkFromData</I>:</P>
<P><BR></P>
<pre><code>//In CTenant::Create<BR>switch (tType)<BR>    {<BR>    [Other cases]<BR><BR>    case TENANTTYPE_LINKEDOBJECTFROMDATA:<BR>        hr=OleCreateLinkFromData((LPDATAOBJECT)pvType<BR>            , IID_IUnknown, OLERENDER_DRAW, NULL, NULL<BR>            , m_pIStorage, (PPVOID)&amp;pObj);<BR>        break;<BR><BR>    §<BR><BR>    }</code></pre>
<P>With this code in place, we can add the clipboard and drag-and-drop functionality to make use of it. Now, because the link-source format is typically the lowest in the order of available formats, it is unlikely that a Paste command by itself will create a linked object. We need to give the user other ways to perform a paste link. The first way is the Paste Special dialog box, which is the topic of the next section. Then we'll look at modifications to our drag-and-drop code to support linking as well.</P>
<H4><A NAME="sec0"></A>Paste Link and Paste Special Commands</H4><P>To repeat myself, users must have an explicit command with which to perform a paste link, as opposed to using a higher available clipboard format. There are two standard ways to present this command. The first is to enable linking in the Paste Special dialog box; the other is to create a Paste Link item on the Edit menu to give the user an explicit command. In Patron, we'll implement only the former because the result of both commands is the same.</P>
<P>In Chapter 17, you might have noticed that the Paste Special dialog box has a Paste Link button that has been disabled up to this point. To enable this feature, we need to add linkable entries in the OLEUIPASTESPECIAL data structure. You can see how we do this in the code on the following page.</P>
<P><BR></P>
<pre><code>BOOL CPatronDoc::PasteSpecial(HWND hWndFrame)<BR>    {<BR>    OLEUIPASTESPECIAL   ps;<BR>    OLEUIPASTEENTRY     rgPaste[6];<BR>    UINT                rgcf[1];        //For ps.m_arrLinkTypes<BR><BR>    [Code to initialize other rgPaste[0] through rgPaste[4]]<BR><BR>    SETDefFormatEtc(rgPaste[5].fmtetc, m_cfLinkSource, TYMED_ISTREAM);<BR>    rgPaste[5].lpstrFormatName=PSZ(IDS_PASTELINK);<BR>    rgPaste[5].lpstrResultText=PSZ(IDS_PASTEASLINK);<BR>    rgPaste[5].dwFlags=OLEUIPASTE_LINKTYPE1 œ OLEUIPASTE_ENABLEICON;<BR>    <BR>    //Types we can Paste Link from the clipboard<BR>    rgcf[0]=m_cfLinkSource;<BR>    ps.arrLinkTypes=rgcf;<BR>    ps.cLinkTypes=1;<BR>    <BR>    §<BR><BR>    uTemp=OleUIPasteSpecial(&amp;ps);<BR><BR>    §<BR>    }</code></pre>
<P>The Paste Special dialog box will enable the Paste Link option if it encounters an OLEUIPASTEENTRY structure containing CFSTR_LINKSOURCE (such as the one shown in the preceding code, in <I>rgPaste[5]</I>) and if the data object from the clipboard also contains CFSTR_LINKSOURCE.</P>
<P>The next step might seem a little strange because the Paste Special dialog box is designed to handle more than one type of link information, such as (dare we say it) DDE links. You'll notice that the CFSTR_LINKSOURCE entry in the preceding code has the flag OLEUIPASTE_LINKTYPE1. This flag indicates that this entry is attached to the first clipboard format in the OLEUIPASTESPECIAL structure's <I>arrLinkTypes</I> field. This field is a pointer to an array of UINTs in which each element is some sort of link format. In our example, the array <I>rgcf</I> has only one entry, CFSTR_LINKSOURCE, so we indicate an array length of 1 in the <I>cLinkTypes</I> field. If we wanted to support another link-source format—say, an old DDE link—we would add that clipboard format to <I>rgcf</I>, increase <I>cLinkTypes</I>, and add another OLEUIPASTEENTRY structure with the flag OLEUIPASTE_LINKTYPE2, and so on. The Paste Special dialog box in the OLE UI Library supports up to eight link formats.</P>
<P>Now, if the user chooses Paste Link in the dialog and clicks OK, the <I>fLink </I>field in OLEUIPASTESPECIAL will be TRUE on return from <I>OleUIPasteSpecial. </I>In this case, we pass the clipboard's data object to <I>CPatronDoc::PasteFromData </I>with TENANTTYPE_LINKEDOBJECTFROMDATA, which calls down to <I>CTenant::Create</I>,<I> </I>as shown earlier. We also handle the cases in which the user chose Display As Icon, of course.</P>
<H4><A NAME="sec1"></A>Drag-and-Drop Linking Feedback</H4><P>The other way a user can create a linked object from existing data is to drop a data object into a compound document directly. As we learned in Chapter 13, OLE Drag and Drop specifies that the Shift+Ctrl key combination changes the semantics of a drag-and-drop operation to DROPEFFECT_LINK. Until now, Patron has supported only DROPEFFECT_COPY and DROPEFFECT_MOVE. Now we can add the code to check for the Shift+Ctrl combination as well. When a drop occurs and the latest effect is DROPEFFECT_LINK, we can toss the data object given to <I>IDropTarget::Drop </I>(DROPTGT.CPP) to <I>CPatronDoc::PasteFromData</I>. It is so useful to have centralized functions like this!</P>
<P>To handle all of this, Patron initializes the flag <I>m</I><I>_</I><I>fLinkAllowed </I>in <I>IDropTarget::DragEnter </I>by calling <I>OleQueryCreateLinkFromData</I>:</P>
<P><BR></P>
<pre><code>//Check whether we can link from this data object as well.<BR>ppg-&gt;m_fLinkAllowed<BR>    =(NOERROR==OleQueryLinkFromData(pIDataSource));<BR><BR>//We never allow linking by a drag operation in the current document.<BR>ppg-&gt;m_fLinkAllowed &amp;= !ppg-&gt;m_fDragSource;</code></pre>
<P>If this flag is FALSE, we never allow DROPEFFECT_LINK. Otherwise, we check for Shift+Ctrl elsewhere in the <I>IDropTarget </I>implementation with code such as the following:</P>
<P><BR></P>
<pre><code>*pdwEffect=DROPEFFECT_MOVE;<BR><BR>if (grfKeyState &amp; MK_CONTROL)<BR>    {<BR>    if (ppg-&gt;m_fLinkAllowed &amp;&amp; (grfKeyState &amp; MK_SHIFT))<BR>        *pdwEffect=DROPEFFECT_LINK;<BR>    else<BR>        *pdwEffect=DROPEFFECT_COPY;<BR>    }</code></pre>
<P>With these few minor changes, you now have a complete set of means through which a user can create a linked object in the container. At this point, you should be able to run a suitable server application (one that supports linking), create and save a file, copy some data to the clipboard, and then try to use Paste Link in your container or drag and drop data from that source. What should appear in your container is an object that looks like an embedded object from the same server. Activating it shows the object in the server with the server's normal user interface (no special changes as there were for embedding). As with embedding, changes made to the data in the server should be reflected in your container by virtue of your <I>IAdviseSink</I> receiving <I>OnViewChange</I> notifications.</P></font></body></HTML>
