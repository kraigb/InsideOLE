<HTML><HEAD><TITLE>Control Persistence</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Control Persistence</H3><P>I mentioned earlier that a control can choose to implement one or more of <I>IPersistStorage</I>, <I>IPersistStream</I>, and <I>IPersistStreamInit. </I>Because most controls maintain small data sets, they generally prefer and support stream-based persistence. Accordingly, a control container must be prepared to handle any one of these models, as the Component Cosmo sample in Chapter 8 demonstrated. CoCosmo's code prefers <I>IPersistStorage </I>over the others—most control containers will, however, prefer <I>IPersistStreamInit</I>, then <I>IPersistStream</I>, and then <I>IPersistStorage</I>. In addition, control containers must take OLEMISC_SETCLIENTSITEFIRST into account as well.</P>
<P>A control can also choose to support multiple persistence models for maximum flexibility, but the container determines which model is given preference. Some containers may give storage-based persistence priority and others may use streams first. Either way, a control gets its chance to save its own data.</P>
<P>Be aware that stream-based controls will not automatically support caching because the data cache is entirely storage-based. In other words, a control implementing <I>IPersistStream[Init] </I>need not and cannot support <I>IOleCache2 </I>itself or anything else to do with caching. This can markedly reduce the space required by the control as well as the time it takes to load a control in the first place. (This is because instantiating the cache does take a considerable amount of time.) The control should still be able to render a metafile or a bitmap for itself through <I>IDataObject::GetData </I>because a container might still want to cache presentations itself. Such a container can simply create its own data cache with <I>CreateDataCache </I>and manage it in a container-owned storage in which the control's own stream would be located.</P>
<P>A final note about persistence: Some containers do not store their forms in a binary format. Visual Basic, for example, saves a form as a straight-text file containing a description of the contents, including all control properties. A Visual Basic FRM file looks something like this:</P>
<P><BR></P>
<pre><code>VERSION 2.00<BR>Begin Form ControlDialog<BR>   Caption         =   "Some Form"<BR>   ClientHeight    =   1665<BR>   ClientLeft      =   7035<BR>   ClientTop       =   1710<BR>   ClientWidth     =   3795<BR>   Height          =   2040<BR>   Left            =   6990<BR>   LinkTopic       =   "Form1"<BR>   ScaleHeight     =   1665<BR>   ScaleWidth      =   3795<BR>   Top             =   1380<BR>   Width           =   3885<BR>   Begin CommandButton DoThings<BR>      Caption         =   "&amp;Do Things..."<BR>      Height          =   495<BR>      Left            =   240<BR>      TabIndex        =   4<BR>      Top             =   960<BR>      Width           =   1095<BR>   End<BR><BR>§</code></pre>
<P>To support saving properties as text in this manner, OLE Controls specifies that a control should be able to provide a property set (as we discussed in Chapter 16) through its <I>IDataObject::GetData </I>member. It should also reinitialize itself with that same property set through <I>IDataObject::SetData. </I>This specific property set has the format ID <I>{</I><I>FB8F0821-0164-101B-84ED-08002B2EC713</I><I>}</I>, the contents of which are documented in the CDK.</P></font></body></HTML>
