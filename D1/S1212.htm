<HTML><HEAD><TITLE>Call DoDragDrop</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Call <I>DoDragDrop</I></H3><P>We're now ready to call <I>DoDragDrop</I> on the pick event, which happens in the WM_LBUTTONDOWN case of <I>CCosmoDoc::FMessageHook</I>:</P>
<P><BR></P>
<pre><code>if (WM_LBUTTONDOWN==iMsg)<BR>    {<BR>    LPDROPSOURCE    pIDropSource;<BR>    LPDATAOBJECT    pIDataObject;<BR>    HRESULT         hr;<BR>    SCODE           sc;<BR>    DWORD           dwEffect;<BR><BR>    pIDropSource=new CDropSource(this);<BR><BR>    if (NULL==pIDropSource)<BR>        return FALSE;<BR><BR>    pIDropSource-&gt;AddRef();<BR>    m_fDragSource=TRUE;<BR><BR>    //Go get data and start the ball rolling.<BR>    pIDataObject=TransferObjectCreate(FALSE);<BR><BR>    if (NULL!=pIDataObject)<BR>        {<BR>        hr=DoDragDrop(pIDataObject, pIDropSource<BR>            , DROPEFFECT_COPY œ DROPEFFECT_MOVE, &amp;dwEffect);<BR>        pIDataObject-&gt;Release();<BR>        sc=GetScode(hr);<BR>        }<BR>    else<BR>        sc=E_FAIL;<BR><BR>    pIDropSource-&gt;Release();<BR>    m_fDragSource=FALSE;<BR><BR>    if (DRAGDROP_S_DROP==sc &amp;&amp; DROPEFFECT_MOVE==dwEffect)<BR>        {<BR>        m_pPL-&gt;New();<BR>        FDirtySet(TRUE);<BR>        }<BR><BR>    return TRUE;<BR>    }</code></pre>
<P>We first instantiate the drop source object, failing to do anything more if instantiation fails. We then set the document's <I>m</I><I>_</I><I>fDragSource</I> to avoid unnecessary processing and then create the data object to use in the transfer. The <I>CCosmoDoc::TransferObjectCreate </I>function is the one we added for the OLE Clipboard in Chapter 12. This shows the benefit of writing such a function:  it makes the initiation of a drag-and-drop operation simple because we just pass the <I>IDataObject </I>and <I>IDropSource </I>pointers as the first two arguments to <I>DoDragDrop</I>. The third argument to this function is a value that represents the source's allowable effects, which can be any combination of DROPEFFECT_MOVE, DROPEFFECT_COPY, and DROPEFFECT_LINK. If you don't want to allow a move, you need not include that flag. In Cosmo, we don't support linking (we don't provide CFSTR_LINKSOURCE), so we don't include the link effect.</P>
<P>The fourth argument to <I>DoDragDrop </I>is an out-parameter that will receive the final effect of the operation after <I>DoDragDrop </I>returns. After the operation is finished, Cosmo cleans up the data object and the drop source object and checks what happened. If the final effect was a copy, we have finished. If it was DROPEFFECT_MOVE, we have to delete the source data, which in this case means clearing the Polyline data. Remember that a move operation modifies the source document, so you should set your dirty flag.</P>
<P>This code in <I>CCosmoDoc::FMessageHo</I><I>ok</I>,<I> </I>along with the drop source object, is the complete source implementation—very simple! Because Cosmo is a source of metafiles and bitmaps as well as its Polyline data, this code allows you to drag and drop a Polyline figure as a static picture into a suitable drop target. Now let's see how we can make Cosmo itself a target.</P></font></body></HTML>
