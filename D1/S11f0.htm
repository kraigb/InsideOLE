<HTML><HEAD><TITLE>IViewObject2::Freeze and Unfreeze</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3><I>IViewObject2::Freeze </I>and <I>Unfreeze</I></H3><P><I>Freeze</I> and <I>Unfreeze</I> (the latter of which I've always thought should be <I>Thaw</I>) let the client control whether the object is allowed to change what it would render on subsequent calls to <I>Draw</I>.<I> Freeze</I> works on one aspect at a time—freezing DVASPECT_CONTENT does not freeze a call to <I>Draw</I> for DVASPECT_ICON. Calling <I>Freeze</I> returns a DWORD key, which you later pass to <I>Unfreeze</I> to bring the object back from the Ice Age.</P>
<P>Freezing a viewable object is comparable to creating a bitmap copy of the current view of the object and always using that bitmap to show the object. Underneath, the actual data might have changed, but the image does not. Because we're always using the snapshot bitmap to show the object, calls to <I>Draw</I> don't show any changes.<I> </I>The utility of frozen views is that they stabilize an object's rendering during printer banding so that multiple calls to <I>Draw </I>work with the same underlying view.<I> </I>Without freezing that view, it could change between <I>Draw </I>calls, and that would totally louse up any attempt at printer banding.</P></font></body></HTML>
