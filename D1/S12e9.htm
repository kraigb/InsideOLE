<HTML><HEAD><TITLE>Linking to Embeddings Support in Polyline</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Linking to Embeddings Support in Polyline</H2><P>Supporting linking to embeddings as an object is quite simple for a local server such as Cosmo: it needs only to implement <I>IOleObject::SetMoniker </I>properly because the default handler will automatically call the container's <I>IOleContainer::LockContainer </I>to handle proper shutdown. When the object is implemented from an in-process server such as Polyline, the object itself has to register its full moniker as running and also handle the shutdown conditions by calling <I>LockContainer </I>at the appropriate times. You can make these calls either in <I>IRunnableObject::Run </I>or in <I>IOleObject::SetClientSite.</I> Polyline uses the latter case (in IOLEOBJ.CPP) because it does not have any client site pointers by the time <I>IRunnableObject::Run </I>is called:</P>
<P><BR></P>
<pre><code>STDMETHODIMP CImpIOleObject::SetClientSite<BR>    (LPOLECLIENTSITE pIOleClientSite)<BR>    {<BR>    if (NULL!=m_pObj-&gt;m_pIOleClientSite)<BR>        m_pObj-&gt;m_pIOleClientSite-&gt;Release();<BR><BR>    m_pObj-&gt;m_pIOleClientSite=pIOleClientSite;<BR><BR>    if (NULL!=m_pObj-&gt;m_pIOleClientSite)<BR>        {<BR>        HRESULT         hr;<BR>        LPMONIKER       pmk;<BR>        LPOLECONTAINER  pIOleCont;<BR><BR>        m_pObj-&gt;m_pIOleClientSite-&gt;AddRef();<BR><BR>        hr=m_pObj-&gt;m_pIOleClientSite-&gt;GetMoniker<BR>            (OLEGETMONIKER_ONLYIFTHERE, OLEWHICHMK_OBJFULL, &amp;pmk);<BR><BR>        if (SUCCEEDED(hr))<BR>            {<BR>            INOLE_RegisterAsRunning(this, pmk, 0<BR>                , &amp;m_pObj-&gt;m_dwRegROT);<BR>            pmk-&gt;Release();<BR>            }<BR><BR>        hr=m_pObj-&gt;m_pIOleClientSite-&gt;GetContainer(&amp;pIOleCont);<BR><BR>        if (SUCCEEDED(hr))<BR>            {<BR>            m_pObj-&gt;m_fLockContainer=TRUE;<BR>            pIOleCont-&gt;LockContainer(TRUE);<BR>            pIOleCont-&gt;Release();<BR>            }<BR>        }<BR><BR>    return NOERROR;<BR>    }</code></pre>
<P>Polyline revokes the running object table registration in its destructor, <I>CPolyline::~CPolyline</I>.</P>
<P>Now all we need to know is when to call <I>IOleContainer::LockContainer(FALSE) </I>to start container shutdown. We make the call when the linking container (the one linking to this embedded object) releases all of its connections to this object. To know when this happens, we must implement <I>IExternalConnection</I>, which Polyline does in IEXTCONN.CPP, as shown on the following page.</P>
<P><BR></P>
<pre><code>STDMETHODIMP_(DWORD) CImpIExternalConnection::AddConnection<BR>    (DWORD dwConn, DWORD dwReserved)<BR>    {<BR>    if (EXTCONN_STRONG &amp; dwConn)<BR>        return ++m_cLockStrong;<BR><BR>    return 0;<BR>    }<BR><BR>STDMETHODIMP_(DWORD) CImpIExternalConnection::ReleaseConnection<BR>    (DWORD dwConn, DWORD dwReserved, BOOL fLastReleaseCloses)<BR>    {<BR>    if (EXTCONN_STRONG==dwConn)<BR>        {<BR>        if (0==--m_cLockStrong &amp;&amp; fLastReleaseCloses)<BR>            m_pObj-&gt;m_pImpIOleObject-&gt;Close(OLECLOSE_SAVEIFDIRTY);<BR><BR>        return m_cLockStrong;<BR>        }<BR><BR>    return 0L;<BR>    }</code></pre>
<P>When the last external strong lock disappears, we call our own <I>IOleObject::Close </I>to handle our shutdown. In that function, we check the <I>m</I><I>_</I><I>fLockContainer </I>flag set in <I>IOleObject:</I><I>:SetClientSite.</I> If that flag is TRUE, we unlock the container to have it shut down as well:</P>
<P><BR></P>
<pre><code>STDMETHODIMP CImpIOleObject::Close(DWORD dwSaveOption)<BR>    {<BR>    [Other handling as usual]<BR><BR>    if (m_pObj-&gt;m_fLockContainer)<BR>        {<BR>        //Match LockContainer call from SetClientSite.<BR>        LPOLECONTAINER  pIOleCont;<BR><BR>        if (SUCCEEDED(m_pObj-&gt;m_pIOleClientSite<BR>            -&gt;GetContainer(&amp;pIOleCont)))<BR>            {<BR>            pIOleCont-&gt;LockContainer(FALSE);<BR>            pIOleCont-&gt;Release();<BR>            }<BR>        }<BR><BR>    §<BR>    }</code></pre></font></body></HTML>
