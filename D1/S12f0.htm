<HTML><HEAD><TITLE>In-Place Interfaces for Objects</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>In-Place Interfaces for Objects</H3><P>The presence of <I>IOleInPlaceObject </I>marks an object as in-place capable. Otherwise, an in-place–capable object appears to a container as any other embedded object does. This interface is always available through <I>QueryInterface </I>with any of the object's other interfaces. When an object becomes in-place active, it also provides an implementation of <I>IOleInPlaceActiveObject</I>, which is conceptually located on a separate object altogether, as shown in Figure 22-2. Typically, as we'll see in Chapter 23, this interface is implemented on the object itself, but with a <I>QueryInterface </I>that doesn't respond to any interfaces other than <I>IUnknown </I>and <I>IOleInPlaceActiveObject</I>.</P>
<P>    <img src="f22dd02.gif"></P>
<P><B>Figure 22-2.</B></P>
<P><B>The structure of an in-place–capable object.</B></P>
<P>As with the container interfaces, both <I>IOleInPlaceObject</I> and <I>IOleInPlaceActiveObject </I>are derived from <I>IOleWindow</I>, as shown in the code on the following page.</P>
<P><BR></P>
<pre><code>interface IOleInPlaceObject : IOleWindow<BR>    {<BR>    HRESULT InPlaceDeactivate(void);<BR>    HRESULT UIDeactivate(void);<BR>    HRESULT SetObjectRects(LPCRECT prcPosRect, LPCRECT prcClipRect);<BR>    HRESULT ReactivateAndUndo(void);<BR>    };<BR><BR>interface IOleInPlaceActiveObject : IOleWindow<BR>    {<BR>    HRESULT TranslateAccelerator(LPMSG pMsg);<BR>    HRESULT OnFrameWindowActivate(BOOL fActivate);<BR>    HRESULT OnDocWindowActivate(BOOL fActivate);<BR>    HRESULT ResizeBorder(LPCRECT prcBorder<BR>        , LPOLEINPLACEUIWINDOW pUIWindow, BOOL fFrameWindow);<BR>    HRESULT EnableModeless(BOOL fEnable);<BR>    };</code></pre>
<P>For the most part, these interfaces consist of various notifications that the container will send to the object when important things happen in the user interface. These events include deactivation of the object, resizing the object, performing an Undo operation, detecting a keyboard accelerator, changing window activation, resizing a window, and displaying or removing some sort of modal window.</P></font></body></HTML>
