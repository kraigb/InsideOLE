<HTML><HEAD><TITLE>Chapter 22 In-Place Activation (Visual Editing) and In-Place Containers</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Chapter 22 In-Place Activation (Visual EditingTM) and In-Place Containers</H1><P>Long ago, in an era of greater simplicity, when the OLE Design Specification was only 50 pages long, there was a new idea called in situ editing. Instead of forcing you to edit an embedded object in a separate server window, in situ editing—an extension of normal activation—let you edit an object while remaining in the context of the compound document. The Latin phrase in situ means "in the natural or original position." Simple enough.</P>
<P>But the marketing types at Microsoft looked at <I>in situ editing</I> and, with good, sound intentions, changed it to <I>in-place editing.</I> OK, that's cool. The change got rid of that funny Latin stuff and made the term more comprehensible to us programmers who didn't break 600 on the SAT verbal. Everyone understood and was happy to get working on it.</P>
<P>In a burst of pure reason, marketing figured that the word <I>editing</I> was much too specific for compound documents because certain objects—for example, video objects—are more apt to be <I>played</I> in place instead of being <I>edited</I>. This led to the term <I>activation,</I> so this new idea was rechristened <I>in-place activation</I>. But that wasn't the end of the matter. Marketing just can't leave well enough alone.</P>
<P>Along came the tide of "Visual This" and "Visual That"—Visual Basic, Visual C++, and so on and so forth. Everything suddenly had to be <I>visual</I> in some way. It was cool. It would hook end users the same way free T-shirts hook hungry programmers at software development conferences. Marketing rode the wave and brought on <I>visual editing,</I> even going as far as to slap on the prominent trademark symbol(&trade;).</P>
<P>Of course, with this latest term, the word <I>editing</I> again reared its ugly head, but then the name changes stopped. I fully expected <I>visual editing</I> to give way to <I>visual activation, </I>and after <I>visual</I> fell out of vogue, <I>visual act</I><I>ivation</I> would revert to <I>in situ activation </I>and then back to <I>in-place activation </I>because us programmers <I>still</I> can't break 600 on the SAT verbal.</P>
<P>So I stick with the name <I>in-place activation </I>for the technology that is the subject of this chapter and the next, calling it <I>in-place</I> simply for convenience. We'll start this chapter with a look at a typical in-place session for an embedded object, given that both the container and the object (and the object's server) support this capability. This will show us the in-place interfaces that are involved and how they work together to merge the user interface in a way that looks a little weird at first, but one that has proved itself in usability testing. Much of in-place activation is about merging the object's user interface with the container's. Doing this brings the object's tools to the object instead of taking the object to the tools.</P>
<P>We'll also examine some additional considerations, including keyboard accelerators, context-sensitive help, Undo operations, and the ability to have multiple in-place objects active at the same time. In this chapter, we'll see the implementation steps for an in-place–capable container, using Patron once again as our sample. Chapter 23 will explore the object side of the picture. These two chapters set the stage for OLE Controls because controls, being self-contained units of functionality, are almost <I>always </I>in-place active. And with controls, the term <I>in-place activation </I>certainly fits because I have a hard time understanding how I would <I>visually edit</I> a control. Maybe I still need to learn Latin.</P></font></body></HTML>
