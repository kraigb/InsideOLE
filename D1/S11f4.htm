<HTML><HEAD><TITLE>The Cache's IDataObject, IPersistStorage, and IViewObject2</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>The Cache's <I>IDataObject</I>, <I>IPersistStorage</I>, and <I>IViewObject2</I></H3><P>The presence of <I>IDataObject </I>describes the cache as a source of data. <I>GetData</I>, <I>GetDataHere</I>, and <I>QueryGetData </I>are implemented as you would expect and deal with the contents of the cache. <I>SetData </I>delegates to <I>IOleCache2::SetData</I>, as we'll see shortly, and format enumeration and advisory connections are not supported at all. On the other hand, <I>IPersistStorage</I> is fully implemented so that <I>Save </I>will write any data in the cache to separate streams (regardless of that data's native storage medium) and <I>Load </I>will read information from those streams back into the cache. Those streams are named "\002OlePres&lt;<I>xxx</I>&gt;", where &lt;<I>xxx</I>&gt; varies from 000 to 999. <I>IViewObject2 </I>is also fully implemented, which means a client can ask the cache to draw any presentation within it. In addition, the cache will notify the client through <I>IDataObject::SetData </I>or <I>IOleCache2::Cache</I> any time a view is changed. Overall, the behavior of the cache's <I>IDataObject</I>, <I>IPersistStorage</I>, and <I>IViewObject</I> interfaces is summarized in Tables 11-1, 11-2, and 11-3.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="123pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B><I>IDataObject</I><I><BR></I>Member Function</B></P></TD><TD VALIGN="TOP"><P><B>Behavior</B></P></TD></TR><TR><TD VALIGN="TOP"><P>DAdvise</P></TD><TD VALIGN="TOP"><P>Returns OLE_E_ADVISENOTSUPPORTED.</P></TD></TR><TR><TD VALIGN="TOP"><P>DUnadvise</P></TD><TD VALIGN="TOP"><P>Returns OLE_E_NOCONNECTION.</P></TD></TR><TR><TD VALIGN="TOP"><P>EnumDAdvise</P></TD><TD VALIGN="TOP"><P>Returns OLE_E_ADVISENOTSUPPORTED.</P></TD></TR><TR><TD VALIGN="TOP"><P>EnumFormatEtc</P></TD><TD VALIGN="TOP"><P>Returns E_NOTIMPL.</P></TD></TR><TR><TD VALIGN="TOP"><P>GetCanonicalFormatEtc</P></TD><TD VALIGN="TOP"><P>Returns E_NOTIMPL.</P></TD></TR><TR><TD VALIGN="TOP"><P>GetData</P></TD><TD VALIGN="TOP"><P>Attempts to find the data in the cache, which must use the mediums TYMED_HGLOBAL, TYMED_MFPICT, TYMED_GDI, TYMED_ISTORAGE, </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>and TYMED_ISTREAM.<I> </I>DV_E_TYMED is returned for any other medium. OLE_E_BLANK is returned for data that is not found in the cache.</P></TD></TR><TR><TD VALIGN="TOP"><P>GetDataHere</P></TD><TD VALIGN="TOP"><P>Same as for <I>GetData</I> but supports only TYMED_HGLOBAL, TYMED_ISTORAGE, and TYMED_ISTREAM.</P></TD></TR><TR><TD VALIGN="TOP"><P>QueryGetData</P></TD><TD VALIGN="TOP"><P>Returns NOERROR if the format is present in the cache; otherwise, returns S_FALSE.</P></TD></TR><TR><TD VALIGN="TOP"><P>SetData</P></TD><TD VALIGN="TOP"><P>Delegates to <I>IOleCache2::SetData</I>.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 11-1.</B></P>
<P><B>Behavior of the data cache's <I>IDataObject</I> interface.</B></P>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="107pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>IPersistStorage<BR>Member Function</B></P></TD><TD VALIGN="TOP"><P><B>Behavior</B></P></TD></TR><TR><TD VALIGN="TOP"><P>GetClassID</P></TD><TD VALIGN="TOP"><P>Returns E_NOTIMPL.</P></TD></TR><TR><TD VALIGN="TOP"><P>IsDirty</P></TD><TD VALIGN="TOP"><P>Returns S_OK if the cache contents have been changed; otherwise, returns S_FALSE.</P></TD></TR><TR><TD VALIGN="TOP"><P>InitNew</P></TD><TD VALIGN="TOP"><P>Returns NOERROR but saves the <I>IStorage</I> pointer, calling <I>AddRef</I> on it.</P></TD></TR><TR><TD VALIGN="TOP"><P>Load</P></TD><TD VALIGN="TOP"><P>Loads information about cached data from streams in <I>IStorage</I> and saves the <I>IStorage</I> pointer.<I> </I>No data is actually loaded until required through <I>IDataObject::GetData</I> or <I>IViewObject2::Draw</I>.</P></TD></TR><TR><TD VALIGN="TOP"><P>Save</P></TD><TD VALIGN="TOP"><P>Saves any presentations that have changed since the call to <I>Load</I>, as well as an information block describing what is cached.<I> </I>Data is stored in streams named "\002OlePres&lt;<I>xxx</I>&gt;", where &lt;<I>xxx</I>&gt; varies from 000 to 999.</P></TD></TR><TR><TD VALIGN="TOP"><P>SaveCompleted</P></TD><TD VALIGN="TOP"><P>Releases and replaces any held pointers as necessary and returns NOERROR.</P></TD></TR><TR><TD VALIGN="TOP"><P>HandsOffStorage</P></TD><TD VALIGN="TOP"><P>Releases any held pointers and returns NOERROR.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 11-2.</B></P>
<P><B>Behavior of the data cache's <I>IPersistStorage</I> interface.</B></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="104pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B><I>IViewObject2</I><I><BR></I>Member Function</B></P></TD><TD VALIGN="TOP"><P><B>Behavior</B></P></TD></TR><TR><TD VALIGN="TOP"><P>Draw</P></TD><TD VALIGN="TOP"><P>Attempts to draw using a presentation from the cache; otherwise, returns OLE_E_BLANK.</P></TD></TR><TR><TD VALIGN="TOP"><P>GetColorSet</P></TD><TD VALIGN="TOP"><P>Tries to determine the color set from the metafile or bitmap in the cache. Returns OLE_E_BLANK if there is no presentation; otherwise, returns NOERROR or S_FALSE, depending on the success of the function.</P></TD></TR><TR><TD VALIGN="TOP"><P>Freeze</P></TD><TD VALIGN="TOP"><P>Adds the aspect to an internal list that affects the behavior of <I>Draw</I> and returns NOERROR if successful or OLE_E_BLANK if not. Returns VIEW_S_ALREADY_FROZEN if this is a repeat request.</P></TD></TR><TR><TD VALIGN="TOP"><P>Unfreeze</P></TD><TD VALIGN="TOP"><P>Removes an entry from the internal list of frozen aspects and frees any duplicate presentation. Returns OLE_E_NOCONNECTION if the aspect was not frozen; otherwise, returns NOERROR.</P></TD></TR><TR><TD VALIGN="TOP"><P>SetAdvise</P></TD><TD VALIGN="TOP"><P>Saves the <I>IAdviseSink</I> pointer and returns NOERROR.</P></TD></TR><TR><TD VALIGN="TOP"><P>GetAdvise</P></TD><TD VALIGN="TOP"><P>Returns the last <I>IAdviseSink</I> from <I>SetAdvise</I> and returns NOERROR.</P></TD></TR><TR><TD VALIGN="TOP"><P>GetExtent</P></TD><TD VALIGN="TOP"><P>Returns the size of a known presentation (extents from a METAFILEPICT or the size of a bitmap) and returns NOERROR; otherwise, returns OLE_E_BLANK.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 11-3.</B></P>
<P><B>Behavior of the data cache's <I>IViewObject2</I> interface.</B></P></font></body></HTML>
