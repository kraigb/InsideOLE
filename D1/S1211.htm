<HTML><HEAD><TITLE>Implement a Drop Source Object with IDropSource</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Implement a Drop Source Object with <I>IDropSource</I></H3><P>As mentioned earlier, Cosmo's drop source object is <I>CDropSource </I>in DROPSRC.CPP. Because Cosmo's needs are trivial, so is the implementation of the important <I>IDropSource </I>members:</P>
<P><BR></P>
<pre><code>STDMETHODIMP CDropSource::QueryContinueDrag(BOOL fEsc<BR>    , DWORD grfKeyState)<BR>    {<BR>    if (fEsc)<BR>        return ResultFromScode(DRAGDROP_S_CANCEL);<BR><BR>    if (!(grfKeyState &amp; MK_LBUTTON))<BR>        return ResultFromScode(DRAGDROP_S_DROP);<BR><BR>    return NOERROR;<BR>    }<BR><BR><BR>STDMETHODIMP CDropSource::GiveFeedback(DWORD dwEffect)<BR>    {<BR>    return ResultFromScode(DRAGDROP_S_USEDEFAULTCURSORS);<BR>    }</code></pre>
<P>The arguments to <I>QueryContinueDrag</I> describe the current keyboard and mouse states. The <I>fEsc </I>flag will be TRUE if the Esc key is pressed, meaning that we cancel the operation by returning DRAGDROP_S_CANCEL. This tells <I>DoDragDrop </I>to clean up and end the operation without the exchange of any data having occurred. The <I>grfKeyState </I>argument contains the states of the Ctrl, Alt, and Shift keys as well as the states of the left, middle, and right mouse buttons. All of these have corresponding MK_* values from WINDOWS.H (MK_LBUTTON, MK_RBUTTON, MK_MBUTTON, MK_SHIFT, and MK_CONTROL) except for MK_ALT, which is defined by OLE itself. The flags that appear in <I>grfKeyState </I>indicate the keys and buttons that are currently pressed.</P>
<P>Cosmo's implementation above checks whether the left mouse button is no longer pressed, and if it is, Cosmo returns DRAGDROP_S_DROP to cause a call to <I>IDropTarget::Drop</I> in order for <I>DoDragDrop </I>to return successfully. You can use any mouse button to cause a drop, modified with the Alt key if desired. However, you cannot use Ctrl and Shift because they modify the operation as a whole and might change during the operation without causing a drop. They are included in <I>grfKeyState </I>for the source's information. In any case, if the source does not detect appropriate drop conditions, it returns NOERROR from <I>QueryContinueDrag </I>to continue the operation.</P>
<P>If you think <I>QueryContinueDrag </I>is trivial (as it will be for most applications!), <I>GiveFeedback </I>is even simpler. If you want to use the standard mouse cursors, return DRAGDROP_S_USEDEFAULTCURSORS as shown earlier, which tells <I>DoDragDrop </I>to call the Windows function <I>SetCursor </I>with the appropriate mouse cursor. Otherwise, you can load your own cursor and call <I>SetCursor </I>yourself. If you need to know where the mouse is, call the Windows function or <I>GetCursorPos.</I></P>
<P><B>N</B><B>ote</B><B>:</B>  GiveFeedback is called many times during the course of an operation, so you should keep the code optimized and preload any needed cursors elsewhere to avoid the overhead here.</P></font></body></HTML>
