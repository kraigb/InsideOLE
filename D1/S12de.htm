<HTML><HEAD><TITLE>Create, Register, and Revoke a File Moniker</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Create, Register, and Revoke a File Moniker</H3><P>Cosmo manages its file moniker in the <I>m</I><I>_</I><I>pMoniker </I>variable of its <I>CCosmoDoc </I>class. It creates and registers this moniker only when it has a known filename for the document itself. A new, untitled document is not registered as running. When you load a file with a known name or save a file, Cosmo ends up in <I>CCosmoDoc::Rename</I>. Here we revoke and release any old moniker and then create and register a new one for the new filename:</P>
<P><BR></P>
<pre><code>void CCosmoDoc::Rename(LPTSTR pszFile)<BR>    {<BR>    LPMONIKER   pmk;<BR><BR>    //We don't need to change base class, just augment....<BR>    CDocument::Rename(pszFile);<BR><BR>    //Unregister old moniker (m_dwRegROT set to 0).<BR>    INOLE_RevokeAsRunning(&amp;m_dwRegROT);<BR><BR>    ReleaseInterface(m_pMoniker);<BR><BR>    if (NULL!=pszFile)<BR>        {<BR>        CreateFileMoniker(pszFile, &amp;pmk);<BR><BR>        if (NULL!=pmk)<BR>            {<BR>            m_pMoniker=pmk;     //pmk AddRef'd in CreateFileMoniker<BR>            INOLE_RegisterAsRunning(m_pFigure, m_pMoniker<BR>                , 0, &amp;m_dwRegROT);<BR><BR>            m_pFigure-&gt;SendAdvise(OBJECTCODE_RENAMED);<BR>            }<BR>        }<BR><BR>    return;<BR>    }</code></pre>
<P>The helper functions from INOLE.DLL, <I>INOLE</I><I>_</I><I>RegisterAsRunning </I>and <I>INOLE</I><I>_</I><I>RevokeAsRunning</I>, are wrappers for calls to <I>IRunningObjectTable</I>. (See INOLE\HELPERS.CPP.) A side effect of <I>INOLE</I><I>_</I><I>RevokeAsRunning</I> is that it sets our registration key to 0 to indicate a successful revoke. <I>INOLE</I><I>_</I><I>RegisterAsRunning</I> will actually call <I>INOLE</I><I>_</I><I>RevokeAsRunning </I>for us if <I>m</I><I>_</I><I>dwRegROT</I> is nonzero when we make the call. I'm not using this feature here; I want to show the steps explicitly.</P>
<P>When we change the name of the running object in this way, we have to advise any linked objects connected to this source that the name has changed. This is the purpose of calling <I>IAdviseSink::OnRename</I>. Containers themselves don't care about this notification, but the linking handler does. It uses the notification to inform the container of changes to the source.</P>
<P>Anyway, Cosmo sends this notification through <I>IOleAdviseHolder::SendOnRename</I>, passing the new moniker, which gets forwarded to the necessary advise sinks:</P>
<P><BR></P>
<pre><code>//In CFigure::SendAdvise, FIGURE.CPP<BR>case OBJECTCODE_RENAMED:<BR>    m_pMoniker=m_pDoc-&gt;m_pMoniker;  //For IOleObject::GetMoniker<BR>    m_dwRegROT=m_pDoc-&gt;m_dwRegROT;  <BR><BR>    if (NULL!=m_pIOleAdviseHolder)<BR>        m_pIOleAdviseHolder-&gt;SendOnRename(m_pMoniker);<BR><BR>    break;</code></pre>
<P>In response to this, the linking handlers will update their internal monikers so that the link remains intact.</P></font></body></HTML>
