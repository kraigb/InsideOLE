<HTML><HEAD><TITLE>Implement Site Shading and Draw the Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Implement Site Shading and Draw the Object</H3><P>The user interface guidelines for OLE indicate that the container should draw a hatch pattern across its site when the object in that site is active—that is, when it is open in another window. This shading appears as shown in Figure 17-6. We add this shading when <I>IOleClientSite::OnShowWindow(TRUE) </I>is called and remove it when the same function is called with FALSE:</P>
<P>    <img src="f17dd06p.gif"></P>
<P><B>Figure 17-6.</B></P>
<P><B>The typical appearance of a site with a loaded object and shaded with an open object. The sizing handles are optional.</B></P>
<P>Again, Patron accomplishes this shading in <I>CTenant::ShowAsOpen</I>, for which the <I>fOpen </I>argument specifies to shade or not to shade:</P>
<P><BR></P>
<pre><code>void CTenant::ShowAsOpen(BOOL fOpen)<BR>    {<BR>    BOOL        fWasOpen;<BR>    DWORD       dwState;<BR>    RECT        rc;<BR>    HDC         hDC;<BR><BR>    fWasOpen=(BOOL)(TENANTSTATE_OPEN &amp; m_dwState);<BR><BR>    dwState=m_dwState &amp; ~TENANTSTATE_OPEN;<BR>    m_dwState=dwState œ ((fOpen) ? TENANTSTATE_OPEN : 0);<BR><BR>    //If this was not open, just hatch; otherwise, repaint.<BR>    if (!fWasOpen &amp;&amp; fOpen)<BR>        {<BR>        RECTFROMRECTL(rc, m_rcl);<BR>        RectConvertMappings(&amp;rc, NULL, TRUE);<BR>        OffsetRect(&amp;rc, -(int)m_pPG-&gt;m_xPos, -(int)m_pPG-&gt;m_yPos);<BR><BR>        hDC=GetDC(m_hWnd);<BR>        UIDrawShading(&amp;rc, hDC, UI_SHADE_FULLRECT, 0);<BR>        ReleaseDC(m_hWnd, hDC);<BR>        }<BR><BR>    if (fWasOpen &amp;&amp; !fOpen)<BR>        Repaint();<BR><BR>    return;<BR>    }</code></pre>
<P>Besides doing the shading, the tenant also remembers the open state with TENANTSTATE_OPEN. This flag is used in its drawing function (<I>CTenant::Draw</I>) so that the shading is preserved across repaints.</P>
<P>The hatching itself is accomplished using a helper function, <I>UIDrawShading</I>, that you'll find in the INOLE.DLL library. (Sources are in INOLE\UIEFFECT.CPP.) This function basically creates a hatch brush and paints over a given rectangle with the GDI call <I>PatBlt </I>using an ROP code of <I>0x00A000C9</I>, which performs the logical AND operation between the black pattern and whatever is on <I>hDC</I>. We get a black hatch pattern across whatever is underneath. Because this hatching is destructive, going from an open state into a loaded state requires that we repaint the entire object to remove the hatching. Fortunately for Patron, <I>CTenant::Repaint</I> does exactly that.</P>
<P>Drawing and printing an object in a site always happen inside <I>CTenant::Draw</I>. This does little more than call <I>IViewObject2::Draw</I>, but it also includes grab handles and the hatch pattern as necessary. An important point to remember is that site shading applies only to on-screen presentations! Do not draw such shading if you are sending information to the printer. That would certainly look strange.</P></font></body></HTML>
