<HTML><HEAD><TITLE>Round Out IOleClientSite</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Round Out <I>IOleClientSite</I></H3><P>We need two more pieces of implementation before we can call a linking to embedding container complete. Remember <I>IOleClientSite::GetContainer</I>? When a container supports linking to the objects in its document, this function must return the <I>IOleContainer </I>interface for the immediate container of the objects themselves. In Patron's case, this is the <I>IOleItemContainer</I> interface on the page object—remember that <I>IOleItemContainer </I>is derived from <I>IOleContainer</I>. Patron's implementation of <I>IOleClientS</I><I>ite::GetContainer </I>does the following:</P>
<P><BR></P>
<pre><code>STDMETHODIMP CImpIOleClientSite::GetContainer(LPOLECONTAINER FAR<BR>    *ppContainer)<BR>    {<BR>    PCPage  pPage;<BR><BR>    *ppContainer=NULL;<BR><BR>    m_pTen-&gt;m_pPG-&gt;IPageGetFromID((DWORD)-1, &amp;pPage, FALSE);<BR><BR>    if (NULL!=pPage)<BR>        {<BR>        return pPage-&gt;QueryInterface(IID_IOleItemContainer<BR>            , (PPVOID)ppContainer);<BR>        }<BR><BR>    return ResultFromScode(E_FAIL);<BR>    }</code></pre>
<P>The function <I>CPages::IPageGetFromID</I> conveniently returns to us the current <I>CPage</I> pointer, through which we can call <I>QueryInterface</I>.</P>
<P>The other change we must make is a modification to <I>IOleClientSite::ShowObject</I>. In Chapters 17 and 20, this container function was responsible only for bringing the object into view. Because Patron can now be launched with <I>-Embedding</I> on the command line, the main window might not be visible. Thus, to truly show the object, <I>ShowObject</I> must now also make the frame window visible:</P>
<P><BR></P>
<pre><code>STDMETHODIMP CImpIOleClientSite::ShowObject(void)<BR>    {<BR>    HWND        hWnd, hWndT;<BR><BR>    m_pTen-&gt;ShowYourself();<BR><BR>    //For linking to embeddings, now show main window.<BR>    hWndT=GetParent(m_pTen-&gt;m_hWnd);<BR><BR>    while (NULL!=hWndT)<BR>        {<BR>        hWnd=hWndT;<BR>        hWndT=GetParent(hWnd);<BR>        }<BR><BR>    ShowWindow(hWnd, SW_SHOWNOACTIVATE);<BR>    return NOERROR;<BR>    }</code></pre>
<P>The use of SW_SHOWNOACTIVATE in the <I>ShowWindow </I>call means that Patron will not be brought to the foreground when we show the main window. This prevents Patron from obscuring the linking container that the user is working in. We want to make the intermediate container visible but not obnoxious.</P>
<P>A final note about containers and linking to embeddings is that unbeknownst to the container, OLE will establish advises between the other linking container and the embedded object in the running server. When you make a change to the object in the server, you will see the object change in both containers, as a user would expect. What appears to be happening is that the user makes a change to the embedded object, and that change is reflected in the immediate container. This amounts to a change to the object in the container that the second container is linked to, so the change is also reflected in the second container. But the immediate container doesn't have to do anything to make this happen: OLE will automatically connect the embedded object to the linked object in the second container.</P></font></body></HTML>
