<HTML><HEAD><TITLE>The OLE Data Cache</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>The OLE Data Cache</H2><P>Clients often find it useful, especially in the context of OLE Documents, to cache an object's image or presentation for use later when that object is no longer available.<I> </I>To assist in this matter, OLE provides a <I>data cache</I> service, which consists of one object that implements <I>IDataObject</I>, <I>IPersistStorage</I>, <I>IViewObject2</I>, <I>IOleCache2</I> (derived from <I>IOleCache</I>), and <I>IOleCacheControl. </I>The data cache is accessed through the OLE API function <I>CreateDataCache</I>:</P>
<P><BR></P>
<pre><code>HRESULT CreateDataCache(IUnknown *pUnkOuter, REFCLSID rclsid<BR>    , REFIID riid, void **ppv)</code></pre>
<P>Here <I>pUnkOuter </I>allows another object to aggregate on the cache, <I>rclsid </I>represents the CLSID used to generate icon labels (this is usually CLSID_NULL), and <I>riid </I>and <I>ppv </I>are the same as for <I>QueryInterface</I>. The reason the data cache supports aggregation so directly is that in-process objects commonly expose one or more of the cache's own interfaces directly (for example, <I>IPersistStorage </I>or <I>IDataObject</I>) when the object doesn't want to modify the behavior of the cache itself.</P></font></body></HTML>
