<HTML><HEAD><TITLE>Opportunity</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Opportunity</H2><P>You may or may not agree with the future I've described here. I cannot say that it is possible, nor can I guarantee that I've described it perfectly. Nevertheless, I believe it to be a worthy pursuit and the purpose of having an integration technology such as OLE in the first place. But OLE itself is simply the low-level plumbing that enables components to communicate. To realize a true component software environment requires a large number of components and a large number of tools든ach appropriate for different types of end users듮o integrate components into applications.</P>
<P>Herein lies the tremendous opportunity of component software: the market would no longer be one in which you must have a huge feature-laden application in order to compete. Instead, computing would be formed by a partnership of components that themselves come in many shapes and sizes. In other words, a component system, just as nature and society, requires diversity. There will be a great need for components that do nothing more than provide a service of some sort드 library of powerful functions for calculations, formatting, rendering, and so on. There will be a great need for components that encapsulate business processes듪nes that incorporate specific functionality around specific content. There will also be a need for content-oriented components, things such as compound document objects and OLE controls, which are the types of components an end user might actually see.</P>
<P>There is not only a need for components but also a need for the development tools to build them and for the tools to integrate components together. Some tools will be targeted toward today's developers듮he ones creating the low-level components in the first place. Others will be targeted toward corporate developers, who will pull together low-level, mid-level, and high-level components to build enterprise-wide solutions. Tools will also be targeted to end users for the purpose of building documents or high-level and specific applications. At this point in the history of the computer industry, we have only primitive tools드nd very few of them. Where will the new tools come from? Perhaps from your own company.</P>
<P>Many of these components, and even some of the tools, will come from what I call the <I>componentization</I> of today's applications. When I look at the word processor I'm using to write this chapter, it has a tremendous amount of useful functionality and information that is available only to this one application. Componentization means making such elements available to everything else in the system in a reusable manner. OLE is <I>the</I> technology for doing this듪nce you analyze the functionality and content that is hidden within an application, most of the interfaces you'd need for creating objects that share that functionality and content have already been defined. New standard and custom interfaces, which fit so easily into the existing OLE architecture, will in time fill any gaps that exist. I fully expect that there's another book somewhere within this idea of componentization.</P>
<P>In any case, realizing true component software is going to take more work than one company can handle, but OLE is already here as the first step in the process. OLE is the beginning of a long evolution in the way we use computers and in the way in which we create, use, and sell software. But this is not merely about Microsoft's success들t's about yours. Component software is not just a way to reorganize existing market share between companies; it's an innovation that will lead to an explosive expansion of the entire software industry. There will be a great demand for many components and tools and, yes, even for shrink-wrapped component-based applications. I believe that this expansion of the market will happen faster than a company such as Microsoft can grow to fill in the gaps. This leaves a tremendous amount of room for new companies to emerge and for everyone to win.</P></font></body></HTML>
