<HTML><HEAD><TITLE>Update Links on Loading a Document</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Update Links on Loading a Document</H3><P>Two final requirements make a linking container complete. First, you should call <I>IOleLink::BindIfRunning </I>whenever you load a linked object. This is done automatically, for some odd reason, if you pass your <I>IOleClientSite </I>pointer to <I>OleLoad</I>. Patron does not do this, so we make the call explicitly in <I>CTenant::ObjectInitialize</I>:</P>
<P><BR></P>
<pre><code>BOOL CTenant::ObjectInitialize(LPUNKNOWN pObj, LPFORMATETC pFE<BR>    , DWORD dwData)<BR>    {<BR>    HRESULT         hr;<BR>    LPOLELINK       pIOleLink=NULL;<BR><BR>    §<BR><BR>    if (SUCCEEDED(pObj-&gt;QueryInterface(IID_IOleLink<BR>        , (PPVOID)&amp;pIOleLink)))<BR>        {<BR>        LPMONIKER   pmk;<BR><BR>        hr=pIOleLink-&gt;GetSourceMoniker(&amp;pmk);<BR><BR>        if (FAILED(hr) œœ NULL==pmk)<BR>            m_tType=TENANTTYPE_STATIC;<BR>        else<BR>            {<BR>            m_tType=TENANTTYPE_LINKEDOBJECT;<BR>            pmk-&gt;Release();<BR><BR>            //Connect to the object if source is running.<BR>            pIOleLink-&gt;BindIfRunning();<BR>            }<BR><BR>        pIOleLink-&gt;Release();<BR>        }<BR> <BR>    §<BR>    }</code></pre>
<P>The second requirement is to update any automatic links when you load them from storage. This ensures that objects appear as current as possible in the document. So when opening a document (or in Patron's case, a page), we must check to see whether the document contains any automatic links. If it does have any, we call <I>OleUIUpdateLinks</I>. This function displays a dialog box with a progress indicator, as shown in Figure 20-6.</P>
<P>    <img src="f20dd06p.gif"></P>
<P><B>Figure 20-6.</B></P>
<P><B>The Update Links dialog box displayed through <I>O</I><I>leUIUpdateLinks.</I></B></P>
<P><I>OleUIUpdateLinks</I> is a bit different from other OLE UI functions in that it doesn't take a structure pointer. The reason for this is basically that the function does not provide for customization. What <I>OleUIUpdateLinks</I> does take, however, is a pointer to your <I>IOleUILinkContainer</I> interface, an HWND of the owner window, a caption for the title bar, and a count of how many links it has to update. As shown beginning on the following page, Patron invokes this dialog inside <I>CPage::Open</I> after it has loaded all tenants.</P>
<P><BR></P>
<pre><code>§<BR><BR>UINT                    cLinks;<BR>LPOLELINK               pIOleLink;<BR>LPUNKNOWN               pIUnknown;<BR>UINT                    uRet;<BR>OLEUIEDITLINKS          el;<BR>PCIOleUILinkContainer   pIUILinks;<BR>HWND                    hWndDoc;<BR><BR>§<BR><BR>//First, count the number of automatic links.<BR>cLinks=0;<BR><BR>for (i=0; i &lt; m_cTenants; i++)<BR>    {<BR>    if (TenantGet(i, &amp;pTenant, FALSE))<BR>        {<BR>        DWORD       dw;<BR><BR>        pTenant-&gt;ObjectGet(&amp;pIUnknown);<BR>        hr=pIUnknown-&gt;QueryInterface(IID_IOleLink<BR>            , (PPVOID)&amp;pIOleLink);<BR>        pIUnknown-&gt;Release();<BR><BR>        if (FAILED(hr))<BR>            continue;<BR><BR>        pIOleLink-&gt;GetUpdateOptions(&amp;dw);<BR>        pIOleLink-&gt;Release();<BR><BR>        if (OLEUPDATE_ALWAYS==dw)<BR>            cLinks++;<BR>        }<BR>    }<BR><BR>//If we have any automatic links, invoke the update dialog.<BR>if (0==cLinks)<BR>    return TRUE;<BR><BR>//Create an IOleUILinkContainer instantiation.<BR>if (!m_pPG-&gt;GetUILinkContainer(&amp;pIUILinks))<BR>    return TRUE;    //Guess we can't update; oh well.<BR><BR>hWndDoc=GetParent(m_hWnd);<BR>LoadString(m_pPG-&gt;m_hInst, IDS_CAPTION, szCap, sizeof(szCap));<BR><BR>if (!OleUIUpdateLinks(pIUILinks, hWndDoc, szCap, cLinks))<BR>    {<BR>    /*<BR>     * If updating failed, ask to show Links dialog. NOTE:<BR>     * OleUIPromptUser has variable wsprintf argument list<BR>     * after hWnd parameter!  Use appropriate typecasting!<BR>     */<BR>    uRet=OleUIPromptUser(IDD_CANNOTUPDATELINK, hWndDoc, szCap);<BR><BR>    if (IDC_PU_LINKS==uRet)<BR>        {<BR>        //Display Links dialog.<BR>        memset(&amp;el, 0, sizeof(el));<BR>        el.cbStruct=sizeof(el);<BR>        el.hWndOwner=hWndDoc;<BR>        el.lpOleUILinkContainer=(LPOLEUILINKCONTAINER)pIUILinks;<BR>        OleUIEditLinks((LPOLEUIEDITLINKS)&amp;el);<BR>        }<BR>    }<BR><BR>m_pPG-&gt;m_fDirty=pIUILinks-&gt;m_fDirty;<BR>pIUILinks-&gt;Release();<BR><BR>§</code></pre>
<P>Our first task is to count how many automatic links are on this page (which is the document for Patron's purposes) by checking the types of all tenants on the page and incrementing the variable <I>cLinks</I> for each. If <I>cLinks</I> is 0 at the end, there are no links and there's nothing we need to do. Otherwise, we instantiate the <I>IOleUILinkContainer</I> interface, using exactly the same implementation we created for the Links dialog box. This was completely intentional, but note that <I>OleUIUpdateLinks</I> will use only the <I>GetNextLink</I> and <I>UpdateLink</I> members of that interface. We also grab the window handle of the document and a caption string and finally call <I>OleUIUpdateLinks</I>.</P>
<P>The progress dialog box will update its indicator bar and the displayed percentage every time it finishes updating a link. If it fails on any one of them, it will finish updating the remaining links, but it will then return FALSE instead of TRUE. A FALSE return value means the application should display the message shown in Figure 20-7 on the following page. This gives the user the option of going directly to the Links dialog box to correct any problems. The OLE UI Library even has a function named <I>OleUIPromptUser</I> to create this prompt (because <I>MessageBox</I> can't provide a Links button), which returns IDC_PU_LINKS if the user chooses the Links button. In response, the application invokes the Links dialog box exactly as before, passing our <I>IOleUILinkContainer</I> object.</P>
<P>    <img src="f20dd07p.gif"></P>
<P><B>Figure 20-7.</B></P>
<P><B>The message displayed from <I>OleUIPromptUser (IDD</I><I>_</I><I>CANNOTUPDATELINK)</I>.</B></P>
<P>One last item, and then we're finished. Be sure to update your document's dirty flag after calling <I>OleUIUpdateLinks</I> because things might have changed that do require a save.</P>
<P>So now you can link to the world, no matter how complicated the moniker. If links are broken, you can repair them with the Links dialog box. Your container stays current with all automatic links by updating them as you load those objects. You want to be sure now that this last feature works and that it can properly invoke the Links dialog box when necessary.</P></font></body></HTML>
