<HTML><HEAD><TITLE>The Convert Dialog Box: Conversion and Emulation</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>The Convert Dialog Box: Conversion and Emulation</H3><P>Earlier in this chapter, we saw how a server can mark itself as capable of converting data from another server or capable of emulating another server. In OLE Documents, conversion and emulation involve more than simply mapping the CLSIDs because persistent storage is involved. An emulating server must not only be functionally equivalent to those servers it wants to emulate, but it must also be able to both read and write foreign storage formats. A server that can read foreign data and then write it in its own format can convert objects from other servers to its own type, changing the persistent object's CLSID. The way a server handles this is covered in Chapter 18. In that chapter's sample, Cosmo is capable of converting and emulating data from its OLE 1 version server as well as from the Polyline component that we'll work with in Chapter 19.</P>
<P>To facilitate conversion and emulation, a container is responsible for providing the user interface necessary to show the user what conversion and emulation support exists for a given object type. This allows a user to create a compound document with one type of object from one particular server and give it to another user who does not have that server installed. When the second user attempts to activate the object, no server will be available. In that case, the container can display the Convert dialog box, shown in Figure 17-9 on the following page, through which the user can either permanently convert the object to a different type or indicate which server to use to emulate that object type not only now but for all such encounters in the future.</P>
<P>    <img src="f17dd09p.gif"></P>
<P><B>Figure 17-9.</B></P>
<P><B>The Convert dialog box invoked for a Polyline object (Chapter 19) showing that Cosmo (Chapter 18) can convert it.</B></P>
<P>For a container, conversion means that we have to unload the object, mark it with a new CLSID, reload it using the new server, and have that server munge the storage into the new object type. This is the Convert To case. Emulation requires making the necessary <I>TreatAs</I> entries in the registry and also that we unload the object completely and then reload it to load any handlers needed by the new type. This is the Activate As case. In addition, the Convert dialog box can be used to simply switch between DVASPECT_ICON and DVASPECT_CONTENT views of an object.</P>
<P>In all of these cases, we must first invoke the Convert dialog with <I>OleUIConvert</I>. This happens in response to two events: either the user selects the Convert menu item from the object's verb menu or some other attempt to activate the object failed and we now want to give the user the chance to convert or emulate. In Patron, either case winds up in the function <I>CPage::ConvertObject</I>, in which the <I>fNoServer </I>argument, when TRUE, specifies that we're coming here because of a failed activation. In all honesty, Patron doesn't use this flag at all, but it demonstrates what you would do in that case:</P>
<P><BR></P>
<pre><code>BOOL CPage::ConvertObject(HWND hWndFrame, BOOL fNoServer)<BR>    {<BR>    HRESULT         hr;<BR>    OLEUICONVERT    ct;<BR>    TENANTTYPE      tType;<BR>    FORMATETC       fe;<BR>    TENANTINFO      ti;<BR>    UINT            uRet;<BR>    HCURSOR         hCur;<BR>    BOOL            fActivate=fNoServer;<BR>    RECTL           rcl;<BR><BR>    [Validation; exit immediately for static objects.]<BR><BR>    //Get object information we might want.<BR>    m_pTenantCur-&gt;GetInfo(&amp;ti);<BR><BR>    //Fill the structure.<BR>    memset(&amp;ct, 0, sizeof(ct));<BR>    ct.cbStruct=sizeof(OLEUICONVERT);<BR>    ct.hWndOwner=hWndFrame;<BR>    ct.fIsLinkedObject=FALSE;<BR>    ct.dvAspect=ti.fe.dwAspect;<BR><BR>    m_pTenantCur-&gt;ObjectClassFormatAndIcon(&amp;ct.clsid, &amp;ct.wFormat<BR>        , &amp;ct.lpszUserType, &amp;ct.hMetaPict, &amp;ct.lpszDefLabel);<BR><BR>    uRet=OleUIConvert(&amp;ct);<BR><BR>    [Code to handle the three cases goes here.]<BR><BR>    CoTaskMemFree((void*)ct.lpszUserType);<BR>    INOLE_MetafilePictIconFree(ct.hMetaPict);    <BR>    return TRUE;<BR>    }</code></pre>
<P>The function <I>CTenant::ObjectClassFormatAndIcon </I>retrieves information about the object needed in the dialog: the CLSID, the format of the data (a clipboard format, whatever would appear in the registry under a server's Conversion entries), a string with the object's user type, the current iconic presentation (if any), and a default label for the icon. The tenant uses the helper function <I>INOLE</I><I>_</I><I>GetUserTypeOfClass </I>and the OLE API function <I>OleGetIconOfClass </I>to retrieve this information. You can see the details in the source code.</P>
<P>Now the Convert dialog box, inside <I>OleUIConvert</I>, will display any other servers that have registered conversion formats matching the values in the <I>wFormat </I>field of OLEUICONVERT. This may, in fact, be an empty list, and if you want to prevent the user from possibly seeing an empty list, you can call the function <I>OleUICanConvertOrActivateAs</I>, using the result to disable the Convert menu in the first place. I don't use this function in Patron because we change iconic aspects through the Convert dialog box.</P>
<P>Anyway, in the dialog the user can either change the icon, select a new format to convert to, or choose to emulate the existing object with a new server. These three cases are differentiated by the <I>dwFlags </I>field in the OLEUICONVERT<I> </I>structure on return. We'll see what we do in response to each, but first remember that in all of these cases, the flag <I>m</I><I>_</I><I>fRepaintEnabled </I>in <I>CTenant </I>is used to suppress repaints through this whole process because we might be unloading, reloading, and running servers. Turning off repaints is a great way to cut down on flicker.</P>
<H4><A NAME="sec0"></A>Switch Display Aspects</H4><P>The first thing we do when we get back from the Convert dialog box in <I>CPage::ConvertObject </I>is execute the following code:</P>
<P><BR></P>
<pre><code>if ((DVASPECT_ICON==ct.dvAspect &amp;&amp; ct.fObjectsIconChanged)<BR>    œœ ct.dvAspect!=ti.fe.dwAspect)<BR>    {<BR>    HGLOBAL     hMem=NULL;<BR><BR>    //Only pass non-NULL handle for icon aspects.<BR>    if (DVASPECT_ICON==ct.dvAspect)<BR>        hMem=ct.hMetaPict;<BR><BR>    m_pPG-&gt;m_fDirty=m_pTenantCur-&gt;SwitchOrUpdateAspect(hMem<BR>        , FALSE);<BR>    }</code></pre>
<P>This code handles two cases: either we switched display aspects or we simply changed the icon, leaving the aspect the same. (The latter is indicated with the Convert dialog box's <I>fObjectsIconChanged</I> flag.) <I>CTenant::SwitchOrUpdateAspect </I>handles both cases. In the former, it switches the contents of the cache, getting an update from the object if necessary. In the second case, it merely stuffs the new icon in the cache using the helper function <I>INOLE</I><I>_</I><I>SetIconInCache. </I>All of this is again basic cache manipulation.</P>
<P>When we do change the aspect, the tenant reinitializes its size using <I>IViewObject2::GetE</I><I>xtent </I>or <I>IOleObject::GetExtent</I>. When we switch to an icon, we want the tenant to show up with a reasonable size for the icon. Switching back to a content aspect should revert to a larger object size.</P>
<H4><A NAME="sec1"></A>Handle the Convert To Case</H4><P>If the end user selects Convert To in the dialog box and then chooses OK, <I>OleUIConvert</I> will return with CF_SELECTCONVERTTO in the <I>dwFlags</I> field. A container must then execute four steps:</P>
<P>Unload the object, taking it back to the passive state.</P>
<P>Modify the class and format saved in the object's persistent storage by calling <I>WriteClassStg</I>, <I>WriteFmtUserTypeStg</I>, and <I>SetConvertStg</I>.</P>
<P>Reload the object with <I>OleLoad</I> and force an update. (This means set the document's dirty flag and force a repaint.)</P>
<P>If the Convert dialog box was invoked as a result of a failed activation, activate the object now.</P>
<P>These steps can be seen in the following code, taken from Patron's <I>CPage::ConvertObject</I>:</P>
<P><BR></P>
<pre><code>BOOL            fActivate=fNoServer;<BR>RECTL           rcl;<BR>§<BR>if ((CF_SELECTCONVERTTO &amp; ct.dwFlags)<BR>    &amp;&amp; ct.clsid!=ct.clsidNew)<BR>    {<BR>    LPSTORAGE   pIStorage;<BR><BR>    m_pTenantCur-&gt;StorageGet(&amp;pIStorage);<BR>    m_pTenantCur-&gt;Close(TRUE);<BR><BR>    hr=INOLE_DoConvert(pIStorage, ct.clsidNew);<BR>    pIStorage-&gt;Commit(STGC_DEFAULT);<BR>    pIStorage-&gt;Release();<BR><BR>    if (SUCCEEDED(hr))<BR>        {<BR>        LPUNKNOWN   pObj;<BR>        LPOLEOBJECT pIOleObject;<BR><BR>        //Reload and update.<BR>        m_pTenantCur-&gt;Load(m_pIStorage, &amp;ti);<BR><BR>        m_pTenantCur-&gt;ObjectGet(&amp;pObj);<BR>        pObj-&gt;QueryInterface(IID_IOleObject<BR>            , (PPVOID)&amp;pIOleObject);<BR>        pIOleObject-&gt;Update();<BR>        pIOleObject-&gt;Release();<BR>        pObj-&gt;Release();<BR>        }<BR><BR>    m_pPG-&gt;m_fDirty=TRUE;<BR>    }<BR><BR>m_pTenantCur-&gt;Repaint();<BR><BR>if (fActivate)<BR>    m_pTenantCur-&gt;Activate(OLEIVERB_SHOW);</code></pre>
<P>It's necessary to close and reload the object because the new class we're converting to might have a specific object handler, and we have to be sure that handler is now loaded for this object. The process of taking the object to the passive state and then reloading it does the trick.</P>
<P>The helper function <I>INOLE</I><I>_</I><I>DoConvert </I>handles the calls to <I>WriteClassStg</I>,<I> WriteFmtUserTypeStg</I>,<I> </I>and <I>SetConvertStg </I>for us. The latter function, which we haven't seen before, specifically marks the <I>IStorage</I> for this object as being converted to a new CLSID, which a server will use to detect that conversion is happening when it loads the object data in its <I>IPersistStorage::Load. </I>We'll see this in Chapter 18.</P>
<P>After we have marked the object's storage appropriately, we can reload the object (<I>CTenant::Load</I>) and update it with <I>IOleObject::Update</I>, which will send <I>IAdviseSink::OnViewChange </I>notifications as necessary. The final step is that if we invoked the Convert dialog because an activation failed (REG_E_CLASSNOTREG or CO_E_APPNOTFOUND from <I>IOleObject::DoVerb</I>), we should not activate the newly converted object because that's what the user wanted to do originally.</P>
<H4><A NAME="sec2"></A>Handle the Activate As Case</H4><P>The Convert dialog box might also return the CF_SELECTACTIVATEAS in <I>dwFlags</I>, in which case, we need to perform the following four steps:</P>
<P>Add the <I>TreatAs</I> entry in the registry by calling call <I>CoTreatAsClass</I>.</P>
<P>Unload all objects of the old CLSID that you have loaded. You can do this before step 1 if necessary.</P>
<P>Reload all the unloaded objects as necessary.</P>
<P>Set your document's dirty flag to TRUE, activate the current object, and repaint.</P>
<P>These steps also are shown in the code from Patron's <I>CPage::ConvertObject</I>:</P>
<P><BR></P>
<pre><code>BOOL            fActivate=fNoServer;<BR><BR>if (CF_SELECTACTIVATEAS &amp; ct.dwFlags)<BR>   {<BR>    hr=CoTreatAsClass(ct.clsid, ct.clsidNew);<BR><BR>    if (SUCCEEDED(hr))<BR>        {<BR>        LPTENANT    pTenant;<BR>        UINT        i;<BR><BR>        for (i=0; i &lt; m_cTenants; i++)<BR>            {<BR>            if (TenantGet(i, &amp;pTenant, FALSE))<BR>                {<BR>                pTenant-&gt;GetInfo(&amp;ti);<BR>                pTenant-&gt;Close(FALSE);<BR>                pTenant-&gt;Load(m_pIStorage, &amp;ti);<BR>                }<BR>            }<BR><BR>        fActivate=TRUE;<BR>        }<BR>   }<BR>§<BR>m_pTenantCur-&gt;Repaint();<BR><BR>if (fActivate)<BR>    m_pTenantCur-&gt;Activate(OLEIVERB_SHOW);</code></pre>
<P><I>CoTreatAsClass</I>, as we saw in Chapter 5, establishes a permanent emulation from the old CLSID to the new CLSID. After that, we unload and reload every tenant in the current page (all that are loaded) to ensure that they are now using the right class. We unload all the tenants because we cannot be certain that one object isn't using an object of the old class that is now being emulated. So we unload everything. In addition, we always activate the object on which the Convert dialog box was originally invoked. The user saw Activate As in the dialog and expects that activation will now take place. It's a good idea to meet that expectation.</P></font></body></HTML>
