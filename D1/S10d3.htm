<HTML><HEAD><TITLE>Viewable Objects and the Data Cache</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Viewable Objects and the Data Cache</H3><P>Closely related to data objects in Uniform Data Transfer is the capability of an object to indicate that it can draw presentations of its data directly to devices through the interface <I>IViewObject2</I>. Often a data object will use <I>IDataObject </I>to provide renderings of its presentations into bitmaps and metafiles while it implements <I>IViewObject2</I> to provide direct device renderings. When an object supports this interface to draw its own "views," it's called a <I>viewable object,</I> the topic of Chapter 11.</P>
<P><I>IViewObject2</I> also contains member functions for handling notifications to a client for when an object's view, as opposed to its data, changes. For example, a bar chart has underlying data used to generate the chart, and a data change will normally also mean a view change for the chart. But changing the color of one of the bars changes the view but not the data; therefore, we have a separate notification. This notification also happens through <I>IAdviseSink</I> because <I>IDataObject </I>and <I>IViewObject2</I> are often found together, and the combination of notifications into <I>IAdviseSink</I> centralizes not only sink implementation but also the asynchronous nature of the interface. In response to the view change notification, a client displaying the object's view somewhere will normally ask the object to redraw itself.</P>
<P>An important point about <I>IViewObject2 </I>is that it has no marshaling support: an <I>HDC </I>argument to its <I>Draw </I>function cannot be shared across process boundaries. So a "viewable" object always shares the client's process.</P>
<P>Closely related to an object's view is the capability of a client to <I>cache </I>one or more views (metafiles or bitmaps) in what is called a <I>data cache,</I> the implementation of which is a standard OLE service. This cache component, which always works in a client's own process, has an object that implements the interfaces <I>IOleCache2</I> and <I>IOleCacheControl</I>. Through this object, the client can control what is saved in the cache and can also connect the cache to a running local or remote object's <I>IDataObject </I>interface. Through this interface, the cache can obtain the graphics to cache and can watch for changes in those presentations in order to update the cache automatically.</P></font></body></HTML>
