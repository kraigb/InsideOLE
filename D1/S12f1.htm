<HTML><HEAD><TITLE>In-Place–Active States vs. UI-Active States</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>In-Place–Active States vs. UI-Active States</H3><P>If you look carefully at the interfaces described in the previous two sections, you'll notice that some member functions are given names such as <I>InPlaceActivate </I>while others are named <I>UIActivate.</I> This reflects the fact that in-place activation adds two object states to those we first discussed in Chapter 17. The additional states are <I>in-place active </I>and <I>UI active</I>. The active state we've been describing is the state in which an object's user interface is visible in a separate window. A call to <I>IOleObject::DoVerb</I> with OLEIVERB_SHOW brings an object into this active state. (This is true for any other verb that implies a show operation, such as OLEIVERB_PRIMARY.) In-place activation defines two standard verbs through which a container can tell an object to enter the in-place–active or UI-active state: OLEIVERB_INPLACEACTIVATE and OLEIVERB_UIACTIVATE. The functions <I>IOleInPlaceObject::InPlaceDeactivate </I>and <I>IOleInPlaceObject::UIDeactivate </I>reverse these state transitions, as shown in Figure 22-3.</P>
<P>    <img src="f22dd03.gif"></P>
<P><B>Figure 22-3.</B></P>
<P><B>In-place–active and UI-active state transitions for in-place–capable objects.</B></P>
<P>When an object is in-place active, it has a window of its own inside the container's document window. This enables the object to respond directly to mouse clicks and control its own rendering. The container also has the object's <I>IOleInPlaceActiveObject </I>pointer. However, an in-place–active object does not have any other user interface available. Only one UI-active object can have its toolbars, menus, and keyboard accelerators active at a given time. When the user clicks the mouse inside an in-place–active object's window, that object becomes the UI-active object. This causes the user interface for the previous UI-active object to be deactivated, but that object's in-place state is not fully deactivated. It remains in-place active if it wants.</P>
<P>In this manner, in-place activation allows a container to manage multiple in-place–active objects at the same time, but only one of them is also UI active. This is perfect for dealing with a form full of elements such as OLE controls; only the control with the keyboard focus needs to be UI active. All others will be in-place active, and a single mouse click on any control will make it the UI-active one.</P>
<P>Objects that support both of these states, which is optional, usually mark themselves as OLEMISC_ACTIVATEWHENVISIBLE. This means that a container should keep those objects in-place active, but not UI active, whenever they are visible to the end user. (This is usually whenever those objects are loaded.) Some of those objects might also be marked OLEMISC_INSIDEOUT, which is a special case that we'll return to later.</P></font></body></HTML>
