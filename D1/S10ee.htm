<HTML><HEAD><TITLE>Interface Identity</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Interface Identity</H3><P>Like objects and component classes, every interface must have a unique identity so that clients are always clear about the functionality and features they are accessing through the interface. In contrast to the four possible ways to identify a component, an interface is <I>always </I>identified precisely with an IID. Again, an IID is equivalent to the GUID and therefore shares the same characteristic uniqueness.</P>
<P>Of course, it would be painful to write code that identifies an interface with a bunch of hex digits. For this reason, IIDs are usually given a compile-time symbolic constant that works in place of the exact value, which is then used at run time. These symbols are named <I>IID</I><I>_</I><I>&lt;Interface&gt;</I>,<I> </I>as in <I>IID</I><I>_</I><I>IConnectionPoint </I>or <I>IID</I><I>_</I><I>IUnknown</I>. However, these symbols identify the interface but not the interface pointer type. Interface pointer variables are always declared using &lt;<I>Interface</I>&gt; *, as in <I>IUnknown </I>* or <I>IStorage</I> *. OLE also defines aliases for these types, for example LPSTORAGE, for which you drop the <I>I </I>and the *, add <I>LP</I>, and put the rest in uppercase. Outside the context of a pointer, interface names are never used programmatically but serve only for conversation. You will never see <I>IUnknown </I>by itself in code, always <I>IUnknown </I>*<I>. </I>We'll refer to an object's implementation of the interface as simply <I>IUnknown</I>.<I> </I>Of course, all of these names, types, and symbols only matter at compile time; the actual IID value is the sole interface identifier at run time.</P></font></body></HTML>
