<HTML><HEAD><TITLE>Enable Links from Insert Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Enable Links from Insert Object</H3><P>The first way in which we can obtain linking information is to use the Insert Object dialog box, provided we do not specify IOF_DISABLELINK. Chapter 17's version of Patron included this flag, so we remove it now. If the user selects the Link check box and provides a filename, the <I>dwF</I><I>lags </I>field of the OLEUIINSERTOBJECT structure, on return from <I>OleUIInsertObject</I>,<I> </I>will contain the value IOF_CHECKLINK. From this we know to call <I>OleCreateLinkToFile </I>as opposed to <I>OleCreateFromFile</I> as we did in Chapter 17. In this case, Patron passes the flag TENANTTYPE_LINKEDFILE along with the filename all the way down to <I>CTenant::Create </I>(TENANT.CPP), which then calls <I>OleCreateLinkToFile</I>:</P>
<P><BR></P>
<pre><code>//In CTenant::Create<BR>switch (tType)<BR>    {<BR>    [Other cases]<BR><BR>    case TENANTTYPE_LINKEDFILE:<BR>        hr=OleCreateLinkToFile((LPTSTR)pvType, IID_IUnknown<BR>            , OLERENDER_DRAW, NULL, NULL, m_pIStorage<BR>            , (PPVOID)&amp;pObj);<BR>        break;<BR><BR>    §<BR>    }</code></pre>
<P>As with <I>OleCreateFromFile</I>,<I> </I>the first argument to <I>OleCreateLinkToFile</I> is the filename in question. In both cases, OLE creates a file moniker and attempts to bind it so that the server associated with the file must again implement <I>IPersistFile </I>to support this operation. If that fails, both functions will attempt to create a package object whose display is always an icon. Whereas <I>OleCreateFromFile </I>makes a package with the contents of the entire file, <I>OleCreateLinkFromFile </I>creates a package with just the name of the file inside. This is embedding and linking in its most primeval stages. Keep in mind, however, that <I>OleCreateLinkFromFile </I>will create an <I>embedded </I>package that stores the linked filename inside it. That is, the container will not see the package itself as a link. But a link of some sort is still involved, in the form of an embedded filename.</P>
<P>You may remember from Chapter 17 that a container does not initially activate an object created with <I>OleCreateFromFile</I>. The same applies to objects created with <I>OleCreateLinkToFile</I>. Only blank objects created with <I>OleCreate</I> should be activated immediately.</P></font></body></HTML>
