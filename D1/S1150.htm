<HTML><HEAD><TITLE>Creating a Licensed Object</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Creating a Licensed Object</H3><P>A call to <I>IClassFactory::CreateInstance</I>, or <I>CoCreateInstance </I>for that matter, might possibly fail with the error code CLASS_E_NOTLICENSED, telling the client that the component is not globally licensed on the machine. If this happens, you must resort to obtaining an <I>IClassFactory2 </I>pointer from <I>CoGetClassObject</I>, followed by <I>IClassFactory2::CreateInstanceLic</I>. This assumes, of course, that the client has a license key—if not, it's completely locked out of that component.</P>
<P>Licensing is primarily the concern of application-building tools that can incorporate components into such an application. At design time, the development tool itself is really playing the client role of creating and manipulating objects. When this tool gets to the point of writing or compiling the final application, it must obtain the necessary license for every component it can so that the application can later run on nonlicensed machines.</P>
<P>This process means that the tool first calls <I>IClassFactory2::GetLicInfo</I> for each component and checks <I>fRuntimeKeyAvail </I>in each LICINFO structure returned. If this flag is TRUE, the tool can then call <I>IClassFactory2::RequestLicKey</I><I> </I>to obtain a key that it saves persistently in the created application. By "saves persistently," I mean that the license key is stored in the application image so that the application, when run itself, will pass the license key in calls to <I>IClassFactory2::CreateInstanceLic</I>.</P>
<P>Some components will not offer a run-time license at all, in which case the generated application has to handle the absence of any of its desired components more robustly. Presumably this means warning the end user that a certain component is missing or not available, and it is beneficial to those end users to distinguish the complete nonexistence of a component from the lack of a proper license. If the component isn't there, <I>CoGetClassObject </I>will fail outright. If there is no license, <I>CoGetClassObject </I>will work but <I>IClassFactory::CreateInstance </I>will fail with CLASS_E_NOTLICENSED. If you want to check ahead of time whether <I>CreateInstance </I>will fail, call <I>IClassFactory2::GetLicInfo</I> first and check the <I>fLicVerified</I> field in LICINFO. If the field is FALSE, you know that the component is not globally licensed and <I>CreateInstance</I> will fail<I>.</I> In either case, you can give the end user a meaningful error message, all the better for your customer support staff.</P></font></body></HTML>
