<HTML><HEAD><TITLE>Establishing an Advisory Connection</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Establishing an Advisory Connection</H3><P>You may have noticed by now that DataUser has an Advise menu on which appear the items shown in Figure 10-4 on the following page. Through this menu, you can tell DataUser to call <I>IDataObject::DAdvise </I>on the current object with any of the three data formats. The GetData On Change and Paint On Change items are enabled only for in-process objects and allow you to control what happens inside DataUser's implementation of <I>IAdviseSink</I>, which is found in the file IADVSINK.CPP.</P>
<P>    <img src="f10dd04p.gif"></P>
<P><B>Figure 10-4.</B></P>
<P><B>The DataUser program showing the Advise menu along with the large bitmap.</B></P>
<P>DataUser implements the advise sink through the class <I>CAdviseSink</I>, creating one such object on startup and using that same instance throughout DataUser's lifetime. DataUser holds the sink's <I>IAdviseSink </I>pointer in the variable <I>m</I><I>_</I><I>pIAdviseSink</I>, releasing it on shutdown. The implementation of <I>CAdviseSink </I>holds a backpointer to the main application class <I>CApp </I>to tell the application when to repaint or change its data, but otherwise, it is an independent object with its own <I>QueryInterface</I> behavior and a <I>Release </I>function that destroys it when no more references are extant.</P>
<P>When you tell DataUser to create an advisory connection, it passes its <I>m</I><I>_</I><I>pIAdviseSink </I>pointer to <I>IDataObject::DAdvise</I> along with the FORMATETC matching the menu item you select and the ADVF_NODATA flag (allowing us to time the raw notification rates exclusive of the time it takes to render data). The connection key is stored in <I>m</I><I>_</I><I>dwConn </I>inside <I>CApp</I>. DataUser makes all of these formats mutually exclusive, so selecting one will tear down any existing advisory connection for another:</P>
<P><BR></P>
<pre><code>//In the WM_COMMAND message case of DataUserWndProc<BR><BR>case IDM_ADVISETEXT:<BR>case IDM_ADVISEBITMAP:<BR>case IDM_ADVISEMETAFILEPICT:<BR>    if (NULL==pApp-&gt;m_pIDataObject)<BR>        break;<BR><BR>    //Terminate old connection<BR>    if (0!=pApp-&gt;m_dwConn)<BR>        {<BR>        pApp-&gt;m_pIDataObject-&gt;DUnadvise(pApp<BR>            -&gt;m_dwConn);<BR>        }<BR><BR>    CheckMenuItem(hMenu, pApp-&gt;m_cfAdvise<BR>        +IDM_ADVISEMIN, MF_UNCHECKED);<BR>    CheckMenuItem(hMenu, wID, MF_CHECKED);<BR><BR>    //New format is wID-IDM_ADVISEMIN.<BR>    pApp-&gt;m_cfAdvise=(UINT)(wID-IDM_ADVISEMIN);<BR>    fe.cfFormat=pApp-&gt;m_cfAdvise;<BR>    pApp-&gt;m_pIDataObject-&gt;DAdvise(&amp;fe, ADVF_NODATA<BR>        , pApp-&gt;m_pIAdviseSink, &amp;pApp-&gt;m_dwConn);<BR><BR>    break;</code></pre>
<P>Keep in mind that an advise connection is always associated with not only a specific data format but also the <I>dwAspect</I> contained in the FORMATETC structure passed to <I>DAdvise</I>. If the data object does not support that aspect, it can refuse the connection; otherwise, it uses that aspect to determine when it needs to send a notification.</P></font></body></HTML>
