<HTML><HEAD><TITLE>Invoke the Links Dialog Box</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Invoke the Links Dialog Box</H3><P>After all the work to implement <I>IOleUILinkContainer</I>, invoking the dialog box is rather painless. This should be done in response to a Links command that should appear on your Edit menu, enabled only when links are available. Patron also includes this item on the right-mouse-button pop-up menu for an individual object (which is not part of the OLE user interface guidelines, simply my own design). In both cases, the function <I>CPage::FQueryLinksInPage </I>ultimately determines whether links are available by looking for tenants of type TENANTTYPE_LINKEDOBJECT. If at least one object is available, the Links item is enabled. Selecting Links invokes <I>CPatronDoc::EditLinks.</I></P>
<P><I>CPatronDoc::EditLinks </I>first obtains the <I>CIOleUILinkContainer</I> through <I>CPages::GetUILinkContainer</I>,<I> </I>which initializes that object with the current page's <I>CPage </I>pointer. On return, that object pointer is stored in an OLEUIEDITLINKS structure that is passed to <I>OleUIEditLinks. </I>On return from this function, the <I>m</I><I>_</I><I>fDirty </I>flag in <I>CIOleUILinkContainer</I> indicates to the document whether anything changed.</P></font></body></HTML>
