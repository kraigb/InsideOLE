<HTML><HEAD><TITLE>Activate Objects and Add the Object Verb Menu</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Activate Objects and Add the Object Verb Menu</H3><P>In the introduction to this chapter, we described how the activation<I> </I>of an object is a primary feature of OLE Documents. Activation is what separates an embedded or a linked object from a static one. To activate an object means to tell it to execute a verb through <I>IOleObject::DoVerb. </I>This might show a user interface in which the user can edit the object, or it might play a sound or a video clip. This function does whatever is appropriate for the object itself. In Patron, all activation goes through <I>CTenant::Activate</I>:8</P>
<P><BR></P>
<pre><code>BOOL CTenant::Activate(LONG iVerb)<BR>    {<BR>    RECT        rc, rcH;<BR>    CHourglass *pHour;<BR>    SIZEL       szl;<BR><BR>    [Just beep for static objects.]<BR><BR>    RECTFROMRECTL(rc, m_rcl);<BR>    RectConvertMappings(&amp;rc, NULL, TRUE);<BR>    XformRectInPixelsToHimetric(NULL, &amp;rc, &amp;rcH);<BR><BR>    pHour=new CHourglass;<BR><BR>    [If a prior SetExtent failed, <BR>     run the server and execute the verb now.]<BR><BR>    m_pIOleObject-&gt;DoVerb(iVerb, NULL, m_pImpIOleClientSite, 0<BR>        , m_hWnd, &amp;rcH);<BR><BR>    delete pHour;<BR><BR>    //If object changes, IAdviseSink::OnViewChange will see it.<BR>    return FALSE;<BR>    }</code></pre>
<P>Here we show an hourglass in case <I>DoVerb </I>takes a while, and then we pass the verb value to <I>DoVerb </I>along with our client site, a window handle, and a rectangle.9 These latter two arguments provide a way for certain objects to <I>play in place </I>completely within the confines of the call to <I>DoVerb. </I>This is not in-place activation, but simply a way for something such as a video clip to play itself in the container's window—clipped to the rectangle—before returning from <I>DoVerb. </I>After the object returns, it is not allowed to leave anything in the container and is not allowed to hold on to the window handle. For a container, we want to pass these arguments to all objects whether or not they use them.</P>
<P>Somehow the container has to know when to activate an object. In some cases, the container can deliberately show or hide an object's user interface with OLEIVERB_SHOW and OLEIVERB_HIDE, or it can specifically request that the object open itself in a window for editing through OLEIVERB_OPEN. (There are also verbs for in-place activation, as we'll see in Chapter 22.) An object's custom verbs, however, are sent to <I>DoVerb </I>only in response to user action, which includes the creation of a new object, as we saw earlier.</P>
<P>There are two other suitable actions besides creation. The first occurs when the user double-clicks on an object in the container, which tells the container to execute the object's primary, or default, verb. This is accomplished by calling <I>IOleObject::DoVerb(OLEIVERB</I><I>_</I><I>PRIMARY)</I>, in which OLEIVERB_PRIMARY has the value 0. The meaning of this verb changes from object to object, but it is generally what the user expects. Sound and video objects will play, text or graphical objects will edit, and so on. Whatever the behavior is, Patron handles this case in <I>CPage::OnLeftDoubleClick</I> (in PAGEMOUS.CPP):</P>
<P><BR></P>
<pre><code>BOOL CPage::OnLeftDoubleClick(UINT uKeys, UINT x, UINT y)<BR>    {<BR>    if (HTNOWHERE!=m_uHTCode)<BR>        return m_pTenantCur-&gt;Activate(OLEIVERB_PRIMARY);<BR><BR>    return FALSE;<BR>    }</code></pre>
<P>The second user action that invokes a verb is its selection from a menu that the container populates with the verbs found for the object in the registry. The pop-up menu must appear in two places: on the container's Edit menu and on an object context menu, displayed when the user clicks the right mouse button over the site. In either case, the menu displays the available verbs along with an item called Convert, which is used to invoke the Convert dialog box, as discussed later in this chapter. An example of this menu for a Sound object with two verbs is shown in Figure 17-8 on the following page.</P>
<P>    <img src="f17dd08p.gif"></P>
<P><B>Figure 17-8.</B></P>
<P><B>The object verb menu shown in response to a right mouse button click.</B></P>
<P>Fortunately a container doesn't have to do much work to create this pop-up menu because of the handy OLE UI Library function named <I>OleUIAddVerbMenu</I>:</P>
<P><BR></P>
<pre><code>STDAPI_(BOOL) OleUIAddVerbMenu(LPOLEOBJECT lpOleObj<BR>    , LPCTSTR lpszShortType, HMENU hMenu, UINT uPos<BR>    , UINT uIDVerbMin, UINT uIDVerbMax, BOOL bAddConvert<BR>    , UINT idConvert, HMENU FAR *lphMenu);</code></pre>
<P>You pass to this function the object's <I>IOleObject </I>pointer, a string describing its type (if NULL, <I>OleUIAddVerbMenu </I>will use the <I>AuxUserType </I>form 2 entry in the registry), the menu on which the pop-up menu is to appear, the position on the menu to create the pop-up, the minimum and maximum WM_COMMAND identifiers to assign to the verbs, a flag indicating whether to add the Convert item, the ID to assign to the Convert item, and a pointer to a variable that receives the pop-up menu handle on return. Patron calls this function within <I>CTenant::AddVerbMenu </I>whenever it needs to build a menu in this manner:</P>
<P><BR></P>
<pre><code>void CTenant::AddVerbMenu(HMENU hMenu, UINT iPos)<BR>    {<BR>    HMENU       hMenuTemp;<BR>    LPOLEOBJECT pObj=m_pIOleObject;<BR><BR>    //If we're static, say we have no object.<BR>    if (TENANTTYPE_STATIC==m_tType)<BR>        pObj=NULL;<BR><BR>    OleUIAddVerbMenu(pObj, NULL, hMenu, iPos, IDM_VERBMIN<BR>        , IDM_VERBMAX, TRUE, IDM_EDITCONVERT, &amp;hMenuTemp);<BR><BR>    return;<BR>    }</code></pre>
<P>When the user selects a verb from this menu, the container's main window sees a WM_COMMAND message (<I>CPatron::OnCommand </I>in PATRON.CPP) with a command ID equal to IDM_VERBMIN+&lt;<I>verb index</I>&gt;, so we would call <I>DoVerb </I>using <I>commandID</I><FONT FACE="Symbol"><I>-</I></FONT><I>IDM</I><I>_</I><I>VERBMIN</I>. When the user selects the Convert item, we'll see a WM_COMMAND with IDM_EDITCONVERT.</P>
<P>Patron creates this pop-up menu whenever it sees WM_INITPOPUP in the main window's message procedure. We eventually end up in <I>CPage::FQueryObjectSelected </I>(in PAGE.CPP), which calls <I>CTena</I><I>nt::AddVerbMenu </I>if there is a tenant selected. If there are no tenants at all, we still call <I>OleUIAddVerbMenu </I>but pass a lot of NULLs, which causes the function to create a single disabled menu item named Object.</P>
<P>Patron also creates this menu item inside <I>CPage::OnRightDown </I>(in PAGEMOUS.CPP). When a right click happens, Patron selects the tenant under the mouse, builds a context menu, adds to it the object's verbs with <I>CTenant::AddVerbMenu</I>, and then displays that menu with the Windows API <I>TrackPopupMenu</I>. Any command selected from this menu will also appear in the container's main window procedure, as do all other menu commands. The commands themselves are routed through <I>CPatronDoc::ActivateObject</I>, <I>CPages::ActivateObject</I>, <I>CPage::ActivateObject</I>, and finally <I>CTenant::Activate</I>. (I didn't say Patron had the most elegant design!)</P>
<P><B>Note:</B><B>  </B>If your application has a status line, you might want to have it display status information for these verbs as the user selects them from the menu. Patron does this by watching for WM_MENUSELECT messages in CPatronFrame::FMessageHook with the appropriate identifiers. The recommended strings are documented in the Windows user interface guidelines.</P>
<P></P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR><TR><TD VALIGN="TOP"><P>8 In the sample code, you'll see a call to OleRun and IOleObject::SetExtent if an m_fSetExtent flag is TRUE.  This flag will be set if resizing a tenant earlier did not pass the call all the way through to the running object. This happens only for objects marked OLEMISC_RECOMPOSEONRESIZE. The call to SetExtent here simply ensures that the extents are set right before we activate the object.</P></TD></TR><TR><TD VALIGN="TOP"><P>9 The NULL is a pointer to a MSG structure used with in-place activation.</P></TD></TR></TBODY></TABLE>
<P><BR></P></font></body></HTML>
