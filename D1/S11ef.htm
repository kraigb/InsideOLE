<HTML><HEAD><TITLE>IViewObject2::GetColorSet and GetExtent</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3><I>IViewObject2::GetColorSet </I>and <I>GetExtent</I></H3><P><I>IViewObject2::GetColorSet</I> allows a client to obtain an object's logical palette used during <I>Draw</I>, which the client can try to match as closely as possible when the object's image is considered background. For example, a client that displays multiple images in separate windows would consider the object shown in the foreground window to own the palette; all other objects would have to render using that same palette. If the object uses a particular palette, it should fill the LOGPALETTE structure pointed to by <I>ppColorSet</I> with the colors it would use if <I>Draw</I> were called with the rest of the arguments passed to <I>GetColorSet. </I>Objects that are not palette sensitive return S_FALSE.<I> </I>In general, the palette here is identical to what the object might pass to the Windows API functions <I>SetPaletteEntries</I> and <I>CreatePalette</I>.</P>
<P><I>IViewObject2::GetExtent</I>, the function not found in <I>IViewObject</I> itself, fills the SIZEL structure with the object's natural size.<I> </I>The extents are always expressed in HIMETRIC units—not the MM_HIMETRIC mapping mode, but the same units used in that mode.<I> </I>In other words, both the horizontal and vertical extents returned from this function are positive values scaled according to 100 logical units per millimeter; on the screen, positive <I>x </I>is left, and positive <I>y </I>is down. (It is negative with the MM_HIMETRIC mapping mode.) Be careful that you use the correct units but not the mapping mode.</P></font></body></HTML>
