<HTML><HEAD><TITLE>Calling Conventions and Parameter Types</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Calling Conventions and Parameter Types</H3><P><img src="16bit.gif"></P>
<P>A close look at the preceding interface definitions will show you that all the interface functions are declared using <I>__</I><I>stdcall</I>,<I> </I>the standard for 32-bit implementations. Frequently, however, you will see use of a STDMETHOD macro that expands to include the calling convention and the standard return type, HRESULT. When implementing an interface member function, you'll frequently see the use of the macro STDMETHODIMP(<I>method</I>),<I> </I>which expands to HRESULT <I>__</I><I>export </I><I>__</I><I>stdcall method</I>,<I> </I>or STDMETHODIMP<I>_</I><I>(type, method)</I>,<I> </I>which expands to <I>type </I><I>__</I><I>export </I><I>__</I><I>stdcall method. </I>You must always export all interface member functions; using the IMP macros will eliminate any chances that you'll forget to do so.</P>
<P>You may also have noticed the use of <I>[in]</I> and <I>[out]</I> labels before various arguments in the interface member functions. These labels identify the direction of the flow of information through these arguments, such as whether the information is exclusively input data to a function, exclusively output data from the function (such as a structure that it fills), or both. The possible variations are defined as follows, using the word <I>parameter</I> interchangeably with <I>argument</I>:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="96pt" VALIGN="TOP"><COL WIDTH="312pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Parameter Type</B></P></TD><TD VALIGN="TOP"><P><B>Description and Allocation Rules</B></P></TD></TR><TR><TD VALIGN="TOP"><P>in-parameter</P></TD><TD VALIGN="TOP"><P>Input data for a function, allocated and freed by the caller using whatever memory management is wanted.</P></TD></TR><TR><TD VALIGN="TOP"><P>out-parameter</P></TD><TD VALIGN="TOP"><P>Output data from a function, allocated by the function and freed by the caller using standard COM task memory. The called function must always fill this parameter even on failure; for example, an output pointer must be set to NULL on failure.</P></TD></TR><TR><TD VALIGN="TOP"><P>in/out-parameter</P></TD><TD VALIGN="TOP"><P>Input data for the function, modified and returned as output data on return from the function. Initially allocated by the caller, freed and reallocated by the callee if necessary, and ultimately freed by the caller as with an out-parameter.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>What is referred to as <I>standard COM task memory</I> involves the use of OLE's standard memory allocation service. This is discussed later under "Memory Management." This memory service is used for all function arguments in which a transfer of memory ownership occurs between a client and an object, which means that there must be rules on how to allocate and free this memory. Because there's no transfer of ownership with in-parameters, they do not involve the use of this memory service.</P></font></body></HTML>
