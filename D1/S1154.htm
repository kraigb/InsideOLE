<HTML><HEAD><TITLE>Implementing Basic Clients and Servers</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Implementing Basic Clients and Servers</H2><P>Let's now take a look at how all of the mechanisms described earlier appear in code, which, being written in C++, illustrates how COM enables you to share language-specific implementations with the rest of the system through language-independent interfaces. We'll first look at the basic mechanisms and then at self-registration and licensing separately.</P>
<P>We'll use three separate samples for this discussion: a client named ObjectUser, found in CHAP05\OBJUSER, and two implementations of an object named Koala (yes, I have a certain penchant for these critters) for both DLL and EXE servers, found in CHAP05\DKOALA1 and CHAP05\EKOALA1, respectively. Before running ObjectUser, you will need to create the registry entries for both servers using the REG files found in their respective directories. The Koala object is assigned the CLSID of <I>00021146-0000-0000-C000-000000000046</I>, which is given the name <I>CLSID</I><I>_</I><I>Koala </I>in INC\BOOKGUID.H.</P>
<P>The Koala object used in these samples is nothing more than a regular OLE object with only the <I>IUnknown </I>interface—so all that is really useful to do with this object is call <I>AddRef </I>and <I>Release </I>on it. For the record, Koala has no initialization interface, nor a need of one. In any case, Koala will illustrate the mechanisms through which each server makes this object available to ObjectUser. You can look at the Koala implementation in the KOALA.CPP and KOALA.H files in both the DKOALA1 and the EKOALA1 directories and notice that the code is identical in both. This shows how you can create an object independently of the server packaging around it.</P></font></body></HTML>
