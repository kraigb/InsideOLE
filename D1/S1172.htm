<HTML><HEAD><TITLE>Implementing Concurrency Management and the Busy Dialog Box</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Implementing Concurrency Management and the Busy Dialog Box</H2><P>In the previous section, I mentioned some additions to the EKoala3 sample to support concurrency management—a few menu items, the implementation of the <I>IPersist</I> interface, and a message filter—all of which allow you to see what happens when a server blocks or delays incoming calls.</P>
<P>In talking about concurrency management, keep in mind that the <I>IMessageFilter::HandleInComingCall </I>function is used only for a process that receives external calls, while the other members, <I>RetryRejectedCall</I> and <I>MessagePending</I>, are expressly for a process that makes calls into a remote object. For this reason, EKoala3's message filter implements only <I>HandleInComingCall.</I> To demonstrate the other two functions, we'll use a modification of the ObjectUser sample—ObjectUser2—which installs its own message filter to display the busy dialog box at the appropriate times.</P>
<P>In this section, we'll first look at the EKoala3 modifications that allow us to simulate a blocked server or a delayed call. Then we'll take a brief look at the OLE UI library, which provides the standard implementation of the busy dialog box. We'll then see ObjectUser2 and how it employs this dialog box to tell the end user when the server is not responding to calls.</P></font></body></HTML>
