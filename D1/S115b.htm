<HTML><HEAD><TITLE>Licensing</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Licensing</H2><P>Support for licensing in both a client and a server is simply a matter of supporting <I>IClassFactory2</I>, as demonstrated in the samples LicenseUser (CHAP05\LICUSER) and DKoala3 (CHAP05\DKOALA3).7</P>
<P>LicenseUser is a program similar to ObjectUser, with two top-level menus. The menu item Class Factory allows you to have the program obtain either an <I>IClassFactory </I>or an <I>IClassFactory2 </I>pointer from DKoala3. If you ask for <I>IClassFactory2</I>, you can also call its <I>RequestLicKey </I>member, which stores the BSTR key in the member variable <I>CApp::m</I><I>_</I><I>bstrKey</I>. The menu item Clear LicKey frees this string. The Koala Object menu is enabled only when you have obtained a class factory, so you can then try to create an object with <I>IClassFactory::CreateInstance</I>. If you've used the RequestLicKey menu, you can try creation through <I>IClassFactory::CreateInstanceLic. </I>In either case, LicenseUser tells you the result—whether the object was created or there was a "not licensed" error.</P>
<P>This menu structure and these operations allow you to experiment with different licensing situations, using the server DKOALA3.DLL and its license file DKOALA3.LIC (also in CHAP05\DKOALA3). For licensing to work, the LIC file must be located in the same directory as DKOALA3.DLL. If you run into funny problems, be sure to check this requirement. In any case, here are the scenarios that you can test with these samples:</P>
<UL><LI>DKoala3 is globally licensed. When loaded, it will find DKOALA3.LIC, verify that it's the correct file, and set an internal flag. This allows any call to <I>IClassFactory[2]::CreateInstance </I>to succeed.</LI><LI>DKoala3 is not globally licensed. This means that DKOALA3.LIC is not found or doesn't contain the correct contents. Any calls to <I>CreateInstance </I>will fail. To simulate this lack of a global license, you can rename DKOALA3.LIC, move it to another directory, or rename it and make a garbage file with the name DKOALA3.LIC and see how DKoala3 detects that the contents are bad.</LI><LI>DKoala3 is initially globally licensed, at which time LicenseUser obtains a license key. After this, DKoala3 is not globally licensed (<I>CreateInstance </I>fails) but an instance of the object can be created using the license key <I>(CreateInstanceLic </I>succeeds). To simulate this situation, run LicenseUser as usual, choose Obtain IClassFactory2 followed by RequestLicKey, and then choose Release to let go of the class factory while continuing to hold the license key. This will unload DKOALA3.DLL (through <I>CoFreeUnusedLibraries</I>), after which you can move or trash DKOALA3.LIC. Now choose Obtain IClassFactory2 again. During its initialization, DKoala3 will fail to validate a global license. Calls to <I>CreateInstance </I>will fail, but <I>CreateInstanceLic </I>will work because you still hold a license key.</LI></UL><P>Let's now see how DKoala3 validates the license and otherwise restrict access to its components. First of all, here's the contents of DKOALA3.LIC, a simple text file with Microsoft's standard license file format:</P>
<P><BR></P>
<pre><code>Koala Object #3 Copyright (c) 1993-1995 Microsoft Corp.<BR><BR>Warning: This product is licensed to you pursuant to the terms of the<BR>Microsoft license agreement included with the original software, and is<BR>protected by copyright law and international treaties. Unauthorized<BR>reproduction or distribution may result in severe civil and criminal<BR>penalties, and will be prosecuted to the maximum extent possible under<BR>the law.</code></pre>
<P>DKoala3 validates this license file during its initialization code in <I>LibMain32</I> in DKOALA3.CPP, in which a global variable, <I>g</I><I>_</I><I>fMachineLicensed</I>, indicates whether a global license is present:</P>
<P><BR></P>
<pre><code>//License key string, stored in ANSI to match contents of LIC file<BR>char g_szLic[]="Koala Object #3 Copyright (c) 1993-1995 Microsoft Corp.";<BR>BOOL g_fMachineLicensed=FALSE;<BR><BR><BR>BOOL WINAPI LibMain32(HINSTANCE hInstance, ULONG ulReason<BR>    , LPVOID pvReserved)<BR>    {<BR>    [Other code omitted]<BR>    §<BR><BR>    g_fMachineLicensed=CheckForLicenseFile(hInstance<BR>        , TEXT("DKOALA3.LIC"), (BYTE *)g_szLic, lstrlenA(g_szLic));<BR><BR>    §<BR>    return TRUE;<BR>    }<BR><BR>BOOL CheckForLicenseFile(HINSTANCE hInst, LPTSTR pszFile<BR>    , LPBYTE pbLic, UINT cb)<BR>    {<BR>    BOOL        fFound=FALSE;<BR>    TCHAR       szPath[_MAX_PATH];<BR>    LPTSTR      pszTemp;<BR>    LPBYTE      pbCompare;<BR>    HANDLE      hFile;<BR>    UINT        cbRead;<BR>    ULONG       cbWasRead;<BR><BR>    //Get module path; then replace DLL name with LIC filename.<BR>    GetModuleFileName(hInst, szPath, _MAX_PATH);<BR>    pszTemp=_tcsrchr(szPath, '\\')+1;<BR>    lstrcpy(pszTemp, pszFile);<BR><BR>    hFile=CreateFile(szPath, GENERIC_READ, FILE_SHARE_READ<BR>        , NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);<BR><BR>    if (INVALID_HANDLE_VALUE==hFile)<BR>        return FALSE;<BR><BR>    cbRead=cb*sizeof(BYTE);<BR>    pbCompare=(LPBYTE)malloc(cbRead+4);<BR><BR>    if (NULL!=pbCompare)<BR>        {<BR>        ReadFile(hFile, pbCompare, cbRead, &amp;cbWasRead, NULL);<BR>        fFound=(0==memcmp(pbLic, pbCompare, cb));<BR>        free(pbCompare);<BR>        }<BR><BR>    CloseHandle(hFile);<BR>    return fFound;<BR>    }</code></pre>
<P>The function <I>CheckForLicenseFile</I> attempts to open the license file specified by <I>pszFile</I> in the same location as the server module identified by <I>hInst</I>. If that file is found and opened, the function loads <I>cb </I>bytes from that file and compares it with the contents at <I>pbLic</I>. If the two blocks of data match, the license is validated; otherwise, the machine is not licensed. In DKoala3, I'm comparing only the first line of the license file, which is usually suitable; however, feel free to be as secure as you want.</P>
<P>DKoala3's class factory <I>CKoalaClassFactory </I>(DKOALA3.CPP) now inherits from <I>IClassFactory2</I>. Because both <I>CreateInstance </I>and <I>CreateInstanceLic </I>share a lot of functionality, I broke out the core creation sequence to make a private member function, <I>CKoalaClassFactory::CreateAnObject.</I> This function is unrestrictive and will create an object whenever asked, so the other public members that are simply validating the necessary license then call <I>CreateAnObject</I>:</P>
<P><BR></P>
<pre><code>STDMETHODIMP CKoalaClassFactory::CreateInstance(LPUNKNOWN pUnkOuter<BR>    , REFIID riid, PPVOID ppvObj)<BR>    {<BR>    *ppvObj=NULL;<BR><BR>    if (!g_fMachineLicensed)<BR>        return ResultFromScode(CLASS_E_NOTLICENSED);<BR><BR>    return CreateAnObject(pUnkOuter, riid, ppvObj);<BR>    }<BR><BR><BR>STDMETHODIMP CKoalaClassFactory::CreateInstanceLic(LPUNKNOWN pUnkOuter<BR>    , LPUNKNOWN pUnkReserved, REFIID riid, BSTR bstrKey<BR>    , PPVOID ppvObj)<BR>    {<BR>    BOOL        fMatch;<BR>    BSTR        bstrTemp;<BR>    HRESULT     hr;<BR><BR>    *ppvObj=NULL;<BR><BR>    //Get our own license key, which should match bstrKey exactly.<BR>    hr=RequestLicKey(0, &amp;bstrTemp);<BR><BR>    if (FAILED(hr))<BR>        return hr;<BR><BR>    fMatch=(0==memcmp(bstrTemp, bstrKey, lstrlen(bstrTemp)));<BR>    SysFreeString(bstrTemp);<BR><BR>    if (!fMatch)<BR>        return ResultFromScode(CLASS_E_NOTLICENSED);<BR><BR>    return CreateAnObject(pUnkOuter, riid, ppvObj);<BR>    }</code></pre>
<P>As you can see, <I>CreateInstance </I>will work only if the global license exists; <I>CreateInstanceLic </I>will allow creation only if it's passed a license key identical to what it returns from <I>RequestLicKey</I>. So what is the key we return? Microsoft's convention is to use the first line of the license file. In DKoala3, this is stored in <I>g</I><I>_</I><I>szLic</I>, the same buffer used to validate the license file:8</P>
<P><BR></P>
<pre><code>STDMETHODIMP CKoalaClassFactory::RequestLicKey(DWORD dwReserved<BR>    , BSTR *pbstrKey)<BR>    {<BR>    OLECHAR       szTemp[256];<BR><BR>    //Can't give away a key on an unlicensed machine.<BR>    if (!g_fMachineLicensed)<BR>        return ResultFromScode(CLASS_E_NOTLICENSED);<BR><BR>    mbstowcs(szTemp, g_szLic, sizeof(g_szLic));<BR>    *pbstrKey=SysAllocString(szTemp);<BR>    return (NULL!=*pbstrKey) ? NOERROR : ResultFromScode(E_OUTOFMEMORY);<BR>    }</code></pre>
<P>Notice how this function fails if a global license is not available. If you didn't include a check like this, it would certainly make it easy for some clever person to cheat you out of an object! Of course, if you choose not to provide run-time licensing at all, <I>RequestLicKey </I>should return E_NOTIMPL.</P>
<P>All that's left now is to implement <I>GetLicInfo</I>, which fills a structure with appropriate information:</P>
<P><BR></P>
<pre><code>STDMETHODIMP CKoalaClassFactory::GetLicInfo(LPLICINFO pLicInfo)<BR>    {<BR>    if (NULL==pLicInfo)<BR>        return ResultFromScode(E_POINTER);<BR><BR>    pLicInfo-&gt;cbLicInfo=sizeof(LICINFO);<BR><BR>    //This says whether RequestLicKey will work.<BR>    pLicInfo-&gt;fRuntimeKeyAvail=g_fMachineLicensed;<BR><BR>    //This says whether standard CreateInstance will work.<BR>    pLicInfo-&gt;fLicVerified=g_fMachineLicensed;<BR><BR>    return NOERROR;<BR>    }</code></pre>
<P>Because we implement <I>RequestLicKey</I>, and thereby support run-time licensing, we store TRUE in <I>fRuntimeKeyAvail </I>if the current machine itself is licensed, or store FALSE if otherwise. This is the same value that we store in <I>fLicVerified</I>. If we didn't support run-time licensing, <I>fRuntimeKeyAvail </I>would always be set to FALSE, with <I>fLicVerified </I>remaining variable.</P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR><TR><TD VALIGN="TOP"><P>7 There is not a licensed version of EKoala because at the time of writing there was no marshaling support for <I>IClassFactory2 </I>restricting its use to in-process servers only.</P></TD></TR><TR><TD VALIGN="TOP"><P>8 <I>SysAllocString</I> always takes a Unicode string in Win32, so we have to convert the ANSI <I>g_szLic</I> to accommodate that condition.</P></TD></TR></TBODY></TABLE>
<P><BR></P></font></body></HTML>
