<HTML><HEAD><TITLE>Write the IDL File</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Write the IDL File</H3><P>An IDL file for an OLE interface uses only a small portion of IDL, which is designed for much broader RPC applications. IDL simply happens to serve us well for our own little interfaces. When you set out to describe an interface, you must include at least the IID to assign to the interface, the <I>interface </I>keyword and the name of the interface, the statement <I>import "unknwn.idl"</I>,<I> </I>and the list of your member functions. Any single IDL file can contain as many interface definitions as you'd like, but in the case of <I>IAnimal </I>and <I>IKoala </I>only one interface is in each file:</P>
<P><BR></P>
<pre><code>//CHAP06\IANIMAL\IANIMAL.IDL<BR>[uuid(0002114a-0000-0000-c000-000000000046),<BR>    object<BR>]<BR>interface IAnimal : IUnknown<BR>    {<BR>    import "unknwn.idl";<BR><BR>    HRESULT Eat([in] LPTSTR pszFoodRecommended<BR>        , [in, out] LPTSTR pszFoodEaten, [in] short cchEaten);<BR>    HRESULT Sleep([in, out] short *pcMinutes);<BR>    HRESULT Procreate([out] short *pcOffspring);<BR>    HRESULT WhatKindOfAnimal([out] IID *pIID);<BR>    }<BR><BR><BR>//CHAP06\IKOALA\IKOALA.IDL<BR>[uuid(0002114b-0000-0000-c000-000000000046),<BR>    object<BR>]<BR>interface IKoala : IUnknown<BR>    {<BR>    import "unknwn.idl";<BR><BR>    HRESULT ClimbEucalyptusTree([in] short iTree);<BR>    void    PouchOpensDown(void);<BR>    HRESULT SleepAfterEating([in] short cMinutes);<BR>    }</code></pre>
<P>You can see that much of IDL is similar to ODL, such as the format for attributes. Some of the attributes, however, don't appear in ODL. The <I>object </I>attribute, for example, is an IDL attribute to identify the script as MIDL-specific. Check the MIDL reference for others.</P>
<P>One useful member function attribute is <I>[async]</I>, which lets you describe the call as asynchronous as opposed to the default synchronous. Most important of all, however, are the <I>[in]</I>, <I>[out]</I>, and <I>[in, out] </I>attributes on the function arguments. These determine the type of marshaling code that MIDL will write for that member function. If you make a mistake here, the MIDL-generated code might not properly copy arguments, especially the contents of strings, across the process boundary.</P>
<P>On the whole, a number of attributes and other statements are available in ODL. For a full list, check the documentation.</P></font></body></HTML>
