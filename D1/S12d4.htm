<HTML><HEAD><TITLE>Implement the Show Objects Command</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Implement the Show Objects Command</H3><P>Because embedded and linked objects look so much alike for most things a user might do with them in the container, it helps to have a way to differentiate the two. The Show Objects command allows the user to turn on and off extra graphical effects:  solid lines drawn around embedded objects and dashed lines around linked objects, as shown in Figure 20-3 on page 952. The command itself, which is a toggle, should generally appear on an Edit menu but can appear elsewhere. In Patron, it is located on the Page menu, and some interaction between the frame and document objects (<I>CPatronFrame::UpdateMenus </I>in PATRON.CPP and <I>CPatronDoc::ShowOrQueryObjectTypes </I>in DOCUMENT.CPP) controls whether this menu item is checked. I'll leave it to you to follow the sequence of code for this.</P>
<P>Anyway, when you select this item, the frame routes the command down to <I>CPage::ShowObjectTypes</I>, which loops over all tenants in the page and calls <I>CTenant::ShowObjectType</I>. This function either includes or removes the flag TENANTSTATE_SHOWTYPE in the tenant's state flags:</P>
<P><BR></P>
<pre><code>void CTenant::ShowObjectType(BOOL fShow)<BR>    {<BR>    BOOL        fWasShow;<BR>    DWORD       dwState;<BR>    RECT        rc;<BR>    HDC         hDC;<BR><BR>    fWasShow=(BOOL)(TENANTSTATE_SHOWTYPE &amp; m_dwState);<BR><BR>    dwState=m_dwState &amp; ~TENANTSTATE_SHOWTYPE;<BR>    m_dwState=dwState œ ((fShow) ? TENANTSTATE_SHOWTYPE : 0);<BR><BR>    /*<BR>     * If this wasn't previously shown, just add line;<BR>     * otherwise, repaint.<BR>     */<BR>    if (!fWasShow &amp;&amp; fShow)<BR>        {<BR>        RECTFROMRECTL(rc, m_rcl);<BR>        RectConvertMappings(&amp;rc, NULL, TRUE);<BR>        OffsetRect(&amp;rc, -(int)m_pPG-&gt;m_xPos, -(int)m_pPG-&gt;m_yPos);<BR><BR>        hDC=GetDC(m_hWnd);<BR>        UIShowObject(&amp;rc, hDC, (TENANTTYPE_LINKEDOBJECT==m_tType));<BR>        ReleaseDC(m_hWnd, hDC);<BR>        }<BR><BR>    if (fWasShow &amp;&amp; !fShow)<BR>        Repaint();<BR><BR>    return;<BR>    }</code></pre>
<P>If the state changes, the tenant immediately calls the helper function <I>UIShowObject</I> (in INOLE.DLL, INOLE\UIEFFECT.CPP), which calls the Windows function <I>Rectangle </I>with the appropriate pen type according to the type of object. A tenant with a linked object will have the type TENANTTYPE_LINKEDOBJECT, as used in the preceding code.</P>
<P><I>CT</I><I>enant::Draw </I>also calls <I>UIShowObject</I> whenever it repaints the object later. This works well for existing tenants, but when we create a new tenant on the page, we have to be sure it knows about the current Show Objects state. So <I>CPage::TenantCreate </I>now calls <I>CTenant::ShowObjectType </I>as a step in its tenant initialization process. The <I>m</I><I>_</I><I>fShowTypes</I> flag in <I>CPages</I> contains the current state of the menu item.</P>
<P>In addition, tenants will be loaded and unloaded as you move from page to page in a Patron document. Whenever Patron loads a tenant, it also tells it about the current state of Show Objects so it can immediately reflect the proper user interface.</P>
<P>When you test this feature in your own container, be sure to verify that newly created and loaded objects react appropriately to the current state of Show Objects. I forgot to do this when I first wrote Patron, but fortunately it's not one of those bugs that is hard to find and fix.</P></font></body></HTML>
