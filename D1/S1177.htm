<HTML><HEAD><TITLE>Implementing a Custom Interface with MIDL</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Implementing a Custom Interface with MIDL</H2><P>The most beautiful thing about the MIDL compiler is that you can create standard marshalers for a custom interface without writing any code at all! The overall process is really very simple:</P>
<P>Describe your interface in an IDL file, specifying the IID as an attribute of the interface.</P>
<P>Write a DEF file for the proxy/stub DLL that exports <I>DllGetClassObject</I>,<I> DllCanUnloadNow</I>, and a function named <I>GetProxyDllInfo</I>.</P>
<P>Write a make file that pumps the IDL file through MIDL and compiles the resulting files.</P>
<P>Write a REG file containing the registry information for the compiled DLL.</P>
<P><img src="16bit.gif"></P>
<P>For examples of using MIDL, I've included four (yes, four) relevant samples in this chapter. First is yet another variation of the EKoala server, this time EKoala4 (CHAP06\EKOALA4). This is another modification of Chapter 5's EKoala1. The only changes are two custom interfaces added to the Koala object. These interfaces are <I>IAnima</I><I>l </I>(<I>0002114a-0000-0000-c000-000000000046</I>) and <I>IKoala </I>(<I>0002114b-0000-0000-c000-000000000046</I>). We'll see the member functions of these interfaces shortly. To work with EKoala4, I've included ObjectUser3 (CHAP06\OBJUSER3), which knows how to call the functions in <I>IAnimal </I>and <I>IKoala</I>. This is basically a modification of Chapter 5's ObjectUser.</P>
<P>The code in both of these samples is pretty similar to everything we've seen before. EKoala4 serves up the Koala object, and the Koala object provides its interfaces and implements their member functions. (Unlike EKoala3, the EKoala4 server doesn't show a main window because it has no menu items itself.) ObjectUser3 queries for those interfaces, calls their member functions, and displays the results. In fact, none of the code in either sample knows that <I>IAnimal </I>and <I>IKoala </I>are custom interfaces—it treats them as if they were OLE-defined interfaces, taking their marshaling support for granted.</P>
<P>How we create the marshalers for <I>IAnimal </I>and <I>IKoala </I>is of interest to us here. In the CHAP06\IANIMAL directory, you'll find only a few files: a make file, a DEF file, a REG file, and IANIMAL.IDL, the interface definition. You'll find similar files in CHAP06\IKOALA. The make files in these directories will produce IANIMAL.DLL and IKOALA.DLL, which are set with the REG files as InprocServer32 for <I>CLSID</I><I>_</I><I>PSIAnimal</I> and <I>CLSID</I><I>_</I><I>PSIKoala</I>, respectively (the same values as <I>IID</I><I>_</I><I>IAnimal </I>and <I>IID</I><I>_</I><I>IKoala</I>,<I> </I>for reasons we'll see later).</P>
<P>Let's look briefly at each step we have to take to create these necessary sources.</P></font></body></HTML>
