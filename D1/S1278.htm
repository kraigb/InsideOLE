<HTML><HEAD><TITLE>Per-Property Browsing: IPerPropertyBrowsing and IPropertyPage2</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Per-Property Browsing: <I>IPerPropertyBrowsing </I>and <I>IPropertyPage2</I></H3><P>The functionality described in the previous sections provides the capability to work with properties on an object-by-object basis. Sometimes, however, a client might want to display the same user interface for a specific property, which means that it must have a way to tell the property frame to go to a particular page in the property sheet and to tell the page to highlight a specific property.</P>
<P>This is the purpose of the <I>dispIDInitialProperty </I>field in the OCPFIPARAMS structure used with <I>OleCreatePropertyFrameIndirect</I>. When the frame is created in this manner, it will query the objects specified in the structure's <I>lplpUnk </I>field for the interface <I>IPerPropertyBrowsing</I>:</P>
<P><BR></P>
<pre><code>interface IPerPropertyBrowsing : IUnknown<BR>    {<BR>    HRESULT GetDisplayString(DISPID dispid, BSTR *pbstr);<BR>    HRESULT MapPropertyToPage(DISPID dispid, LPCLSID pClsID);<BR>    HRESULT GetPredefinedStrings(DISPID dispid<BR>        , CALPOLESTR *pcaStringsOut, CADWORD *pcaCookiesOut);<BR>    HRESULT GetPredefinedValue(DISPID dispid, DWORD dwCookie<BR>        , VARIANT *pVarOut);<BR>    };<BR><BR>typedef struct tagCALPOLESTR<BR>    {<BR>    ULONG     cElems;<BR>    LPOLESTR *pElems;<BR>    } CALPOLESTR;<BR><BR>typedef struct tagCADWORD<BR>    {<BR>    ULONG  cElems;<BR>    DWORD *pElems;<BR>    } CADWORD;</code></pre>
<P>In particular, the frame will call <I>IPerPropertyBrowsing::MapPropertyToPage. </I>The object will then decide whether it supports the property in question. If the property is not available, the object returns CTL_E_NOPAGEAVAILABLE. Otherwise, the object stores the proper page CLSID in *<I>pClsID </I>and returns S_FALSE. (S_OK has a special meaning, as we'll see in a moment.) Also, when multiple objects are being affected, asking one object in the set is as good as asking all of them: because only property pages common to all the objects are being used, all the objects will specify the same page for the same property. This means the frame needs to ask only the first object.</P>
<P>When the frame successfully retrieves the property page CLSID for the desired property, it queries that page for <I>IPropertyPage2 </I>instead of <I>IPropertyPage</I>:</P>
<P><BR></P>
<pre><code>interface IPropertyPage2 : IPropertyPage<BR>    {<BR>    HRESULT EditProperty(DISPID dispid);<BR>    };</code></pre>
<P>If this interface is not available, the frame will still activate this page first, and the focus will be on the first control in that page. If the interface is available, the frame passes the property's dispID to <I>EditProperty </I>to tell the page to set the focus to the control containing that property. If the page returns an error, the first control on the page will get the focus.</P>
<P>The other member functions of <I>IPerPropertyBrowsing </I>support a client's ability to display an object's properties in some sort of user interface other than a property page. The S_OK return code from <I>IPerPropertyBrowsing::MapPropertyToPage </I>indicates not only that a specific page is available for this property (so that the client can invoke a frame with only this page showing) but that the property can also be manipulated outside the property page altogether, for example in a property sheet of the client's own design that lists client-specific and object-specific properties together.</P>
<P>The function <I>IPerPropertyBrowsing::GetDisplayString </I>provides the property label to show in such a list, and the function <I>GetPredefinedStrings </I>allows the client to retrieve what should appear in a drop-down list box for this property. The counted arrays involved here are again filled by the object using <I>CoTaskMemAlloc</I> and become the client's responsibility. The array of DWORDs from <I>GetPredefinedStrings </I>specifies the values attached to each string when the property itself is an integer type. Finally, <I>GetPredefinedValue </I>supplies the client with a default value for the property in question.</P>
<P>You can see that per-property browsing, combined with the general Property Pages technology, allows for a very complete and detailed user interface surrounding the direct end-user manipulation of an object's properties. A client (or the object) can choose to show all properties in all pages at once, a single property page by itself, or simply a single property outside property pages altogether.</P></font></body></HTML>
