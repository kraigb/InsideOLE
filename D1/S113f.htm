<HTML><HEAD><TITLE>Server (and Handler) Responsibilities</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Server (and Handler) Responsibilities</H3><P>To meet the COM standard for component instantiation, a server must provide the following, regardless of whether it's a DLL or an EXE:</P>
<UL><LI>Registry entries that associate the server module with the CLSID. This can be optionally provided through self-registration and can include entries through which the server indicates that it should be used to emulate another server.</LI><LI>An implementation of a class factory object that supports <I>IClassFactory</I> through which COM asks the server to create the root object in the component. This class factory can support <I>IClassFactory2</I> instead if it wants to control object creation through licensing.</LI><LI>A mechanism through which COM can access the server's class factory.</LI><LI>An unloading mechanism through which the server that is no longer serving any objects can be removed from memory.</LI></UL><P>Although all servers follow the generic structure shown in Figure 5-3 on the next page, the exact implementation of each of these requirements differs for DLLs and EXEs, regardless of whether those modules exist on the same machine or on a different machine from the client. The details of these requirements apply to remote servers just as they do to in-process and local servers. In addition, an object handler is structurally equivalent to a full-blown DLL server, so everything described here for DLLs also applies to handlers. The only difference between a handler and a full server is the extent of the implementation found in that component.</P>
<P>    <img src="f05dd03.gif"></P>
<P><B>Figure 5-3.</B></P>
<P><B>The generic structure of a server module.</B></P></font></body></HTML>
