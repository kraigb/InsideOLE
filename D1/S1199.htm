<HTML><HEAD><TITLE>Compound File API Functions</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Compound File API Functions</H3><P>Now for the moment we've all been waiting for. You've likely been reading this chapter wondering just how a client obtains an <I>IStorage </I>pointer to the root object of a hierarchy. The answer is simple: OLE provides four API functions that create a compound file on whatever LockBytes object you want. Two of the functions create a new file, and two open an existing file:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="153pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>API Function</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>StgCreateDocfile*</P></TD><TD VALIGN="TOP"><P>Opens a new compound file, given a filename and access mode flags, using the default file-based LockBytes. A compound file can be opened as transacted or direct. This function will generate a temporary file if a NULL filename is specified. If the file already exists, this function can either fail or overwrite the existing file, depending on the flags you pass.</P></TD></TR><TR><TD VALIGN="TOP"><P>StgCreateDocfileOnILockBytes</P></TD><TD VALIGN="TOP"><P>Opens a new compound file on a given LockBytes object; otherwise, acts the same as <I>StgCreateDocfile</I>.</P></TD></TR><TR><TD VALIGN="TOP"><P>StgOpenStorage</P></TD><TD VALIGN="TOP"><P>Opens an existing compound file given a filename or creates a new file in the same way as <I>StgCreateDocfile</I>.</P></TD></TR><TR><TD VALIGN="TOP"><P>StgOpenStorageOnILockBytes</P></TD><TD VALIGN="TOP"><P>Opens an existing compound file whose bits exist in a given LockBytes object; otherwise, acts the same as <I>StgOpenStorage</I>. The STGM_CREATE flag is not allowed with this function. You must use <I>StgCreateDocfileOnILockBytes</I> to create a new storage, after which this function can open that storage.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>*  The name <I>Docfile</I> is an archaic term for a compound file and has been preserved in these function names for compatibility with the initial beta releases of OLE 2.</P>
<P>The *<I>OnLockBytes </I>functions give you the ability to create a compound file anywhere you want instead of on the file system. For example, you might want to send the data across a network to a database without ever having to bother the storage object about the details. No matter what your LockBytes does, the <I>IStorage</I> pointer you get back from any of these four functions is equivalent to any other: the available functionality is identical.</P>
<P>Both <I>StgOpenStorage </I>and <I>StgOpenStorageOnILockBytes </I>take some extra arguments to deal with transaction optimizations, allowing a client to exclude specific elements in the storage hierarchy from being transacted even though the compound file itself is transacted. By excluding such elements, you reduce the overall amount of memory necessary to record changes to your data. For more information, refer to the <I>OLE Programmer</I><I>'</I><I>s Reference</I>. This chapter does not go into more detail about this topic.</P>
<P>Besides the four create/open functions, OLE provides three other useful functions:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="124pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>API Function</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>StgIsStorageFile</P></TD><TD VALIGN="TOP"><P>Tests whether a given file is a compound file</P></TD></TR><TR><TD VALIGN="TOP"><P>StgIsStorageLockBytes</P></TD><TD VALIGN="TOP"><P>Tests whether the data in a given LockBytes object contains a compound file</P></TD></TR><TR><TD VALIGN="TOP"><P>StgSetTimes</P></TD><TD VALIGN="TOP"><P>Provides the <I>SetElementTimes</I> equivalent for a root storage without having to open the storage</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>An important note is that a compound file stores the filename as provided by the calling client without converting it to uppercase or lowercase. However, all filename comparisons made under Windows are case insensitive. In addition, OLE will typically use three file handles in opening a transacted compound file—one for the file, one for a temporary file in which changes are recorded, and one preallocated handle for low-memory save situations. Let's see why this third handle is important.</P></font></body></HTML>
