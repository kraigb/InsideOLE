<HTML><HEAD><TITLE>Simple Drag and Drop, Step by Step: Cosmo</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Simple Drag and Drop, Step by Step: Cosmo</H2><P>To demonstrate a basic drag-and-drop implementation, we'll add the feature to the Cosmo sample (CHAP13\COSMO). These changes apply to Component Cosmo as well (CHAP13\COCOSMO), but because both share the same code, we'll see only Cosmo's code in this section. Cosmo's idea of a document is a single Polyline figure that never has scroll bars, so there is no reason to worry about scrolling as a target. In addition, there is already an 8-pixel border around the figure that serves as a perfect pick region. This is the only area of Cosmo's document window class that is visible, so we can say that any mouse button down event in that window causes a pick. Because of this, there is no reason to support mouse debouncing. We'll leave these topics to "Advanced Drag and Drop: Patron" later in this chapter.</P>
<P>Even with these simplifications, we'll make a Cosmo document both the source and the target for Cosmo's private Polyline format. (Instances of Cosmo and CoCosmo will also work together.) Most applications will usually be a source and a target for a private format because those applications can usually copy, cut, and paste private formats using the clipboard within a document window, between document windows, or between applications. OLE Drag and Drop is just as flexible, and in Cosmo's implementation, we'll set up the feature in four source steps and three target steps. We'll do the source side first because it's simpler and because the data object includes graphical formats (metafile and bitmap) that can be dropped into a variety of existing targets that you probably have on your machine (such as an OLE-aware word processor).</P>
<P>The source steps are as follows:</P>
<P>Design the user interface for the operation, including the mouse cursors for each effect and any feedback in the source. (OLE provides default cursors.)</P>
<P>Determine the pick event (for example, left mouse button down) and the drop event (left mouse button up).</P>
<P>Implement the object with <I>IDropSource</I>, which is usually trivial.</P>
<P>Call <I>DoDragDrop</I> when the pick event occurs, and handle both copy and move effects after a drop occurs.</P>
<P>Implementation steps for the target are the following:</P>
<P>Design and implement the end-user feedback code to indicate the result of the drop. Do this first so that step 2 can use it.</P>
<P>Implement the object with <I>IDropTarget.</I> Functions such as <I>DragEnter </I>and <I>DragLeave </I>use the end-user feedback code created in step 1.</P>
<P>Call <I>RegisterDragDrop</I> and <I>RevokeDragDrop</I>, along with <I>CoLockObjectExternal</I>,<I> </I>to manage availability and stability of the target's <I>IDropSource </I>object.</P>
<P>The following sections look at each of the steps in detail. The <I>CDropSource </I>class, which singly inherits members from <I>IDropSource </I>in COSMO.H and is implemented in DROPSRC.CPP, implements the source side. The <I>CDropTarget </I>class, defined in COSMO.H and implemented in DROPTGT.CPP, provides the target side. Both objects have trivial constructors, destructors, and <I>IUnknow</I><I>n </I>members. The objects maintain their own reference counts and delete themselves in <I>Release </I>as usual. (There is no need to do anything more.)</P>
<P>A few changes to DOCUMENT.CPP fill out Cosmo's drag-and-drop responsibilities. One special note about the document class (<I>CCosmoDoc</I>):  it now has a BOOL member named <I>m</I><I>_</I><I>fDragSource </I>that is set to TRUE when the user picks up data in that document. Because the same document might be a target, this flag allows Cosmo to detect a drag and drop within the same document. Cosmo doesn't need to do anything when a drop happens on the same source document, so we can avoid unnecessary code and processing with this simple flag.</P></font></body></HTML>
