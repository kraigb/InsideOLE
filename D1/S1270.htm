<HTML><HEAD><TITLE>Custom and Dual Interfaces</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Custom and Dual Interfaces</H3><P>All of the previous discussion has to do with calling methods and accessing properties through <I>IDispatch</I>. If you have a controller that understands enough about type information to generate arbitrary calls to <I>IDispatch</I>, then it will probably also be sophisticated enough to generate calls to vtable-based functions in either custom or dual interfaces. This is a bit trickier, of course, because calling these functions requires you to build a stack frame and process return values from registers—operations that are usually machine dependent.</P>
<P>I can't say that I've actually tried to make a generic vtable calling routine, but I suspect that it could be done with an assembly language function that took the interface pointer to call, the offset in the vtable of the function to call, the calling convention to use, and an array of VARIANTARG<I> </I>structures. This function would push each VARIANTARG<I> </I>onto the stack in the order appropriate for the calling convention, make the actual call, clean up the stack as necessary (for the <I>cdecl </I>calls, for example), and put the return value in the correct registers. This would be the only machine-dependent piece of code in the whole application.</P>
<P>I also suspect that you could get away with a similar scheme involving the use of a variable argument C function with some in-line assembly. The act of calling this function would possibly generate most of the stack frame automatically, whereas the function itself would tweak the stack, make the call, do some cleanup, and return.</P>
<P>In either of these cases, it's possible to call vtable functions in custom and dual interfaces without having machine-dependent assembly invade your source code.</P></font></body></HTML>
