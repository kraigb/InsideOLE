<HTML><HEAD><TITLE>COM API Functions for GUIDs</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>COM API Functions for GUIDs</H3><P>The basic COM and OLE system DLLs provide a number of API functions for dealing with GUIDs, CLSIDs, and IIDs, as illustrated in Table 2-1:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="90pt" VALIGN="TOP"><COL WIDTH="221pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Function</B></P></TD><TD VALIGN="TOP"><P><B>Purpose</B></P></TD></TR><TR><TD VALIGN="TOP"><P>CoCreateGuid</P></TD><TD VALIGN="TOP"><P>Allocates a new GUID</P></TD></TR><TR><TD VALIGN="TOP"><P>IsEqualGUID</P></TD><TD VALIGN="TOP"><P>Compares two GUIDs for equivalence</P></TD></TR><TR><TD VALIGN="TOP"><P>IsEqualCLSID </P></TD><TD VALIGN="TOP"><P>Typesafe version of <I>IsEqualGUID</I> for CLSIDs</P></TD></TR><TR><TD VALIGN="TOP"><P>IsEqualIID</P></TD><TD VALIGN="TOP"><P>Typesafe version of <I>IsEqualGUID</I> for IIDs</P></TD></TR><TR><TD VALIGN="TOP"><P>StringFromCLSID</P></TD><TD VALIGN="TOP"><P>Typesafe conversion of a CLSID to a text string</P></TD></TR><TR><TD VALIGN="TOP"><P>StringFromIID</P></TD><TD VALIGN="TOP"><P>Typesafe version of <I>StringFromCLSID</I> for IIDs</P></TD></TR><TR><TD VALIGN="TOP"><P>StringFromGUID2</P></TD><TD VALIGN="TOP"><P>Converts a GUID to a text string, storing the string in a caller-allocated buffer</P></TD></TR><TR><TD VALIGN="TOP"><P>CLSIDFromString</P></TD><TD VALIGN="TOP"><P>Converts a text string to a typesafe CLSID</P></TD></TR><TR><TD VALIGN="TOP"><P>IIDFromString</P></TD><TD VALIGN="TOP"><P>Typesafe version of <I>CLSIDFromString</I> for IIDs</P></TD></TR></TBODY></TABLE>
<P><BR></P><P><B>Table 2-1.</B></P>
<P><B>API functions for working with GUIDs, CLSIDs, and IIDs. Strings are always in Unicode on 32-bit platforms.</B></P>
<P>All of the string-related functions work with a GUID spelled out in hex digits as before, but they are wrapped in braces, as in <I>{</I><I>42754580-16b7-11ce-80eb-00aa003d7352</I><I>}</I>. This is the format of a GUID as it appears in the registry. The <I>StringFromCLSID</I> and <I>StringFromIID</I> functions allocate the returned string themselves, using what is called the <I>task allocator,</I> as we'll see in "Memory Management" later in this chapter.</P>
<P>In addition to the <I>IsEqual </I>functions, the OLE header files also include C++ overloaded == operators for GUIDs, CLSIDs, and IIDs, providing more convenient methods of comparison for C++ implementations. You'll see these operators used in most of this book's sample code<I>.</I></P>
<P>One other note concerning C vs. C++: when passing any GUID as a function argument, you must pass an explicit pointer in C, whereas you can use a reference in C++. For example, in C++ you could pass something such as <I>IID</I><I>_</I><I>ISampleOne </I>as is, but in C you would have to pass <I>&amp;</I><I>IID</I><I>_</I><I>ISampleOne</I>.</P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR></TBODY></TABLE>
<P><BR></P><H4><A NAME="sec0"></A><I>#include &lt;initguid.h&gt;</I> and Precompiled Headers</H4><P>Any code that ever refers to any GUID, be it a CLSID or an IID, must include a standard OLE header file, INITGUID.H, once and only once in the entire compilation of a DLL or an EXE. All clients and components should have an <I>#</I><I>include &lt;initguid.h&gt;</I> line in one and only one source file, which comes after the other OLE headers. INITGUID.H ensures that all GUIDs (yours and OLE's) get defined as constants in your data or code segment that holds constants. If you typically use a central include file for all files in your project, wrap an <I>#</I><I>ifdef</I> statement around the <I>#</I><I>include</I>. The samples in this book have such a statement based on a symbol INITGUIDS that you'll see in INC\BOOKGUID.H. One file in each project defines INITGUIDS.<I> </I>(INITGUIDS is a symbol used in the OLE headers themselves for the same sort of purpose, but I couldn't think of another name.)</P>
<P>Including INITGUID.H only once is tricky when you are using precompiled headers. Create the precompiled header in a file that does not include INITGUID.H—the samples using precompilation all use the file PRECOMP.CPP, which contains only one<I> #</I><I>include</I> statement. You can then use the precompiled header from this step to compile with all files <I>except</I> the one in which you <I>want</I> to include INITGUID.H. You should compile that single file without using the precompiled header to pull in the extra file.</P>

<TABLE COLS="1" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="432pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B></B></P></TD></TR></TBODY></TABLE>
<P><BR></P></font></body></HTML>
