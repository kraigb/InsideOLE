<HTML><HEAD><TITLE>Persistent Objects</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Persistent Objects</H3><P>We've seen that structured storage is necessary to allow multiple components to share the same disk file or other mass of storage. An object indicates its ability to save its persistent state to a storage or a stream element by implementing the interface <I>IPersistStorage</I> or <I>IPersistStream </I>(or a slight enhancement, <I>IPersistStreamInit</I>). There is also an <I>IPersistFile</I> interface for components that save to separate files. An object that implements any support whatsoever for saving and loading its state is called <I>persistent</I>. In Chapter 8, we'll deal with persistent objects in detail.</P>
<P>The client, or, more appropriately, container, that manages persistent objects creates or obtains the <I>IStorage </I>or <I>IStream</I> pointer to pass to the objects through <I>IPersistStorage </I>or <I>IPersistStream[Init]</I>. The container tells objects when to save or load their persistent states, so the container remains in control of the overall document or file but gives each component individual control over a storage or stream within that file. This tends to make structures within a file more intelligent by placing more of the code that knows how to handle the structures in objects rather than in the container.</P></font></body></HTML>
