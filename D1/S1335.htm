<HTML><HEAD><TITLE>Control and Container Requirements</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Control and Container Requirements</H3><P>If you take a control's functionality and content and add to them the other means necessary for a container to manipulate a control, you'll come up with five mechanisms that all controls must provide:</P>
<UL><LI>Control properties. A mechanism through which the container can retrieve and modify properties as well as call a control's custom methods. The control must expose the names of properties as well as the names and parameters of its methods. This also includes a control-supplied user interface to allow end users to manipulate properties.</LI><LI>Control events. A mechanism through which the control notifies the container of events that occur in the control.</LI><LI>Control visuals. A mechanism through which the control draws itself but gives the container the responsibility to manage the control's position and dimensions.</LI><LI>Control mnemonics. A mechanism through which the control can specify and process its keyboard mnemonics and accelerators, such as Alt key combinations and arrow keys.</LI><LI>Control persistence. A mechanism through which the container can ask the control to save its current information into a storage or a stream object.</LI></UL><P>On the other side of the picture, a control container must provide various services to all controls within its form or document. Each control in the container is given its own <I>control site,</I> just as a content object is given a site in a compound document. These sites expose to the control container properties called <I>ambient properties</I> because they define the ambiance of the control's environment. By using ambient properties, the container can specify the default colors, fonts, alignment, and behavioral suggestions. Controls can choose to retrieve these properties from the container at run time to integrate themselves better into the form or document as a whole.</P>
<P>A container must also supply a control with event handlers—container-provided implementations of a control's outgoing interfaces that we can also refer to as <I>event sinks</I>. The container determines what other actions should be executed when the various functions in these event interfaces are called.</P>
<P>Besides dealing with properties and events, the container must also provide all the other facilities for object layout, ordering, and keyboard processing because only the container is aware of all the objects in a form and the relationships between those objects. It must also facilitate saving the document or form to a file for later reloading. If appropriate, the container can provide additional user interface features for the registration and creation of controls (for example, a dialog to add controls to the registry and a toolbar populated with buttons that represent the registered controls).</P>
<P>With these items in mind, we can draw up a list of the required mechanisms for a control container:</P>
<UL><LI>Container layout. A mechanism through which the container can create, place, size, and order controls.</LI><LI>Container form persistence. A mechanism through which the container can save and retrieve the persistent state of controls and the mapping of their events to container actions.</LI><LI>Container ambient properties. A mechanism through which the container can expose ambient properties to all controls.</LI><LI>Container event handlers. A mechanism through which the container can provide and expose event entry points to each specific control.</LI><LI>Container extended controls. A mechanism through which the container can aggregate an OLE control into a container-implemented extended control. The container can then add its own methods, properties, and events to a control so that they appear as native control features to the rest of the container. This allows the container to treat all controls in a uniform fashion without regard to which piece of code implements a method, a property, or an event.</LI><LI>Container keyboard. A mechanism through which the container can inform controls of accelerator and other keyboard events as well as handle special purpose buttons, labels, and simple frame controls (a type of control that contains other controls).</LI></UL><P>In general, a container will also support different operational modes, named <I>design mode</I> and <I>run mode</I>. In design mode, the container is oriented toward assigning actions to control events, creating new controls, moving controls around in a form, and performing other tasks concerned with the form's design. A container can deactivate all controls at this time or simply tell controls to ignore user input. In run mode, also called <I>user mode,</I> the controls on the form are fixed in number and in position and any events a user sends trigger the actions assigned to those events in design mode. The container tells controls how to behave in each mode through ambient properties, as we'll see shortly.</P></font></body></HTML>
